// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpDnsResolvePackage {
    #[prost(string, optional, tag = "1")]
    pub domain: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub query_timeout: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub ping_timeout: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub ip_expire_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub network_resolved_time_cost: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "6")]
    pub network_resolved_cdn_ip: ::prost::alloc::vec::Vec<IpEntity>,
    #[prost(uint64, optional, tag = "7")]
    pub local_resolved_time_cost: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "8")]
    pub local_resolved_cdn_ip: ::prost::alloc::vec::Vec<IpEntity>,
    #[prost(uint64, optional, tag = "9")]
    pub ping_time_cost: ::core::option::Option<u64>,
    #[prost(message, repeated, tag = "10")]
    pub ping_ip: ::prost::alloc::vec::Vec<IpEntity>,
    #[prost(message, optional, tag = "11")]
    pub best_result: ::core::option::Option<IpEntity>,
    #[prost(bool, optional, tag = "12")]
    pub enable_cross_platform: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "13")]
    pub ping_details: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub network_resolved_client_ip: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(bool, optional, tag = "15")]
    pub is_cronet: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IpEntity {
    #[prost(string, optional, tag = "1")]
    pub f41124ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub expire_date: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub rtt: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub cdn_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub resolver: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OpenRedPackDetailPackage {
    #[prost(uint64, optional, tag = "1")]
    pub id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub total_value: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub grab_value: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub open_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "5")]
    pub send_request: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "6")]
    pub time_info: ::core::option::Option<TimeInfo>,
    #[prost(string, optional, tag = "7")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TimeInfo {
    #[prost(uint64, optional, tag = "1")]
    pub client_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub server_timestamp: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3")]
    pub client_ntp_available: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PipelineKeyDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub f41125ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub file_key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "4")]
    pub server_info: ::prost::alloc::vec::Vec<ServerInfo>,
    #[prost(uint64, optional, tag = "5")]
    pub resume_position: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub next_seq: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ServerInfo {
    #[prost(string, optional, tag = "1")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub port: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub protocol: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SendRedPackDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub id: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "3")]
    pub grade: ::core::option::Option<Grade>,
    #[prost(uint64, optional, tag = "4")]
    pub value: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub total_value: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub open_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub online_audience_count: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "8")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Grade {
    #[prost(uint64, optional, tag = "1")]
    pub low_value: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub middle_value: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub high_value: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AndroidPatchCompositePackage {
    #[prost(bool, optional, tag = "1")]
    pub success: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "2")]
    pub patch_md5: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub patch_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub current_tinker_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AndroidPatchLoadPackage {
    #[prost(bool, optional, tag = "1")]
    pub success: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "2")]
    pub load_code: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub patch_md5: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub patch_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub current_tinker_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub patch_load_code: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AndroidPatchQueryPackage {
    #[prost(bool, optional, tag = "1")]
    pub success: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub rollback: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub patch_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub patch_tinker_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub current_patch_md5: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub current_tinker_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "7")]
    pub apply_policy: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "8")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub patch_md5: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "10")]
    pub patch_size: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "11")]
    pub patch_url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AndroidPatchRollbackPackage {
    #[prost(string, optional, tag = "1")]
    pub current_patch_md5: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub current_tinker_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BatchHttpDnsResolvePackage {
    #[prost(string, repeated, tag = "1")]
    pub input_domain: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "2")]
    pub existed_domain: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "3")]
    pub domain: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub enable_cross_platform: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "5")]
    pub network_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ClickEntryPackage {
    #[prost(int32, optional, tag = "1")]
    pub click_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DetailActionStatPackage {
    #[prost(uint64, optional, tag = "1")]
    pub enter_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub leave_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub stay_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "4")]
    pub slide_up_play_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub slide_down_play_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub like_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub follow_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub forward_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub expand_comment_popup_window_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub comment_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "11")]
    pub negative_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub report_count: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "13")]
    pub leave_action: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeviceDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub device_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub old_device_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ExchangeDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FetchFeedListDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub llsid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub cost: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "4")]
    pub cold_start: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub first_page: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub prefetch: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IapPaymentDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub product: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub step: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub error_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub verify_source: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "5")]
    pub extra_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "6")]
    pub jail_broken: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IosPatchParsePackage {
    #[prost(bool, optional, tag = "1")]
    pub success: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "2")]
    pub version_package: ::core::option::Option<PatchVersionPackage>,
    #[prost(string, optional, tag = "3")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IosPatchQueryPackage {
    #[prost(bool, optional, tag = "1")]
    pub success: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub rollback: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "3")]
    pub new_patch_md5: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub new_patch_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub new_patch_version_package: ::core::option::Option<PatchVersionPackage>,
    #[prost(message, optional, tag = "6")]
    pub current_patch_version_package: ::core::option::Option<PatchVersionPackage>,
    #[prost(string, optional, tag = "7")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveStreamDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub speed_level: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub completed: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "3")]
    pub cost: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "4")]
    pub reconnect_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "5")]
    pub duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "6")]
    pub beauty_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub sound_effect_enabled: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8")]
    pub camera_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "9")]
    pub flashlight_enabled: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "10")]
    pub gif_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MomentDetailPackage {
    #[prost(uint32, optional, tag = "1")]
    pub image_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub tag_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub moment_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub error_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub operation_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MultiFramePackage {
    #[prost(uint64, optional, tag = "1")]
    pub total_cost: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub frame_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MultiFrameUploadPackage {
    #[prost(uint64, optional, tag = "1")]
    pub cost: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub batch_size: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub batch_number: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "4")]
    pub data_size: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PatchVersionPackage {
    #[prost(string, optional, tag = "1")]
    pub patch_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub base_version: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProfileActionDetailPackage {
    #[prost(uint64, optional, tag = "1")]
    pub enter_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub leave_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub stay_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "4")]
    pub followed_when_enter: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub followed_when_leave: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub leave_action: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "7")]
    pub slide_up_play_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub slide_down_play_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub click_play_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub like_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "11")]
    pub follow_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub forward_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub expand_comment_popup_window_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub comment_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "15")]
    pub negative_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "16")]
    pub report_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublishPhotoDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub step: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub photo_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "3")]
    pub is_hd_photo: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QrCodeDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub media: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub route_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub qrcode_content: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RequestSegmentInfoDetailPackage {
    #[prost(uint64, optional, tag = "1")]
    pub crc_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub request_cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub f41126ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub encode_config_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SendGiftDetailPackage {
    #[prost(uint32, optional, tag = "1")]
    pub count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub combo_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub cost: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SendImageMessagePackage {
    #[prost(string, optional, tag = "1")]
    pub from_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub to_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub source: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMessageDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub from_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "2")]
    pub send_timestamp: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "3")]
    pub environment: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub result_code: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub message_type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "6")]
    pub send_time_cost: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "7")]
    pub msg_type: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "8")]
    pub compress_rate: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "9")]
    pub upload_rate: ::core::option::Option<f32>,
    #[prost(int64, optional, tag = "10")]
    pub time_send_only: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ShareDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub f41127via: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub shared_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub platform: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "4")]
    pub author_id: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub photo_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub s_author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub s_photo_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub live_guide_trigger_rule: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ShareFromOtherAppDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub source_app: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SwitchPlayUrlDetailPackage {
    #[prost(uint64, optional, tag = "1")]
    pub empty_size: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub stalled_duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskDetailPackage {
    #[prost(message, optional, tag = "1")]
    pub send_gift_detail_package: ::core::option::Option<SendGiftDetailPackage>,
    #[prost(message, optional, tag = "2")]
    pub live_stream_detail_package: ::core::option::Option<LiveStreamDetailPackage>,
    #[prost(message, optional, tag = "3")]
    pub exchange_detail_package: ::core::option::Option<ExchangeDetailPackage>,
    #[prost(message, optional, tag = "4")]
    pub switch_play_url_detail_package: ::core::option::Option<
        SwitchPlayUrlDetailPackage,
    >,
    #[prost(message, optional, tag = "6")]
    pub share_detail_package: ::core::option::Option<ShareDetailPackage>,
    #[prost(message, optional, tag = "7")]
    pub device_detail_package: ::core::option::Option<DeviceDetailPackage>,
    #[prost(message, optional, tag = "8")]
    pub qrcode_detail_package: ::core::option::Option<QrCodeDetailPackage>,
    #[prost(message, optional, tag = "9")]
    pub share_from_other_app_detail_package: ::core::option::Option<
        ShareFromOtherAppDetailPackage,
    >,
    #[prost(message, optional, tag = "10")]
    pub upload_detail_package: ::core::option::Option<UploadDetailPackage>,
    #[prost(message, optional, tag = "11")]
    pub request_segment_info_detail_package: ::core::option::Option<
        RequestSegmentInfoDetailPackage,
    >,
    #[prost(message, optional, tag = "12")]
    pub publish_photo_detail_package: ::core::option::Option<PublishPhotoDetailPackage>,
    #[prost(message, optional, tag = "13")]
    pub batch_http_dns_resolve_package: ::core::option::Option<
        BatchHttpDnsResolvePackage,
    >,
    #[prost(message, optional, tag = "14")]
    pub http_dns_resolve_package: ::core::option::Option<HttpDnsResolvePackage>,
    #[prost(message, optional, tag = "16")]
    pub fetch_feed_list_detail_package: ::core::option::Option<
        FetchFeedListDetailPackage,
    >,
    #[prost(message, optional, tag = "18")]
    pub upload_atlas_detail_package: ::core::option::Option<UploadAtlasDetailPackage>,
    #[prost(message, optional, tag = "19")]
    pub upload_atlas_element_detail_package: ::core::option::Option<
        UploadAtlasElementDetailPackage,
    >,
    #[prost(message, optional, tag = "20")]
    pub iap_payment_detail_package: ::core::option::Option<IapPaymentDetailPackage>,
    #[prost(message, optional, tag = "21")]
    pub send_red_pack_detail_package: ::core::option::Option<SendRedPackDetailPackage>,
    #[prost(message, optional, tag = "22")]
    pub open_red_pack_detail_package: ::core::option::Option<OpenRedPackDetailPackage>,
    #[prost(message, optional, tag = "23")]
    pub profile_action_detail_package: ::core::option::Option<
        ProfileActionDetailPackage,
    >,
    #[prost(message, optional, tag = "24")]
    pub send_image_message_package: ::core::option::Option<SendImageMessagePackage>,
    #[prost(message, optional, tag = "25")]
    pub send_message_detail_package: ::core::option::Option<SendMessageDetailPackage>,
    #[prost(message, optional, tag = "29")]
    pub android_patch_query_package: ::core::option::Option<AndroidPatchQueryPackage>,
    #[prost(message, optional, tag = "31")]
    pub android_patch_composite_package: ::core::option::Option<
        AndroidPatchCompositePackage,
    >,
    #[prost(message, optional, tag = "32")]
    pub android_patch_load_package: ::core::option::Option<AndroidPatchLoadPackage>,
    #[prost(message, optional, tag = "33")]
    pub android_patch_rollback_package: ::core::option::Option<
        AndroidPatchRollbackPackage,
    >,
    #[prost(message, optional, tag = "36")]
    pub detail_action_stat_package: ::core::option::Option<DetailActionStatPackage>,
    #[prost(message, optional, tag = "38")]
    pub ios_patch_query_package: ::core::option::Option<IosPatchQueryPackage>,
    #[prost(message, optional, tag = "39")]
    pub ios_patch_parse_package: ::core::option::Option<IosPatchParsePackage>,
    #[prost(message, optional, tag = "40")]
    pub ios_patch_effect_package: ::core::option::Option<PatchVersionPackage>,
    #[prost(message, optional, tag = "41")]
    pub ios_patch_rollback_package: ::core::option::Option<PatchVersionPackage>,
    #[prost(message, optional, tag = "42")]
    pub click_entry_package: ::core::option::Option<ClickEntryPackage>,
    #[prost(message, optional, tag = "43")]
    pub ios_patch_inject_package: ::core::option::Option<PatchVersionPackage>,
    #[prost(message, optional, tag = "44")]
    pub pipeline_key_detail_package: ::core::option::Option<PipelineKeyDetailPackage>,
    #[prost(message, optional, tag = "45")]
    pub moment_detail_package: ::core::option::Option<MomentDetailPackage>,
    #[prost(message, optional, tag = "47")]
    pub multi_frame_package: ::core::option::Option<MultiFramePackage>,
    #[prost(message, optional, tag = "48")]
    pub multi_frame_upload_package: ::core::option::Option<MultiFrameUploadPackage>,
    #[prost(message, optional, tag = "49")]
    pub time_stat_package: ::core::option::Option<TimeStatPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TimeStatPackage {
    #[prost(string, optional, tag = "1")]
    pub start_time: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub end_time: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub enter_time: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub leave_time: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub duration: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub played_duration: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub text: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UploadAtlasDetailPackage {
    #[prost(uint64, optional, tag = "1")]
    pub file_length: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub f41128ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub completed_length: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub encode_config_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "7")]
    pub element_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub picture_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub failed_element_count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UploadAtlasElementDetailPackage {
    #[prost(uint64, optional, tag = "1")]
    pub file_length: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub f41129ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub completed_length: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub encode_config_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "7")]
    pub extra_message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UploadDetailPackage {
    #[prost(uint64, optional, tag = "1")]
    pub file_length: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub file_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub f41130ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub completed_length: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub encode_config_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "7")]
    pub segments: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub failed_segments: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "9")]
    pub segment_upload_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub segment_upload_first: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "11")]
    pub segment_upload_try_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub whole_upload_try_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "13")]
    pub post_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "14")]
    pub video_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "15")]
    pub pipeline_statistic: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "16")]
    pub pipeline_status: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub pipeline_close_reason: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "18")]
    pub transcode_and_publish_video_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "19")]
    pub pipeline_failed_then_fallback: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "20")]
    pub user_waiting_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "21")]
    pub adaptable_upload_enabled: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "22")]
    pub upload_mode: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "23")]
    pub user_retry_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "24")]
    pub transcode_and_publish_video_duration_foreground: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "25")]
    pub user_waiting_time_foreground: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "26")]
    pub background_http_used: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "27")]
    pub stream_pause_time: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "28")]
    pub photo_source: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "29")]
    pub is_upload_recover: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
    Unknown1 = 0,
    SegmentFile = 1,
    Normal = 2,
    Pipeline = 3,
    Rickon = 4,
    Streaming = 5,
}
impl Type {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Type_UNKNOWN1",
            Self::SegmentFile => "SEGMENT_FILE",
            Self::Normal => "Type_NORMAL",
            Self::Pipeline => "PIPELINE",
            Self::Rickon => "RICKON",
            Self::Streaming => "STREAMING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Type_UNKNOWN1" => Some(Self::Unknown1),
            "SEGMENT_FILE" => Some(Self::SegmentFile),
            "Type_NORMAL" => Some(Self::Normal),
            "PIPELINE" => Some(Self::Pipeline),
            "RICKON" => Some(Self::Rickon),
            "STREAMING" => Some(Self::Streaming),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ApplyPolicy {
    Unknown1 = 0,
    Default = 1,
    KillOnBackground = 2,
    KillImmediately = 3,
}
impl ApplyPolicy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "ApplyPolicy_UNKNOWN1",
            Self::Default => "DEFAULT",
            Self::KillOnBackground => "KILL_ON_BACKGROUND",
            Self::KillImmediately => "KILL_IMMEDIATELY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ApplyPolicy_UNKNOWN1" => Some(Self::Unknown1),
            "DEFAULT" => Some(Self::Default),
            "KILL_ON_BACKGROUND" => Some(Self::KillOnBackground),
            "KILL_IMMEDIATELY" => Some(Self::KillImmediately),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ErrorType {
    Unknown1 = 0,
    NotSupportForeignPay = 1,
    NotSupportConcurrentPay = 2,
    CannotMakePayment = 3,
    UserCancelFetchingReceipt = 4,
}
impl ErrorType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "ErrorType_UNKNOWN1",
            Self::NotSupportForeignPay => "NOT_SUPPORT_FOREIGN_PAY",
            Self::NotSupportConcurrentPay => "NOT_SUPPORT_CONCURRENT_PAY",
            Self::CannotMakePayment => "CANNOT_MAKE_PAYMENT",
            Self::UserCancelFetchingReceipt => "USER_CANCEL_FETCHING_RECEIPT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ErrorType_UNKNOWN1" => Some(Self::Unknown1),
            "NOT_SUPPORT_FOREIGN_PAY" => Some(Self::NotSupportForeignPay),
            "NOT_SUPPORT_CONCURRENT_PAY" => Some(Self::NotSupportConcurrentPay),
            "CANNOT_MAKE_PAYMENT" => Some(Self::CannotMakePayment),
            "USER_CANCEL_FETCHING_RECEIPT" => Some(Self::UserCancelFetchingReceipt),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Step {
    Unknown1 = 0,
    Encode = 1,
    Upload = 2,
}
impl Step {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Step_UNKNOWN1",
            Self::Encode => "ENCODE",
            Self::Upload => "UPLOAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Step_UNKNOWN1" => Some(Self::Unknown1),
            "ENCODE" => Some(Self::Encode),
            "UPLOAD" => Some(Self::Upload),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VerifySource {
    Unknown2 = 0,
    Empty = 1,
    Normal = 2,
    CustomRetry = 3,
    SystemRetry = 4,
}
impl VerifySource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "VerifySource_UNKNOWN2",
            Self::Empty => "EMPTY",
            Self::Normal => "VerifySource_NORMAL",
            Self::CustomRetry => "CUSTOM_RETRY",
            Self::SystemRetry => "SYSTEM_RETRY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VerifySource_UNKNOWN2" => Some(Self::Unknown2),
            "EMPTY" => Some(Self::Empty),
            "VerifySource_NORMAL" => Some(Self::Normal),
            "CUSTOM_RETRY" => Some(Self::CustomRetry),
            "SYSTEM_RETRY" => Some(Self::SystemRetry),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CameraType {
    Unknown2 = 0,
    Front = 1,
    Background = 2,
}
impl CameraType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "CameraType_UNKNOWN2",
            Self::Front => "FRONT",
            Self::Background => "BACKGROUND",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CameraType_UNKNOWN2" => Some(Self::Unknown2),
            "FRONT" => Some(Self::Front),
            "BACKGROUND" => Some(Self::Background),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SpeedLevel {
    Unknown1 = 0,
    None = 1,
    Fast = 2,
    Slow = 3,
}
impl SpeedLevel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "SpeedLevel_UNKNOWN1",
            Self::None => "NONE",
            Self::Fast => "FAST",
            Self::Slow => "SLOW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SpeedLevel_UNKNOWN1" => Some(Self::Unknown1),
            "NONE" => Some(Self::None),
            "FAST" => Some(Self::Fast),
            "SLOW" => Some(Self::Slow),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Operation {
    Unknown = 0,
    Like = 1,
    Unlike = 2,
    Publish = 3,
    Comment = 4,
}
impl Operation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Like => "LIKE",
            Self::Unlike => "UNLIKE",
            Self::Publish => "PUBLISH",
            Self::Comment => "COMMENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "LIKE" => Some(Self::Like),
            "UNLIKE" => Some(Self::Unlike),
            "PUBLISH" => Some(Self::Publish),
            "COMMENT" => Some(Self::Comment),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PhotoType {
    Unknown2 = 0,
    Picture = 1,
    Video = 2,
    Atlas = 3,
    KaraokeVideo = 4,
    KaraokeAudio = 5,
    PaidVideo = 6,
}
impl PhotoType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "PhotoType_UNKNOWN2",
            Self::Picture => "PICTURE",
            Self::Video => "VIDEO",
            Self::Atlas => "ATLAS",
            Self::KaraokeVideo => "KARAOKE_VIDEO",
            Self::KaraokeAudio => "KARAOKE_AUDIO",
            Self::PaidVideo => "PAID_VIDEO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PhotoType_UNKNOWN2" => Some(Self::Unknown2),
            "PICTURE" => Some(Self::Picture),
            "VIDEO" => Some(Self::Video),
            "ATLAS" => Some(Self::Atlas),
            "KARAOKE_VIDEO" => Some(Self::KaraokeVideo),
            "KARAOKE_AUDIO" => Some(Self::KaraokeAudio),
            "PAID_VIDEO" => Some(Self::PaidVideo),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Media {
    Unknown1 = 0,
    Camera = 1,
    Image = 2,
}
impl Media {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Media_UNKNOWN1",
            Self::Camera => "Media_CAMERA",
            Self::Image => "Media_IMAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Media_UNKNOWN1" => Some(Self::Unknown1),
            "Media_CAMERA" => Some(Self::Camera),
            "Media_IMAGE" => Some(Self::Image),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RouteType {
    Unknown2 = 0,
    Login = 1,
    UserProfile = 2,
    AppDownload = 3,
    NeedUpdate = 4,
}
impl RouteType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "RouteType_UNKNOWN2",
            Self::Login => "LOGIN",
            Self::UserProfile => "USER_PROFILE",
            Self::AppDownload => "APP_DOWNLOAD",
            Self::NeedUpdate => "NEED_UPDATE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RouteType_UNKNOWN2" => Some(Self::Unknown2),
            "LOGIN" => Some(Self::Login),
            "USER_PROFILE" => Some(Self::UserProfile),
            "APP_DOWNLOAD" => Some(Self::AppDownload),
            "NEED_UPDATE" => Some(Self::NeedUpdate),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Source {
    Unknown1 = 0,
    Camera = 1,
    Album = 2,
}
impl Source {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Source_UNKNOWN1",
            Self::Camera => "Source_CAMERA",
            Self::Album => "ALBUM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Source_UNKNOWN1" => Some(Self::Unknown1),
            "Source_CAMERA" => Some(Self::Camera),
            "ALBUM" => Some(Self::Album),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Environment {
    Unknown1 = 0,
    NoNetwork = 1,
    LinkUnconnected = 2,
    LinkConnected = 3,
}
impl Environment {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Environment_UNKNOWN1",
            Self::NoNetwork => "NO_NETWORK",
            Self::LinkUnconnected => "LINK_UNCONNECTED",
            Self::LinkConnected => "LINK_CONNECTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Environment_UNKNOWN1" => Some(Self::Unknown1),
            "NO_NETWORK" => Some(Self::NoNetwork),
            "LINK_UNCONNECTED" => Some(Self::LinkUnconnected),
            "LINK_CONNECTED" => Some(Self::LinkConnected),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageType {
    Text = 0,
    HtmlText = 1,
    Image = 2,
    Profile = 3,
    Photo = 4,
    Notice = 5,
    OfficialFeedback = 6,
    UserFeedback = 7,
    PlaceHolder = 100,
}
impl MessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Text => "TEXT",
            Self::HtmlText => "HTML_TEXT",
            Self::Image => "MessageType_IMAGE",
            Self::Profile => "PROFILE",
            Self::Photo => "PHOTO",
            Self::Notice => "NOTICE",
            Self::OfficialFeedback => "OFFICIAL_FEEDBACK",
            Self::UserFeedback => "USER_FEEDBACK",
            Self::PlaceHolder => "PLACE_HOLDER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TEXT" => Some(Self::Text),
            "HTML_TEXT" => Some(Self::HtmlText),
            "MessageType_IMAGE" => Some(Self::Image),
            "PROFILE" => Some(Self::Profile),
            "PHOTO" => Some(Self::Photo),
            "NOTICE" => Some(Self::Notice),
            "OFFICIAL_FEEDBACK" => Some(Self::OfficialFeedback),
            "USER_FEEDBACK" => Some(Self::UserFeedback),
            "PLACE_HOLDER" => Some(Self::PlaceHolder),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveGuideTriggerRule {
    Unknown3 = 0,
    PlayLiveSatisfied = 1,
    SendGift = 2,
    ShareCountSatisfied = 3,
}
impl LiveGuideTriggerRule {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "UNKNOWN3",
            Self::PlayLiveSatisfied => "PLAY_LIVE_SATISFIED",
            Self::SendGift => "SEND_GIFT",
            Self::ShareCountSatisfied => "SHARE_COUNT_SATISFIED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN3" => Some(Self::Unknown3),
            "PLAY_LIVE_SATISFIED" => Some(Self::PlayLiveSatisfied),
            "SEND_GIFT" => Some(Self::SendGift),
            "SHARE_COUNT_SATISFIED" => Some(Self::ShareCountSatisfied),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Platform {
    Unknown2 = 0,
    WechatTimeline = 1,
    WechatSession = 2,
    Qzone = 3,
    QqFriend = 4,
    SinaWeibo = 5,
    Facebook = 6,
    Twitter = 7,
    Youtube = 8,
    Instagram = 9,
    Messenger = 10,
    Whatsapp = 11,
    Pinterest = 12,
    Kik = 13,
    Bbm = 14,
    Line = 15,
    CopyLink = 16,
    Save = 17,
    Viber = 18,
    Vk = 19,
    KakaoTalk = 20,
    Email = 21,
    Renren = 22,
    Path = 23,
    Google = 24,
    ImFriend = 25,
    Zalo = 26,
    Telegram = 27,
    Googleplus = 28,
    More = 29,
    InstagramStory = 30,
    FacebookLite = 31,
    FacebookStory = 32,
    TwitterLite = 33,
    Duet = 34,
    OpenSdCard = 35,
    MessengerLite = 36,
}
impl Platform {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "Platform_UNKNOWN2",
            Self::WechatTimeline => "WECHAT_TIMELINE",
            Self::WechatSession => "WECHAT_SESSION",
            Self::Qzone => "QZONE",
            Self::QqFriend => "QQ_FRIEND",
            Self::SinaWeibo => "SINA_WEIBO",
            Self::Facebook => "FACEBOOK",
            Self::Twitter => "TWITTER",
            Self::Youtube => "YOUTUBE",
            Self::Instagram => "INSTAGRAM",
            Self::Messenger => "MESSENGER",
            Self::Whatsapp => "WHATSAPP",
            Self::Pinterest => "PINTEREST",
            Self::Kik => "KIK",
            Self::Bbm => "BBM",
            Self::Line => "LINE",
            Self::CopyLink => "COPY_LINK",
            Self::Save => "SAVE",
            Self::Viber => "VIBER",
            Self::Vk => "VK",
            Self::KakaoTalk => "KAKAO_TALK",
            Self::Email => "EMAIL",
            Self::Renren => "RENREN",
            Self::Path => "PATH",
            Self::Google => "GOOGLE",
            Self::ImFriend => "IM_FRIEND",
            Self::Zalo => "ZALO",
            Self::Telegram => "TELEGRAM",
            Self::Googleplus => "GOOGLEPLUS",
            Self::More => "MORE",
            Self::InstagramStory => "INSTAGRAM_STORY",
            Self::FacebookLite => "FACEBOOK_LITE",
            Self::FacebookStory => "FACEBOOK_STORY",
            Self::TwitterLite => "TWITTER_LITE",
            Self::Duet => "DUET",
            Self::OpenSdCard => "OPEN_SD_CARD",
            Self::MessengerLite => "MESSENGER_LITE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Platform_UNKNOWN2" => Some(Self::Unknown2),
            "WECHAT_TIMELINE" => Some(Self::WechatTimeline),
            "WECHAT_SESSION" => Some(Self::WechatSession),
            "QZONE" => Some(Self::Qzone),
            "QQ_FRIEND" => Some(Self::QqFriend),
            "SINA_WEIBO" => Some(Self::SinaWeibo),
            "FACEBOOK" => Some(Self::Facebook),
            "TWITTER" => Some(Self::Twitter),
            "YOUTUBE" => Some(Self::Youtube),
            "INSTAGRAM" => Some(Self::Instagram),
            "MESSENGER" => Some(Self::Messenger),
            "WHATSAPP" => Some(Self::Whatsapp),
            "PINTEREST" => Some(Self::Pinterest),
            "KIK" => Some(Self::Kik),
            "BBM" => Some(Self::Bbm),
            "LINE" => Some(Self::Line),
            "COPY_LINK" => Some(Self::CopyLink),
            "SAVE" => Some(Self::Save),
            "VIBER" => Some(Self::Viber),
            "VK" => Some(Self::Vk),
            "KAKAO_TALK" => Some(Self::KakaoTalk),
            "EMAIL" => Some(Self::Email),
            "RENREN" => Some(Self::Renren),
            "PATH" => Some(Self::Path),
            "GOOGLE" => Some(Self::Google),
            "IM_FRIEND" => Some(Self::ImFriend),
            "ZALO" => Some(Self::Zalo),
            "TELEGRAM" => Some(Self::Telegram),
            "GOOGLEPLUS" => Some(Self::Googleplus),
            "MORE" => Some(Self::More),
            "INSTAGRAM_STORY" => Some(Self::InstagramStory),
            "FACEBOOK_LITE" => Some(Self::FacebookLite),
            "FACEBOOK_STORY" => Some(Self::FacebookStory),
            "TWITTER_LITE" => Some(Self::TwitterLite),
            "DUET" => Some(Self::Duet),
            "OPEN_SD_CARD" => Some(Self::OpenSdCard),
            "MESSENGER_LITE" => Some(Self::MessengerLite),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Via {
    Unknown1 = 0,
    Server = 1,
    Client = 2,
}
impl Via {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Via_UNKNOWN1",
            Self::Server => "SERVER",
            Self::Client => "CLIENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Via_UNKNOWN1" => Some(Self::Unknown1),
            "SERVER" => Some(Self::Server),
            "CLIENT" => Some(Self::Client),
            _ => None,
        }
    }
}
