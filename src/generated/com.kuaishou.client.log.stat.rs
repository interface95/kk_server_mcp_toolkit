// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityLaunchRecord {
    #[prost(string, optional, tag = "1")]
    pub activity_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub process_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "3")]
    pub process_start_timestamp: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "4")]
    pub call_start_stack: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub activity_hashcode: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub intent_detail: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "7")]
    pub launch_time_line: ::core::option::Option<ActivityLaunchTimeline>,
    #[prost(message, repeated, tag = "8")]
    pub custom_event: ::prost::alloc::vec::Vec<CustomEvent>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CustomEvent {
    #[prost(string, optional, tag = "1")]
    pub event: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "2")]
    pub timestamp: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HttpdnsStatEvent {
    #[prost(string, optional, tag = "1")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub err_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub total_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub network_resolved_time_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub local_resolved_time_cost_ms: ::core::option::Option<u64>,
    #[prost(int64, optional, tag = "6")]
    pub ping_time_cost_ms: ::core::option::Option<i64>,
    #[prost(message, repeated, tag = "7")]
    pub network_resolved_ips: ::prost::alloc::vec::Vec<IpEntity>,
    #[prost(message, repeated, tag = "8")]
    pub local_resolved_ips: ::prost::alloc::vec::Vec<IpEntity>,
    #[prost(message, repeated, tag = "9")]
    pub final_ips: ::prost::alloc::vec::Vec<IpEntity>,
    #[prost(message, optional, tag = "10")]
    pub best_result: ::core::option::Option<IpEntity>,
    #[prost(uint64, optional, tag = "11")]
    pub retry_cnt: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "12")]
    pub network_resolved_client_ip: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "13")]
    pub extra_info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IpEntity {
    #[prost(string, optional, tag = "1")]
    pub f41118ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub expire_date: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub rtt: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub resolver: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "6")]
    pub rtt_ms: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ActivityLaunchEvent {
    #[prost(message, optional, tag = "1")]
    pub activity_launch_record: ::core::option::Option<ActivityLaunchRecord>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ActivityLaunchTimeline {
    #[prost(int64, optional, tag = "100")]
    pub user_click: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "110")]
    pub start_activity_outgoing_call_begin: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "120")]
    pub start_activity_outgoing_call_end: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "130")]
    pub launch_activity_call_back_begin: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "140")]
    pub launch_activity_call_back_on_created: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "150")]
    pub launch_activity_call_back_on_started: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "160")]
    pub launch_activity_call_back_on_resumed: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "170")]
    pub launch_activity_call_back_end: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "180")]
    pub first_time_view_tree_traversal_begin: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "190")]
    pub first_time_view_tree_traversal_end: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AegonConnectionStatEvent {
    #[prost(string, optional, tag = "1")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub nettype: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub remote_endpoint: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub client_hellos: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "5")]
    pub connection_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub consecutive_rto_cnt: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub consecutive_tlp_cnt: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "8")]
    pub has_in_flight_packets: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "9")]
    pub protocol: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "10")]
    pub closed_by_server: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub handshake_confirmed: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "12")]
    pub num_active_streams: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "13")]
    pub num_total_streams: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "14")]
    pub path_degrading_detected: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "15")]
    pub quic_error_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "16")]
    pub num_migrations: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "17")]
    pub cipher_suite: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "18")]
    pub dns_cost_ms: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "19")]
    pub ssl_cost_ms: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "20")]
    pub connected_duration_ms: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "21")]
    pub bytes_received: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "22")]
    pub bytes_retransmitted: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "23")]
    pub bytes_sent: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "24")]
    pub estimated_bandwidth_kbps: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "25")]
    pub srtt_us: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "26")]
    pub rx_packets_lost: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "27")]
    pub packets_dropped: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "28")]
    pub packets_lost: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "29")]
    pub packets_received: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "30")]
    pub packets_reordered: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "31")]
    pub packets_retransmitted: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "32")]
    pub packets_sent: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "33")]
    pub extra_info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AegonRequestStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub error_code: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub method: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub nettype: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub ipv6_reachable: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "6")]
    pub consumer: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub aegon_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "8")]
    pub cached: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "9")]
    pub http_code: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "10")]
    pub protocol: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "11")]
    pub received_bytes: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub sent_bytes: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "13")]
    pub via_proxy: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "14")]
    pub content_encoding: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "15")]
    pub via_ipv6: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "16")]
    pub socket_reused: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "17")]
    pub ssl_handshake_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18")]
    pub quic_broken: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "19")]
    pub quic_broken_error: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "20")]
    pub client_hellos: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "21")]
    pub dns_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "22")]
    pub tcp_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "23")]
    pub ssl_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "24")]
    pub connection_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "25")]
    pub request_send_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "26")]
    pub waiting_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "27")]
    pub header_recv_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "28")]
    pub redirect_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "29")]
    pub body_recv_cost_ms: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "30")]
    pub total_cost_ms: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "31")]
    pub extra_info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AlarmInfo {
    #[prost(int32, optional, tag = "1")]
    pub background_alarm_cnt: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub total_alarm_cnt: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AnchorLiveStreamQoSPackage {
    #[prost(uint64, optional, tag = "1")]
    pub traffic: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub block_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub retry_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub dropped_frame_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub bps_above500_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub bps_between400_and500_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub bps_between300_and400_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub bps_between200_and300_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub bps_between0_and200_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub bps0_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "11")]
    pub fps_above15_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub fps_between10_and15_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub fps_between5_and10_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "14")]
    pub fps_between0_and5_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "15")]
    pub fps0_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub encoded_video_frame_cnt: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AnchorStatEvent {
    #[prost(string, optional, tag = "1")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub fullscreen_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub like_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub online_cnt_leave: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub push_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "7")]
    pub traffic: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub buffer_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub prepare_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub block_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub retry_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub dropped_frame_cnt: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "14")]
    pub beautify_enabled: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "15")]
    pub wait_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub best_bps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "17")]
    pub better_bps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "18")]
    pub normal_bps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "19")]
    pub bad_bps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "20")]
    pub worst_bps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "21")]
    pub empty_bps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "22")]
    pub best_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "23")]
    pub better_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "24")]
    pub normal_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "25")]
    pub bad_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "26")]
    pub empty_fps_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "27")]
    pub initiative_leave: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "29")]
    pub live_stream_encode_detail: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(uint64, optional, tag = "30")]
    pub live_encode_type: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "31")]
    pub video_resolution_type: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "32")]
    pub live_stream_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "33")]
    pub live_stream_server_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "34")]
    pub encoded_video_frame_cnt: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "35")]
    pub live_stream_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "36")]
    pub sdk_version_num: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "37")]
    pub realtime_upload_num: ::core::option::Option<u64>,
    #[prost(int64, optional, tag = "38")]
    pub live_exception_error_code: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "39")]
    pub server_mode: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "40")]
    pub resolution_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "41")]
    pub landscape_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "42")]
    pub portrait_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "43")]
    pub screen_orientation_switch_cnt: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "44")]
    pub screen_orientation_leave_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "45")]
    pub ping: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "46")]
    pub live_push_start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "47")]
    pub live_push_end_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "48")]
    pub first_feed_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "49")]
    pub first_race_start_time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "50")]
    pub race_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "51")]
    pub idc: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "52")]
    pub music_duration: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "53")]
    pub rssi: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "54")]
    pub mcc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "55")]
    pub f41106mnc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "56")]
    pub lac: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "57")]
    pub f41105cid: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "58")]
    pub live_start_toltal_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "59")]
    pub cover_handle_cost: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "60")]
    pub cover_caption: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "61")]
    pub start_push_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "62")]
    pub open_live_push_page_cost: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "63")]
    pub adv_beautify_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "64")]
    pub use_glasses: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "66")]
    pub push_cdn_reason: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "67")]
    pub glasses_block_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "68")]
    pub glasses_block_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "69")]
    pub cpu_freq_up_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "70")]
    pub cpu_freq_down_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "71")]
    pub lp_response_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "72")]
    pub lp_appear_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "73")]
    pub lp_player_rendered_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "74")]
    pub lp_comment_ready_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "75")]
    pub is_first_enter_live: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "76")]
    pub live_prepush_request_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "77")]
    pub live_check_resolution_request_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "78")]
    pub live_start_push_request_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "79")]
    pub live_business_time_cost_params: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AnchorVoipQoSSliceStatEvent {
    #[prost(string, optional, tag = "1")]
    pub live_push_qos_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub rssi: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub mcc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub f41108mnc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub lac: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub f41107cid: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApiCostDetailStatEvent {
    #[prost(string, optional, tag = "1")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub http_code: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub error_domain: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub error_code: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub keep_alive: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "7")]
    pub dns_start: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub dns_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub connect_establish_start: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub connect_establish_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "11")]
    pub request_start: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub request_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub request_size: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "14")]
    pub response_start: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "15")]
    pub response_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub response_size: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "17")]
    pub waiting_response_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "18")]
    pub total_cost: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "19")]
    pub proxy_used: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "20")]
    pub ratio: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "21")]
    pub request_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "22")]
    pub x_kslogid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "23")]
    pub bytes_to_send: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "24")]
    pub bytes_sent: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "25")]
    pub bytes_to_receive: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "26")]
    pub bytes_received: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "27")]
    pub task_start: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "28")]
    pub response_summary: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "29")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "30")]
    pub api_request_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "31")]
    pub connection_details: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "32")]
    pub is_ipv6: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "33")]
    pub region: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "34")]
    pub response_serialize_cost: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "35")]
    pub result_code: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "36")]
    pub build_request_cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "37")]
    pub extra_cost_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "38")]
    pub extra_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "39")]
    pub server_total_timing: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "40")]
    pub server_cost: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "41")]
    pub server_api_cost: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "42")]
    pub server_api_reco_cost: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "43")]
    pub page: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "44")]
    pub is_chunk_response: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "45")]
    pub chunk_num: ::core::option::Option<i32>,
    #[prost(int64, repeated, packed = "false", tag = "46")]
    pub chunk_body_size_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, packed = "false", tag = "47")]
    pub chunk_total_cost_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, packed = "false", tag = "48")]
    pub chunk_recv_interval_cost_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, packed = "false", tag = "49")]
    pub chunk_recv_cost_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int64, repeated, packed = "false", tag = "50")]
    pub chunk_deserialize_cost_list: ::prost::alloc::vec::Vec<i64>,
    #[prost(int32, optional, tag = "51")]
    pub chunk_unpacking_error_code: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "52")]
    pub start_page: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AppStorageUsagePackage {
    #[prost(uint32, optional, tag = "1")]
    pub system_cache_storage_occupy: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub data_storage_occupy: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub data_dedicated_dir_occupy: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub sdcard_storage_occupy: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub external_data_storage_occupy: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub external_data_dedicated_dir_occupy: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub total_storage_occupy: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub desc_data_dedicated_dir_occupy: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "9")]
    pub desc_sdcard_storage_occupy: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "10")]
    pub desc_external_data_dedicated_dir_occupy: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AppUsageStatEvent {
    #[prost(uint64, optional, tag = "1")]
    pub app_use_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "2")]
    pub item_count_scrolled: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub screen_count_scrolled: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "4")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(string, optional, tag = "5")]
    pub detail: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "6")]
    pub source: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "7")]
    pub app_use_time_start: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AudienceQoSSliceStatEvent {
    #[prost(string, optional, tag = "1")]
    pub live_play_qos_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub rssi: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub mcc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub f41110mnc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub lac: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub f41109cid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub kwai_signature: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "8")]
    pub inter_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(string, optional, tag = "9")]
    pub soc_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub board_platform: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub inter_st_ex_params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AudienceStatEvent {
    #[prost(string, optional, tag = "1")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub fullscreen_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub like_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub online_cnt_enter: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub online_cnt_leave: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "7")]
    pub initiative_leave: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "8")]
    pub traffic: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub buffer_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub prepare_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "11")]
    pub stuck_cnt: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "12")]
    pub live_stream_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub live_stream_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "14")]
    pub retry_cnt: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "15")]
    pub push_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "17")]
    pub first_screen_total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "18")]
    pub analyze_dns_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "19")]
    pub connect_http_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "20")]
    pub open_stream_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "21")]
    pub analyze_stream_info_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "22")]
    pub open_codec_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "23")]
    pub receive_first_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "24")]
    pub pre_decode_first_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "25")]
    pub decode_first_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "26")]
    pub render_first_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "27")]
    pub first_screen_drop_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "28")]
    pub drop_package_total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "29")]
    pub live_decode_type: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "30")]
    pub dns_resolved_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "31")]
    pub dns_provider_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "32")]
    pub best_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "33")]
    pub better_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "34")]
    pub normal_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "35")]
    pub bad_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "36")]
    pub empty_fps_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "37")]
    pub dns_resolve_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "38")]
    pub dns_resolved_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "39")]
    pub dns_resolver_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "40")]
    pub live_video_encode_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "41")]
    pub player_qos_json: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "42")]
    pub stream_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "43")]
    pub block_cnt: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "44")]
    pub live_stream_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "45")]
    pub realtime_upload_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "47")]
    pub landscape_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "48")]
    pub portrait_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "49")]
    pub screen_orientation_switch_cnt: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "50")]
    pub screen_orientation_leave_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "51")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(message, optional, tag = "52")]
    pub refer_url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(uint64, optional, tag = "53")]
    pub live_play_start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "54")]
    pub live_play_end_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "55")]
    pub first_feed_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "56")]
    pub first_race_start_time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "57")]
    pub race_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "58")]
    pub background_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "59")]
    pub rssi: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "60")]
    pub mcc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "61")]
    pub f41112mnc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "62")]
    pub lac: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "63")]
    pub f41111cid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "64")]
    pub client_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "65")]
    pub cdn_traffic: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "66")]
    pub p2_sp_traffic: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "67")]
    pub live_policy: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "68")]
    pub first_screen_wait_for_play_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "69")]
    pub first_screen_all_prepared_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "70")]
    pub first_screen_player_total_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "71")]
    pub is_auto_play: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "72")]
    pub buffer_time_old: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "73")]
    pub block_cnt_old: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "74")]
    pub post_comment_cnt: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "75")]
    pub live_status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "76")]
    pub kwai_signature: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "77")]
    pub glasses_block_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "78")]
    pub suspend_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "79")]
    pub player_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "80")]
    pub hide_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "81")]
    pub hide_count: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "82")]
    pub background_count: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "83")]
    pub live_room_status_on_enter: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "84")]
    pub floating_window_block_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "85")]
    pub floating_window_buffer_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "86")]
    pub is_slide_play: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "87")]
    pub x_ks_cache: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "88")]
    pub first_screen_app_prepare_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "89")]
    pub first_screen_player_rendering_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "90")]
    pub manifest_switch_status: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "91")]
    pub first_screen_player_view_ready_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "92")]
    pub live_entrance_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "93")]
    pub content_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "94")]
    pub source_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "95")]
    pub first_screen_app_rendering_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "96")]
    pub player_play_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "97")]
    pub source_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "98")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "99")]
    pub search_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "100")]
    pub online_cnt_enter_str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "101")]
    pub online_cnt_leave_str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "102")]
    pub search_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "103")]
    pub refer_live_source_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "104")]
    pub aggregation_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "105")]
    pub live_operation_type: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "106")]
    pub show_index_plus_one: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "107")]
    pub enter_action: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "108")]
    pub external_icon: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "109")]
    pub is_normal_play: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "110")]
    pub view_inflate_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "111")]
    pub component_bind_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "112")]
    pub live_player_biz_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "113")]
    pub is_follow_enter: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "114")]
    pub is_follow_leave: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "115")]
    pub is_paused_before_first_screen: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "116")]
    pub live_icon_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "117")]
    pub live_reco_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "118")]
    pub is_reopen: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "119")]
    pub battery_level: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "120")]
    pub battery_temperature: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "121")]
    pub is_charging: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "122")]
    pub page_click_to_response_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "123")]
    pub page_click_to_appear_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "124")]
    pub page_click_to_player_rendered_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "125")]
    pub page_click_to_component_ready_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "126")]
    pub gift_panel_react_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "127")]
    pub comment_panel_react_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "128")]
    pub is_first_enter_live: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "129")]
    pub component_didappear: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "130")]
    pub business_time_cost_params: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "131")]
    pub union_live_author: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "132")]
    pub union_live_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "133")]
    pub live_player_rendered_start_time: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(uint64, optional, tag = "134")]
    pub live_player_render_start_time: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "135")]
    pub internal_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(string, optional, tag = "136")]
    pub internal_stid_container_json: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "137")]
    pub inter_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(string, optional, tag = "138")]
    pub group_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "139")]
    pub live_icon_text_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "140")]
    pub live_icon_reason_text_type: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "141")]
    pub live_icon_reason_extra_info: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "142")]
    pub live_icon_text_extra_info: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "143")]
    pub tag_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "144")]
    pub live_style: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "145")]
    pub soc_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "146")]
    pub board_platform: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "147")]
    pub is_didappear: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "148")]
    pub inter_st_ex_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "149")]
    pub clear_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "150")]
    pub live_sub_style: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BaseStationPackage {
    #[prost(uint32, optional, tag = "1")]
    pub mobile_country_code: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub mobile_network_code: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub location_area_code: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub cell_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub signal_strength: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "6")]
    pub connected: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatteryStatEvent {
    #[prost(message, optional, tag = "1")]
    pub cpu_time_info: ::core::option::Option<CpuTimeInfo>,
    #[prost(message, optional, tag = "2")]
    pub cpu_usage_info: ::core::option::Option<CpuUsageInfo>,
    #[prost(message, optional, tag = "3")]
    pub network_info: ::core::option::Option<NetworkInfo>,
    #[prost(message, optional, tag = "4")]
    pub alarm_info: ::core::option::Option<AlarmInfo>,
    #[prost(message, optional, tag = "5")]
    pub wakelock_info: ::core::option::Option<WakelockInfo>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BridgeCenterEvent {
    #[prost(string, optional, tag = "1")]
    pub biz: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub namespace: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub bridge: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub find_cost: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub invoke_cost: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "6")]
    pub find_from: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "7")]
    pub success: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "8")]
    pub exception: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "9")]
    pub ratio: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "10")]
    pub page_source: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub extra_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub split_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "13")]
    pub split_status: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub load_split_cost: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "15")]
    pub load_split_end_status: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CdnResourceLoadStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub resource_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub image_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub load_source: ::core::option::Option<i32>,
    #[prost(float, optional, tag = "4")]
    pub ratio: ::core::option::Option<f32>,
    #[prost(message, optional, tag = "5")]
    pub result_package: ::core::option::Option<super::event::ResultPackage>,
    #[prost(uint64, optional, tag = "6")]
    pub queue_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub downloaded_size: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub expected_size: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "9")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub f41114ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "12")]
    pub last_url: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "13")]
    pub cdn_fail_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub cdn_success_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "15")]
    pub x_kslogid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "16")]
    pub load_status: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "17")]
    pub network_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "18")]
    pub total_cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "19")]
    pub extra_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "20")]
    pub video_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "21")]
    pub rank: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "22")]
    pub dns_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "23")]
    pub connect_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "24")]
    pub request_cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "25")]
    pub photo_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "26")]
    pub total_file_size: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "27")]
    pub rssi: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "28")]
    pub mcc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "29")]
    pub f41115mnc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "30")]
    pub lac: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "31")]
    pub f41113cid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "32")]
    pub kwai_signature: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "33")]
    pub download_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "34")]
    pub x_ks_cache: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "35")]
    pub request_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "36")]
    pub retry_times: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "37")]
    pub cdn_qos_json: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "38")]
    pub summary: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "39")]
    pub music_detail_package: ::core::option::Option<super::content::MusicDetailPackage>,
    #[prost(message, optional, tag = "40")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(uint64, optional, tag = "41")]
    pub waiting_response_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "42")]
    pub response_cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "43")]
    pub biz_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "44")]
    pub inter_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(string, optional, tag = "45")]
    pub inter_st_ex_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "46")]
    pub cdn_sample_ratio: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "47")]
    pub url_retry_status: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ChannelSettingPackage {
    #[prost(string, optional, tag = "1")]
    pub channel_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub channel_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub sound_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub vibrate_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub light_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub bubble_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub badge_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub locks_creen_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub pass_dnd_status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "10")]
    pub phone_sound_status: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CpuTime {
    #[prost(string, optional, tag = "1")]
    pub process: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "2")]
    pub cputime: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "3")]
    pub wall_clock_time: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CpuTimeInfo {
    #[prost(message, optional, tag = "1")]
    pub cpu_time: ::core::option::Option<CpuTime>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CpuUsage {
    #[prost(string, optional, tag = "1")]
    pub str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub process: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CpuUsageInfo {
    #[prost(message, repeated, tag = "1")]
    pub cpu_usage: ::prost::alloc::vec::Vec<CpuUsage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CustomProtoEvent {
    #[prost(string, optional, tag = "1")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, optional, tag = "3")]
    pub inter_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(string, optional, tag = "4")]
    pub inter_st_ex_params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CustomStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub name: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub detail: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub biz: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub page: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DeviceIdMappingEvent {
    #[prost(string, optional, tag = "1")]
    pub random_device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub old_device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub pre_device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub did_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub pre_did_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub device_mapping_rpc_type: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeviceStatEvent {
    #[prost(string, optional, tag = "1")]
    pub os_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub model: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub cpu_cores: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub memory: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub density_dpi: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub screen_width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub screen_height: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub battery_temperature: ::core::option::Option<u32>,
    #[prost(double, optional, tag = "9")]
    pub cpu_usage: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "10")]
    pub memory_usage: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "11")]
    pub battery: ::core::option::Option<f64>,
    #[prost(bool, optional, tag = "12")]
    pub charging: ::core::option::Option<bool>,
    #[prost(double, optional, tag = "13")]
    pub volume: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "14")]
    pub brightness: ::core::option::Option<f64>,
    #[prost(bool, optional, tag = "15")]
    pub using_earphone: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "16")]
    pub disk_all: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub disk_free: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "18")]
    pub app_disk_used: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "19")]
    pub imei: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "20")]
    pub imsi: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "21")]
    pub notification_setting: ::core::option::Option<NotificationSettingPackage>,
    #[prost(bool, optional, tag = "22")]
    pub jail_broken: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "23")]
    pub jail_broken_detail: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "24")]
    pub f41116gdb: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "25")]
    pub str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "26")]
    pub idfa: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "28")]
    pub soc_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "29")]
    pub umeng_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "30")]
    pub shumeng_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "31")]
    pub android_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "32")]
    pub installer_package_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "33")]
    pub app_disk_used_all: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "34")]
    pub app_disk_used_private: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "35")]
    pub app_storage_occupy: ::core::option::Option<AppStorageUsagePackage>,
    #[prost(string, optional, tag = "36")]
    pub f41117mac: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "37")]
    pub is_voice_over_on: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "38")]
    pub oaid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "39")]
    pub mediacodec_video_caps: ::core::option::Option<MediaCodecVideoCapabilityPackage>,
    #[prost(message, optional, tag = "40")]
    pub hdr_caps: ::core::option::Option<HdrCapabilityPackage>,
    #[prost(uint32, optional, tag = "41")]
    pub app_disk_sd_gifshow_used: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "42")]
    pub fingerprint: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "43")]
    pub rom_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "44")]
    pub cpu_platform: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "45")]
    pub status_bar_height: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "46")]
    pub navigation_bar_height: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "47")]
    pub is_support_arm64: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "48")]
    pub current_caid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "49")]
    pub last_caid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "50")]
    pub caid_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "51")]
    pub xppi: ::core::option::Option<f64>,
    #[prost(string, optional, tag = "52")]
    pub last_caid_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "53")]
    pub font_scale: ::core::option::Option<f64>,
    #[prost(string, optional, tag = "54")]
    pub disk_path_size: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "55")]
    pub harmony_os_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "56")]
    pub sim_cards: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "57")]
    pub is_fold: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "58")]
    pub market_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DownloadTemplateStatus {
    #[prost(message, optional, tag = "1")]
    pub meta: ::core::option::Option<TemplateMeta>,
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<UrlRequestStatus>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EdgeItemMetaInfo {
    #[prost(string, optional, tag = "1")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EdgeItemPackage {
    #[prost(message, optional, tag = "1")]
    pub item: ::core::option::Option<EdgeItemMetaInfo>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EdgeSampleAttrPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "3")]
    pub int_single_value: ::core::option::Option<i64>,
    #[prost(float, optional, tag = "4")]
    pub float_single_value: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "5")]
    pub string_single_value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, repeated, packed = "false", tag = "6")]
    pub int_list_value: ::prost::alloc::vec::Vec<i64>,
    #[prost(float, repeated, packed = "false", tag = "7")]
    pub float_list_value: ::prost::alloc::vec::Vec<f32>,
    #[prost(string, repeated, tag = "8")]
    pub string_list_value: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "9")]
    pub int2_d_list_value: ::prost::alloc::vec::Vec<EdgeIntegerList>,
    #[prost(message, repeated, tag = "10")]
    pub float2_d_list_value: ::prost::alloc::vec::Vec<EdgeFloatList>,
    #[prost(message, repeated, tag = "11")]
    pub string2_d_list_value: ::prost::alloc::vec::Vec<EdgeStringList>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EdgeStringList {
    #[prost(string, optional, tag = "1")]
    pub str: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EditorSdkErrorStats {
    #[prost(uint32, optional, tag = "1")]
    pub error_code: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditorSdkExportTaskStatEvent {
    #[prost(double, optional, tag = "1")]
    pub total_cost_sec: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "2")]
    pub startup_cost_sec: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "3")]
    pub encode_cost_sec: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "4")]
    pub decode_cost_sec: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "5")]
    pub render_cost_sec: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "6")]
    pub export_duration_sec: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "7")]
    pub export_fps: ::core::option::Option<f64>,
    #[prost(uint32, optional, tag = "8")]
    pub export_video_bitrate: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "9")]
    pub export_format: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "10")]
    pub export_width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "11")]
    pub export_height: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "12")]
    pub skip_transcode: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub render_pass_through: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "14")]
    pub dropped_frame_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "15")]
    pub encoder_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "16")]
    pub audio_preprocess_cost_sec: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "17")]
    pub fmp4_write_file_cost_sec: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "18")]
    pub fmp4_remux_cost_sec: ::core::option::Option<f64>,
    #[prost(message, optional, tag = "19")]
    pub editor_sdk_preview_player_decoder_stats: ::core::option::Option<
        EditorSdkPreviewPlayerDecoderStats,
    >,
    #[prost(message, optional, tag = "20")]
    pub editor_sdk_preview_player_render_stats: ::core::option::Option<
        EditorSdkPreviewPlayerRenderStats,
    >,
    #[prost(string, optional, tag = "21")]
    pub stats_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "22")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(double, optional, tag = "23")]
    pub psnr: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "24")]
    pub intra_cost: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "25")]
    pub inter_cost: ::core::option::Option<f64>,
    #[prost(bool, optional, tag = "26")]
    pub re_transcode: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "27")]
    pub kwai_photo_movie: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "28")]
    pub editor_sdk_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "29")]
    pub editor_meta: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditorSdkPreviewPlayerDecoderStats {
    #[prost(double, optional, tag = "1")]
    pub decoder_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "2")]
    pub decoder_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "3")]
    pub decoder_percentile50_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "4")]
    pub decoder_percentile95_ms: ::core::option::Option<f64>,
    #[prost(uint32, optional, tag = "5")]
    pub width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub height: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub time_index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub decoder_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "9")]
    pub frame_rate: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "10")]
    pub average_seek_cost_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "11")]
    pub seek_cost_ms5: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "12")]
    pub seek_cost_ms50: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "13")]
    pub seek_cost_ms95: ::core::option::Option<f64>,
    #[prost(uint32, optional, tag = "14")]
    pub seek_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "15")]
    pub decoder_config: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "16")]
    pub field_content: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "17")]
    pub average_idr_interval: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EditorSdkPreviewPlayerRenderStats {
    #[prost(double, optional, tag = "1")]
    pub render_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "2")]
    pub render_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "3")]
    pub render_percentile50_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "4")]
    pub render_percentile95_ms: ::core::option::Option<f64>,
    #[prost(uint32, optional, tag = "5")]
    pub render_width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub render_height: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub project_width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub project_height: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "9")]
    pub render_module_flags: ::core::option::Option<u64>,
    #[prost(double, optional, tag = "10")]
    pub first_frame_render_ms: ::core::option::Option<f64>,
    #[prost(uint32, optional, tag = "11")]
    pub dropped_frame_count: ::core::option::Option<u32>,
    #[prost(double, optional, tag = "12")]
    pub distinct_frame_count_per_sec: ::core::option::Option<f64>,
    #[prost(uint32, optional, tag = "13")]
    pub seek_cache_hit: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub seek_cache_miss: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "15")]
    pub waiting_count: ::core::option::Option<u32>,
    #[prost(double, optional, tag = "16")]
    pub waiting_duration_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "17")]
    pub stats_duration_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "18")]
    pub external_filter_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "19")]
    pub external_filter_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "20")]
    pub external_filter_percentile50_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "21")]
    pub external_filter_percentile95_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "22")]
    pub westeros_filter_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "23")]
    pub westeros_filter_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "24")]
    pub westeros_filter_percentile50_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "25")]
    pub westeros_filter_percentile95_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "26")]
    pub mv_filter_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "27")]
    pub mv_filter_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "28")]
    pub mv_filter_percentile50_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "29")]
    pub mv_filter_percentile95_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "30")]
    pub external_filter_original_frame_config_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "31")]
    pub external_filter_original_frame_config_percentile5_ms: ::core::option::Option<
        f64,
    >,
    #[prost(double, optional, tag = "32")]
    pub external_filter_original_frame_config_percentile50_ms: ::core::option::Option<
        f64,
    >,
    #[prost(double, optional, tag = "33")]
    pub external_filter_original_frame_config_percentile95_ms: ::core::option::Option<
        f64,
    >,
    #[prost(double, optional, tag = "34")]
    pub external_filter_original_frame_data_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "35")]
    pub external_filter_original_frame_data_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "36")]
    pub external_filter_original_frame_data_percentile50_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "37")]
    pub external_filter_original_frame_data_percentile95_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "38")]
    pub external_filter_processed_frame_config_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "39")]
    pub external_filter_processed_frame_config_percentile5_ms: ::core::option::Option<
        f64,
    >,
    #[prost(double, optional, tag = "40")]
    pub external_filter_processed_frame_config_percentile50_ms: ::core::option::Option<
        f64,
    >,
    #[prost(double, optional, tag = "41")]
    pub external_filter_processed_frame_config_percentile95_ms: ::core::option::Option<
        f64,
    >,
    #[prost(double, optional, tag = "42")]
    pub external_filter_processed_frame_data_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "43")]
    pub external_filter_processed_frame_data_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "44")]
    pub external_filter_processed_frame_data_percentile50_ms: ::core::option::Option<
        f64,
    >,
    #[prost(double, optional, tag = "45")]
    pub external_filter_processed_frame_data_percentile95_ms: ::core::option::Option<
        f64,
    >,
    #[prost(double, optional, tag = "46")]
    pub external_filter_raw_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "47")]
    pub external_filter_raw_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "48")]
    pub external_filter_raw_percentile50_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "49")]
    pub external_filter_raw_percentile95_ms: ::core::option::Option<f64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditorSdkPreviewPlayerStats {
    #[prost(message, optional, tag = "1")]
    pub editor_sdk_preview_player_decoder_stats: ::core::option::Option<
        EditorSdkPreviewPlayerDecoderStats,
    >,
    #[prost(message, optional, tag = "2")]
    pub editor_sdk_preview_player_render_stats: ::core::option::Option<
        EditorSdkPreviewPlayerRenderStats,
    >,
    #[prost(string, optional, tag = "3")]
    pub editor_sdk_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub editor_meta: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditorSdkQosStatEvent {
    #[prost(string, optional, tag = "1")]
    pub editor_sdk_qos_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(string, optional, tag = "3")]
    pub task_session_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditorSdkStatEvent {
    #[prost(message, optional, tag = "1")]
    pub preview_player_stats: ::core::option::Option<EditorSdkPreviewPlayerStats>,
    #[prost(message, optional, tag = "2")]
    pub thumbnail_generator_stats: ::core::option::Option<
        EditorSdkThumbnailGeneratorStats,
    >,
    #[prost(string, optional, tag = "3")]
    pub stats_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "4")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(message, optional, tag = "5")]
    pub editor_sdk_error_stats: ::core::option::Option<EditorSdkErrorStats>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditorSdkThumbnailGeneratorStats {
    #[prost(message, optional, tag = "1")]
    pub editor_sdk_thumbnail_generator_unit_stats: ::core::option::Option<
        EditorSdkThumbnailGeneratorUnitStats,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EditorSdkThumbnailGeneratorUnitStats {
    #[prost(double, optional, tag = "1")]
    pub thumbnail_avg_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "2")]
    pub thumbnail_percentile5_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "3")]
    pub thumbnail_percentile50_ms: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "4")]
    pub thumbnail_percentile95_ms: ::core::option::Option<f64>,
    #[prost(uint32, optional, tag = "5")]
    pub width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub height: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub decoder_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "9")]
    pub cache_on: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "10")]
    pub decoder_config: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FrameRateStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub page: ::core::option::Option<i32>,
    #[prost(double, optional, tag = "2")]
    pub frame_rate: ::core::option::Option<f64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GooglePayStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub action_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub response_code: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "3")]
    pub response_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub billing_response: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HdrCapabilityPackage {
    #[prost(bool, optional, tag = "1")]
    pub is_codec_support_hdr10: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub is_codec_support_hdrvp9: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub is_codec_support_hdrdolby: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "4")]
    pub codec_supported_hdr_types: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(bool, optional, tag = "5")]
    pub is_display_support_hdr10: ::core::option::Option<bool>,
    #[prost(double, optional, tag = "6")]
    pub max_avg_luminance: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "7")]
    pub max_luminance: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "8")]
    pub min_luminance: ::core::option::Option<f64>,
    #[prost(string, optional, tag = "9")]
    pub display_supported_hdr_types: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeartBeatEvent {
    #[prost(uint32, optional, tag = "1")]
    pub upload_frequency: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub seq: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub app_use_duration: ::core::option::Option<u32>,
    #[prost(message, optional, tag = "4")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(bool, optional, tag = "5")]
    pub is_switch_background: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "6")]
    pub page_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "7")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "8")]
    pub type_source: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IdcSpeedPackage {
    #[prost(string, optional, tag = "1")]
    pub idc: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub tsp_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub exception: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "4")]
    pub cost: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "5")]
    pub result_code: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "6")]
    pub is_fastest: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IdcSpeedStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "3")]
    pub cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub exception: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub good_idc_threshold: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub test_speed_timeout: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "7")]
    pub best_result: ::core::option::Option<IdcSpeedPackage>,
    #[prost(int32, optional, tag = "8")]
    pub strategy: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub scheme: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImVideoStatEvent {
    #[prost(message, optional, tag = "1")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(message, optional, tag = "2")]
    pub refer_url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(string, optional, tag = "3")]
    pub message_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub ks_uri: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub played_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "7")]
    pub sender_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub video_qos_json: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "9")]
    pub average_fps: ::core::option::Option<f64>,
    #[prost(string, optional, tag = "10")]
    pub receive_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub group_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "12")]
    pub stalled_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "13")]
    pub click_to_first_frame_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "14")]
    pub board_platform: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageDisplayStatEvent {
    #[prost(string, optional, tag = "1")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub photo_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub feed_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub last_procedure: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "8")]
    pub display_status: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "9")]
    pub total_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "10")]
    pub request_start: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "11")]
    pub error: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub extra_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "13")]
    pub ratio: ::core::option::Option<f32>,
    #[prost(int32, optional, tag = "14")]
    pub business_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "15")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(int32, optional, tag = "16")]
    pub display_result: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImageLoadStatEvent {
    #[prost(float, optional, tag = "1")]
    pub ratio: ::core::option::Option<f32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub load_source: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "4")]
    pub success: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "5")]
    pub image_size: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub queue_cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "8")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub f41119ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "12")]
    pub retry_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub cdn_fail_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub cdn_success_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "15")]
    pub x_kslogid: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InvalidRegionEvent {
    #[prost(uint32, optional, tag = "1")]
    pub error_code: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub is_first_retry: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "4")]
    pub new_region: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub keyconfig_pull_status: ::core::option::Option<UrlRequestStatus>,
    #[prost(bool, optional, tag = "6")]
    pub is_pull_keyconfig_async: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IoMonitorStatEvent {
    #[prost(string, optional, tag = "1")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub proc_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub io_files: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub page: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IoOverviewStatEvent {
    #[prost(string, optional, tag = "1")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub proc_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub io_overview: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub page: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KeyConfigStatEvent {
    #[prost(uint32, optional, tag = "1")]
    pub last_version: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub version: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub success: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "4")]
    pub fail_reason: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub warm_up_resource: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub stage: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "8")]
    pub total_cost: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "9")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveChatStatEvent {
    #[prost(string, optional, tag = "1")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub live_chat_room_id: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub role: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "4")]
    pub establish_connection_cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub chat_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "6")]
    pub end_reason: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub error_domain: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "8")]
    pub error_code: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "9")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "21")]
    pub anchor_streaming_qos: ::core::option::Option<AnchorLiveStreamQoSPackage>,
    #[prost(int32, optional, tag = "22")]
    pub chat_media_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "23")]
    pub use_arya: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "24")]
    pub from_audience_apply: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LivePlayBizStatEvent {
    #[prost(string, optional, tag = "1")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub push_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub client_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub live_stream_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub live_stream_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "7")]
    pub live_stream_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub player_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub live_room_status_on_enter: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "10")]
    pub initiative_leave: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "11")]
    pub live_play_start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub live_play_end_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "14")]
    pub landscape_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "15")]
    pub portrait_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub fullscreen_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "17")]
    pub online_cnt_enter: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "18")]
    pub online_cnt_leave: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "19")]
    pub like_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "20")]
    pub post_comment_cnt: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "21")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(message, optional, tag = "22")]
    pub refer_url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(bool, optional, tag = "23")]
    pub is_background: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "24")]
    pub suspend_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "25")]
    pub is_slide_play: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "26")]
    pub source_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "27")]
    pub player_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "28")]
    pub close_reason: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "29")]
    pub upload_reason: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "30")]
    pub live_entrance_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "31")]
    pub source_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "32")]
    pub content_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "33")]
    pub source_type_new: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "34")]
    pub is_barrage_on: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "35")]
    pub is_anchor: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "36")]
    pub is_auto_play: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "37")]
    pub search_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "38")]
    pub online_cnt_enter_str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "39")]
    pub online_cnt_leave_str: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "40")]
    pub search_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "41")]
    pub refer_live_source_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "42")]
    pub aggregation_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "43")]
    pub live_operation_type: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "44")]
    pub show_index_plus_one: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "45")]
    pub external_icon: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "46")]
    pub view_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "47")]
    pub switch_float_window_reason: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "48")]
    pub live_player_biz_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "49")]
    pub live_icon_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "50")]
    pub live_reco_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "51")]
    pub buffer_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "52")]
    pub block_cnt: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "53")]
    pub enter_action: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "54")]
    pub is_normal_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "55")]
    pub is_follow_now: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "56")]
    pub anchor_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "57")]
    pub union_live_author: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "58")]
    pub union_live_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "59")]
    pub internal_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(string, optional, tag = "60")]
    pub internal_stid_container_json: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(bool, optional, tag = "61")]
    pub is_outside_app: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "62")]
    pub inter_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(uint64, optional, tag = "63")]
    pub background_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "64")]
    pub biz_pending_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "65")]
    pub group_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "66")]
    pub live_icon_text_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "67")]
    pub live_icon_reason_text_type: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "68")]
    pub live_icon_reason_extra_info: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "69")]
    pub live_icon_text_extra_info: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "70")]
    pub tag_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "71")]
    pub live_style: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "72")]
    pub is_didappear: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "73")]
    pub inter_st_ex_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "74")]
    pub extra_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "75")]
    pub clear_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "76")]
    pub live_sub_style: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveSocketConnectPackage {
    #[prost(uint64, optional, tag = "1")]
    pub start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3")]
    pub connected: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveStreamAdaptiveQosStatEvent {
    #[prost(string, optional, tag = "1")]
    pub live_adaptive_qos_info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveUseGlassesPackage {
    #[prost(uint64, optional, tag = "1")]
    pub start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub end_time: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MainThreadBlockEvent {
    #[prost(int64, optional, tag = "1")]
    pub block_duration: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "2")]
    pub handler_class_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub message_runnable: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub message_what: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "5")]
    pub stack_trace_sample: ::prost::alloc::vec::Vec<StackTraceSample>,
    #[prost(message, repeated, tag = "6")]
    pub system_trace_sample: ::prost::alloc::vec::Vec<SystemTraceSample>,
    #[prost(message, optional, tag = "7")]
    pub current_url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(int64, optional, tag = "8")]
    pub calc_block_overhead: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "9")]
    pub current_activity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "10")]
    pub application_create_elapse_time: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "11")]
    pub application_foreground_time: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "12")]
    pub application_foreground_elapse_time: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "13")]
    pub process_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub extra_map: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub page: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MediaCodecVideoCapability {
    #[prost(uint32, optional, tag = "1")]
    pub max_width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub max_height: ::core::option::Option<u32>,
    #[prost(double, optional, tag = "3")]
    pub hd_landscape_max_fps: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "4")]
    pub hd_portrait_max_fps: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "5")]
    pub fhd_landscape_max_fps: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "6")]
    pub fhd_portrait_max_fps: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "7")]
    pub uhd_landscape_max_fps: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "8")]
    pub uhd_portrait_max_fps: ::core::option::Option<f64>,
    #[prost(uint32, optional, tag = "9")]
    pub max_instance: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "10")]
    pub is_support_adaptive: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "11")]
    pub is_support_tunnel: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MediaCodecVideoCapabilityPackage {
    #[prost(message, optional, tag = "1")]
    pub avc_caps: ::core::option::Option<MediaCodecVideoCapability>,
    #[prost(message, optional, tag = "2")]
    pub hevc_caps: ::core::option::Option<MediaCodecVideoCapability>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NetworkInfo {
    #[prost(int64, optional, tag = "1")]
    pub rx_bytes: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub tx_bytes: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NetworkStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub ssid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub bssid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub isp: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub start_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub end_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub total_traffic: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NotificationSettingPackage {
    #[prost(int32, optional, tag = "1")]
    pub authorization_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub sound_setting: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub badge_setting: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub alert_setting: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub notification_center_setting: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub lock_screen_setting: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub car_play_setting: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub alert_style: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub notification_switcher: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct OpenedAppStatEvent {
    #[prost(uint64, optional, tag = "1")]
    pub enter_background_timestamp: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "2")]
    pub first_opened_app: ::core::option::Option<super::ApplicationPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PerfCustomStatEvent {
    #[prost(string, optional, tag = "1")]
    pub key: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerformanceMonitoringEvent {
    #[prost(message, optional, tag = "1")]
    pub performance_monitoring_status: ::core::option::Option<
        super::PerformanceMonitoringStatus,
    >,
    #[prost(int32, optional, tag = "2")]
    pub event_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub frame_rate_info: ::core::option::Option<FrameRateStatEvent>,
    #[prost(message, optional, tag = "4")]
    pub activity_launch_info: ::core::option::Option<ActivityLaunchEvent>,
    #[prost(message, optional, tag = "5")]
    pub main_thread_block_info: ::core::option::Option<MainThreadBlockEvent>,
    #[prost(message, optional, tag = "6")]
    pub perf_custom_stat_info: ::core::option::Option<PerfCustomStatEvent>,
    #[prost(message, optional, tag = "7")]
    pub battery_stat_info: ::core::option::Option<BatteryStatEvent>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PhotoDownloadDetail {
    #[prost(int32, optional, tag = "1")]
    pub file_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub server_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub cost: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub http_code: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub download_size: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "8")]
    pub status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "9")]
    pub err_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub response: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "11")]
    pub start_timestamp: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "12")]
    pub load_source: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PhotoDownloadStatEvent {
    #[prost(uint64, optional, tag = "1")]
    pub start_timestamp: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "2")]
    pub photo_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub total_cost: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "4")]
    pub status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub fail_reason: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "6")]
    pub api_detail: ::core::option::Option<PhotoDownloadDetail>,
    #[prost(message, optional, tag = "7")]
    pub photo_download_detail2: ::core::option::Option<PhotoDownloadDetail>,
    #[prost(uint32, optional, tag = "8")]
    pub download_cost: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "9")]
    pub watermark_gen_start_timestamp: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "10")]
    pub watermark_gen_cost: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "11")]
    pub watermark_gen_status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "12")]
    pub watermark_gen_err_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "13")]
    pub encode_start_timestamp: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "14")]
    pub encode_height: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "15")]
    pub encode_width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "16")]
    pub encode_bitrate: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub encode_cost: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "18")]
    pub duration: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "19")]
    pub encode_status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "20")]
    pub encode_err_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "21")]
    pub store_start_timestamp: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "22")]
    pub store_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "23")]
    pub store_status: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "24")]
    pub store_cost: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "25")]
    pub store_err_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "26")]
    pub photo_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "27")]
    pub encode_info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RawStatPackage {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub device_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "2")]
    pub application_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "3")]
    pub audience_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "4")]
    pub anchor_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "5")]
    pub round_trip_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "6")]
    pub api_request_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "7")]
    pub wifi_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "8")]
    pub base_station_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "9")]
    pub live_chat_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "10")]
    pub video_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "11")]
    pub app_usage_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "12")]
    pub idc_speed_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "13")]
    pub api_cost_detail_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "14")]
    pub audience_qos_slice_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "15")]
    pub image_load_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "16")]
    pub cdn_resource_load_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "17")]
    pub anchor_qos_slice_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "18")]
    pub custom_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "19")]
    pub share_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "20")]
    pub opened_app_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "21")]
    pub anchor_voip_qos_slice_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "22")]
    pub frame_rate_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "23")]
    pub activity_launch_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "24")]
    pub main_thread_block_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "25")]
    pub local_music_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "26")]
    pub alloc_stats_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "27")]
    pub live_adaptive_qos_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "28")]
    pub live_stream_adaptive_qos_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "29")]
    pub feed_photo_play_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "30")]
    pub network_diagnosis_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "31")]
    pub network_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "32")]
    pub performance_monitoring_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "33")]
    pub editor_sdk_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "34")]
    pub feed_exposure_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "35")]
    pub live_play_biz_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "36")]
    pub google_pay_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "37")]
    pub performance_monitor_status: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "38")]
    pub battery_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "39")]
    pub temperature_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "40")]
    pub editor_sdk_export_task_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "41")]
    pub web_load_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "42")]
    pub custom_proto_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "43")]
    pub story_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "44")]
    pub editor_sdk_qos_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "45")]
    pub live_socket_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "46")]
    pub video_qos_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "47")]
    pub key_config_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "48")]
    pub im_video_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "49")]
    pub photo_download_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
    #[prost(bytes = "vec", repeated, tag = "50")]
    pub image_display_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "51")]
    pub template_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "52")]
    pub invalid_region_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "53")]
    pub device_mapping_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "54")]
    pub heart_beat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "55")]
    pub aegon_request_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "56")]
    pub bridge_center_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "57")]
    pub io_overview_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "58")]
    pub io_monitor_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "59")]
    pub rerank_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "60")]
    pub httpdns_stat_event: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(bytes = "vec", repeated, tag = "61")]
    pub aegon_connection_stat_event: ::prost::alloc::vec::Vec<
        ::prost::alloc::vec::Vec<u8>,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ResolutionSlicePackage {
    #[prost(uint64, optional, tag = "1")]
    pub play_start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub fullscreen_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub traffic: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub buffer_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub prepare_time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "7")]
    pub live_stream_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub live_stream_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "9")]
    pub retry_cnt: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "10")]
    pub push_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "11")]
    pub first_screen_total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub analyze_dns_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub connect_http_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "14")]
    pub open_stream_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "15")]
    pub analyze_stream_info_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub open_codec_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "17")]
    pub receive_first_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "18")]
    pub pre_decode_first_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "19")]
    pub decode_first_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "20")]
    pub render_first_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "21")]
    pub first_screen_drop_package_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "22")]
    pub drop_package_total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "23")]
    pub live_decode_type: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "24")]
    pub best_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "25")]
    pub better_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "26")]
    pub normal_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "27")]
    pub bad_fps_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "28")]
    pub empty_fps_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "29")]
    pub dns_resolve_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "30")]
    pub dns_resolved_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "31")]
    pub dns_resolver_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "32")]
    pub live_video_encode_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "33")]
    pub player_qos_json: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "34")]
    pub stream_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "35")]
    pub block_cnt: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "36")]
    pub resolution_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "37")]
    pub landscape_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "38")]
    pub portrait_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "39")]
    pub screen_orientation_switch_cnt: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "40")]
    pub screen_orientation_leave_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "41")]
    pub background_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "42")]
    pub rssi: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "43")]
    pub mcc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "44")]
    pub f41121mnc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "45")]
    pub lac: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "46")]
    pub f41120cid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "47")]
    pub push_cdn: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "48")]
    pub pull_cdn: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "49")]
    pub cdn_traffic: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "50")]
    pub p2_sp_traffic: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "51")]
    pub live_policy: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "52")]
    pub first_screen_wait_for_play_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "53")]
    pub first_screen_all_prepared_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "54")]
    pub first_screen_player_total_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "55")]
    pub buffer_time_old: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "56")]
    pub block_cnt_old: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "57")]
    pub suspend_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "58")]
    pub player_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "59")]
    pub hide_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "60")]
    pub hide_count: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "61")]
    pub background_count: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "62")]
    pub floating_window_block_cnt: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "63")]
    pub floating_window_buffer_time: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RoundTripStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SoundEffectUsagePackage {
    #[prost(message, optional, tag = "1")]
    pub sound_effect_package: ::core::option::Option<super::content::SoundEffectPackage>,
    #[prost(bool, optional, tag = "2")]
    pub using_earphone: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "3")]
    pub duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StackTraceElement {
    #[prost(string, optional, tag = "1")]
    pub stack_trace_detail: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StackTraceSample {
    #[prost(int64, optional, tag = "1")]
    pub start_timestamp: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "2")]
    pub end_timestamp: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "3")]
    pub stack_trace_detail: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub run_idle: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "5")]
    pub repeat_count: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatPackage {
    #[prost(message, optional, tag = "1")]
    pub device_stat_event: ::core::option::Option<DeviceStatEvent>,
    #[prost(message, optional, tag = "2")]
    pub application_stat_event: ::core::option::Option<ApplicationStatEvent>,
    #[prost(message, optional, tag = "3")]
    pub audience_stat_event: ::core::option::Option<AudienceStatEvent>,
    #[prost(message, optional, tag = "4")]
    pub anchor_stat_event: ::core::option::Option<AnchorStatEvent>,
    #[prost(message, optional, tag = "5")]
    pub round_trip_stat_event: ::core::option::Option<RoundTripStatEvent>,
    #[prost(message, optional, tag = "7")]
    pub wifi_stat_event: ::core::option::Option<WiFiStatEvent>,
    #[prost(message, optional, tag = "8")]
    pub base_station_stat_event: ::core::option::Option<BaseStationStatEvent>,
    #[prost(message, optional, tag = "9")]
    pub live_chat_stat_event: ::core::option::Option<LiveChatStatEvent>,
    #[prost(message, optional, tag = "10")]
    pub video_stat_event: ::core::option::Option<VideoStatEvent>,
    #[prost(message, optional, tag = "11")]
    pub app_usage_stat_event: ::core::option::Option<AppUsageStatEvent>,
    #[prost(message, optional, tag = "12")]
    pub idc_speed_stat_event: ::core::option::Option<IdcSpeedStatEvent>,
    #[prost(message, optional, tag = "13")]
    pub api_cost_detail_stat_event: ::core::option::Option<ApiCostDetailStatEvent>,
    #[prost(message, optional, tag = "14")]
    pub audience_qos_slice_stat_event: ::core::option::Option<AudienceQoSSliceStatEvent>,
    #[prost(message, optional, tag = "15")]
    pub image_load_stat_event: ::core::option::Option<ImageLoadStatEvent>,
    #[prost(message, optional, tag = "16")]
    pub cdn_resource_load_stat_event: ::core::option::Option<CdnResourceLoadStatEvent>,
    #[prost(message, optional, tag = "18")]
    pub custom_stat_event: ::core::option::Option<CustomStatEvent>,
    #[prost(message, optional, tag = "20")]
    pub opened_app_stat_event: ::core::option::Option<OpenedAppStatEvent>,
    #[prost(message, optional, tag = "21")]
    pub anchor_voip_qos_slice_stat_event: ::core::option::Option<
        AnchorVoipQoSSliceStatEvent,
    >,
    #[prost(message, optional, tag = "22")]
    pub frame_rate_stat_event: ::core::option::Option<FrameRateStatEvent>,
    #[prost(message, optional, tag = "23")]
    pub activity_launch_event: ::core::option::Option<ActivityLaunchEvent>,
    #[prost(message, optional, tag = "24")]
    pub main_thread_block_event: ::core::option::Option<MainThreadBlockEvent>,
    #[prost(message, optional, tag = "25")]
    pub local_music_stat_event: ::core::option::Option<LocalMusicStatEvent>,
    #[prost(message, optional, tag = "28")]
    pub live_stream_adaptive_qos_stat_event: ::core::option::Option<
        LiveStreamAdaptiveQosStatEvent,
    >,
    #[prost(message, optional, tag = "31")]
    pub network_stat_event: ::core::option::Option<NetworkStatEvent>,
    #[prost(message, optional, tag = "32")]
    pub performance_monitoring_event: ::core::option::Option<PerformanceMonitoringEvent>,
    #[prost(message, optional, tag = "33")]
    pub editor_sdk_stat_event: ::core::option::Option<EditorSdkStatEvent>,
    #[prost(message, optional, tag = "35")]
    pub live_play_biz_stat_event: ::core::option::Option<LivePlayBizStatEvent>,
    #[prost(message, optional, tag = "36")]
    pub google_pay_stat_event: ::core::option::Option<GooglePayStatEvent>,
    #[prost(message, optional, tag = "37")]
    pub performance_monitor_status: ::core::option::Option<
        super::PerformanceMonitoringStatus,
    >,
    #[prost(message, optional, tag = "38")]
    pub battery_stat_event: ::core::option::Option<BatteryStatEvent>,
    #[prost(message, optional, tag = "40")]
    pub editor_sdk_export_task_stat_event: ::core::option::Option<
        EditorSdkExportTaskStatEvent,
    >,
    #[prost(message, optional, tag = "42")]
    pub custom_proto_event: ::core::option::Option<CustomProtoEvent>,
    #[prost(message, optional, tag = "43")]
    pub story_stat_event: ::core::option::Option<StoryStatEvent>,
    #[prost(message, optional, tag = "44")]
    pub editor_sdk_qos_stat_event: ::core::option::Option<EditorSdkQosStatEvent>,
    #[prost(message, optional, tag = "46")]
    pub video_qos_stat_event: ::core::option::Option<VideoQosStatEvent>,
    #[prost(message, optional, tag = "47")]
    pub key_config_stat_event: ::core::option::Option<KeyConfigStatEvent>,
    #[prost(message, optional, tag = "48")]
    pub im_video_stat_event: ::core::option::Option<ImVideoStatEvent>,
    #[prost(message, optional, tag = "49")]
    pub photo_download_stat_event: ::core::option::Option<PhotoDownloadStatEvent>,
    #[prost(message, optional, tag = "50")]
    pub image_display_stat_event: ::core::option::Option<ImageDisplayStatEvent>,
    #[prost(message, optional, tag = "51")]
    pub template_stat_event: ::core::option::Option<TemplateStatEvent>,
    #[prost(message, optional, tag = "52")]
    pub invalid_region_event: ::core::option::Option<InvalidRegionEvent>,
    #[prost(message, optional, tag = "53")]
    pub device_mapping_event: ::core::option::Option<DeviceIdMappingEvent>,
    #[prost(message, optional, tag = "54")]
    pub heart_beat_event: ::core::option::Option<HeartBeatEvent>,
    #[prost(message, optional, tag = "55")]
    pub aegon_request_stat_event: ::core::option::Option<AegonRequestStatEvent>,
    #[prost(message, optional, tag = "56")]
    pub bridge_center_stat_event: ::core::option::Option<BridgeCenterEvent>,
    #[prost(message, optional, tag = "57")]
    pub io_overview_stat_event: ::core::option::Option<IoOverviewStatEvent>,
    #[prost(message, optional, tag = "58")]
    pub io_monitor_stat_event: ::core::option::Option<IoMonitorStatEvent>,
    #[prost(message, optional, tag = "59")]
    pub rerank_stat_event: ::core::option::Option<RerankStatEvent>,
    #[prost(message, optional, tag = "60")]
    pub httpdns_stat_event: ::core::option::Option<HttpdnsStatEvent>,
    #[prost(message, optional, tag = "61")]
    pub aegon_connection_stat_event: ::core::option::Option<AegonConnectionStatEvent>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StoryStatEvent {
    #[prost(message, optional, tag = "1")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(message, optional, tag = "2")]
    pub refer_url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(string, optional, tag = "3")]
    pub s_moment_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub media_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "5")]
    pub s_photo_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "6")]
    pub story_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub played_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "8")]
    pub s_author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub story_relation_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "10")]
    pub enter_action: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub leave_action: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "12")]
    pub other_pause_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub comment_stay_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "14")]
    pub view_history_stay_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "15")]
    pub relation_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "16")]
    pub moment_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "17")]
    pub story_extra_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "112")]
    pub atlas_params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SwitchAuthorizationStatusPackage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub status: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SystemTraceSample {
    #[prost(int32, optional, tag = "1")]
    pub systrace_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "3")]
    pub start_timestamp: ::core::option::Option<i64>,
    #[prost(int64, optional, tag = "4")]
    pub end_timestamp: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "5")]
    pub trace_detail: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TemplateMeta {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub version: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TemplateStatEvent {
    #[prost(message, optional, tag = "1")]
    pub template_api_status: ::core::option::Option<UrlRequestStatus>,
    #[prost(message, optional, tag = "2")]
    pub template_meta: ::core::option::Option<TemplateMeta>,
    #[prost(message, optional, tag = "3")]
    pub download_template_status: ::core::option::Option<DownloadTemplateStatus>,
    #[prost(uint32, optional, tag = "4")]
    pub persistent_cost_ms: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TrafficSlicePackage {
    #[prost(uint64, optional, tag = "1")]
    pub duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub traffic: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UrlRequestStatus {
    #[prost(string, optional, tag = "1")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub success: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "3")]
    pub cost_ms: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub fail_reason: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoQosStatEvent {
    #[prost(int32, optional, tag = "1")]
    pub media_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(string, optional, tag = "3")]
    pub video_qos_json: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub board_platform: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub session_uuid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub resource_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub soc_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "8")]
    pub duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "9")]
    pub is_last_retry_play: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "10")]
    pub battery_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub battery_temperature: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "12")]
    pub is_charging: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "13")]
    pub video_monitor_json: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoStatEvent {
    #[prost(uint64, optional, tag = "1")]
    pub duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub played_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "3")]
    pub downloaded: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "4")]
    pub prepare_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub enter_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub leave_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub buffer_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub comment_pause_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub other_pause_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "10")]
    pub video_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub play_video_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "12")]
    pub stalled_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "13")]
    pub photo_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "14")]
    pub dns_resolved_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub dns_provider_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub dns_resolve_host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "17")]
    pub dns_resolved_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "18")]
    pub dns_resolver_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "19")]
    pub play_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "20")]
    pub leave_action: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "21")]
    pub prefetch_size: ::core::option::Option<u64>,
    #[prost(double, optional, tag = "22")]
    pub average_fps: ::core::option::Option<f64>,
    #[prost(uint64, optional, tag = "23")]
    pub comment_stay_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "24")]
    pub qos_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "25")]
    pub play_url_ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "26")]
    pub play_url_ip_source: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "27")]
    pub media_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "28")]
    pub s_photo_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "29")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(message, optional, tag = "30")]
    pub refer_url_package: ::core::option::Option<super::event::UrlPackage>,
    #[prost(uint64, optional, tag = "31")]
    pub popup_window_played_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "32")]
    pub home_auto_play_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "33")]
    pub home_auto_play_max_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "34")]
    pub bluetooth_device_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "35")]
    pub video_qos_json: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "36")]
    pub played_loop_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "37")]
    pub click_to_first_frame_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "38")]
    pub rssi: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "39")]
    pub mcc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "40")]
    pub f41123mnc: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "41")]
    pub lac: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "42")]
    pub f41122cid: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "43")]
    pub video_profile: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "44")]
    pub video_bitrate: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "45")]
    pub video_download_speed: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "46")]
    pub enter_player_action: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "47")]
    pub kwai_signature: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "48")]
    pub biz_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "49")]
    pub begin_play_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "50")]
    pub has_used_earphone: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "51")]
    pub x_ks_cache: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "52")]
    pub fullscreen_duration: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "53")]
    pub fullscreen_stay_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "54")]
    pub manual_pause_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "55")]
    pub calculate_manual_pause_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "56")]
    pub music_station_source_type: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "57")]
    pub summary: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "58")]
    pub follow_played_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "59")]
    pub detail_played_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "60")]
    pub board_platform: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "61")]
    pub content_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "62")]
    pub music_station_background_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "63")]
    pub music_station_background_count: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "64")]
    pub subtype: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "65")]
    pub music_station_background_play_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "66")]
    pub search_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "67")]
    pub leave_play_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "68")]
    pub play_posture: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "69")]
    pub play_sound_volume: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "70")]
    pub entry_author_profile_cnt: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "71")]
    pub stay_author_profile_duration: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "72")]
    pub is_horizontal_screen_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "73")]
    pub is_enlarge_play: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "74")]
    pub fast_play_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "75")]
    pub click_pause_cnt: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "76")]
    pub follow_status_before_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "77")]
    pub follow_status_after_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "78")]
    pub special_like_status_before_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "79")]
    pub special_like_status_after_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "80")]
    pub like_status_before_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "81")]
    pub like_status_after_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "82")]
    pub is_at_friend_in_comment: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "83")]
    pub is_copy_comment: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "84")]
    pub is_click_add_blacklist: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "85")]
    pub is_click_negative_photo: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "86")]
    pub is_click_take_same_frame: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "87")]
    pub is_click_take_same_style: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "88")]
    pub collect_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "89")]
    pub is_click_download_photo: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "90")]
    pub is_stay_comment_area_end_play: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "91")]
    pub play_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "92")]
    pub is_fast_forward_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "93")]
    pub is_backward_play: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "94")]
    pub collect_before_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "95")]
    pub collect_after_status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "96")]
    pub photo_search_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "97")]
    pub comment_maximize_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "98")]
    pub hidden_comment_stay_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "99")]
    pub session_uuid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "100")]
    pub comment_status_before_play: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "101")]
    pub comment_status_after_play: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "102")]
    pub hidden_comment_cnt: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "103")]
    pub is_black_screen: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "104")]
    pub video_application_info_json: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "105")]
    pub soc_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "106")]
    pub exp_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "107")]
    pub background_play_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "108")]
    pub battery_level: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "109")]
    pub battery_temperature: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "110")]
    pub is_charging: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "111")]
    pub is_low_power_mode: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "112")]
    pub atlas_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "113")]
    pub playing_style: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "114")]
    pub player_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "115")]
    pub internal_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(string, optional, tag = "116")]
    pub internal_stid_container_json: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(message, optional, tag = "117")]
    pub inter_stid_container: ::core::option::Option<
        super::super::super::protobuf::log::StidContainer,
    >,
    #[prost(uint64, optional, tag = "118")]
    pub small_window_play_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "119")]
    pub grade_level: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "120")]
    pub inter_st_ex_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "121")]
    pub on_hook_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "122")]
    pub max_progress_duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WakelockInfo {
    #[prost(int32, optional, tag = "1")]
    pub background_acquire_cnt: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub background_release_cnt: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct WiFiPackage {
    #[prost(string, optional, tag = "1")]
    pub ssid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub bssid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub capabilities: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub level: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub frequency: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "6")]
    pub timestamp: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "7")]
    pub connected: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EdgeFloatList {
    #[prost(float, repeated, packed = "false", tag = "1")]
    pub float_list_value: ::prost::alloc::vec::Vec<f32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EdgeIntegerList {
    #[prost(int64, repeated, packed = "false", tag = "1")]
    pub int_list_value: ::prost::alloc::vec::Vec<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApplicationStatEvent {
    #[prost(message, repeated, tag = "1")]
    pub app: ::prost::alloc::vec::Vec<super::ApplicationPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BaseStationStatEvent {
    #[prost(message, repeated, tag = "1")]
    pub base_station: ::prost::alloc::vec::Vec<BaseStationPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocalMusicStatEvent {
    #[prost(message, repeated, tag = "1")]
    pub music: ::prost::alloc::vec::Vec<super::content::LocalMusicPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RerankStatEvent {
    #[prost(string, optional, tag = "1")]
    pub event: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub url_package: ::core::option::Option<super::event::UrlPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WiFiStatEvent {
    #[prost(message, repeated, tag = "1")]
    pub wi_fi: ::prost::alloc::vec::Vec<WiFiPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LivePlayerBizType {
    Unknown4 = 0,
    Live = 1,
    Yoda = 2,
    Rn = 3,
}
impl LivePlayerBizType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "LivePlayerBizType_UNKNOWN4",
            Self::Live => "LivePlayerBizType_LIVE",
            Self::Yoda => "LivePlayerBizType_YODA",
            Self::Rn => "RN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LivePlayerBizType_UNKNOWN4" => Some(Self::Unknown4),
            "LivePlayerBizType_LIVE" => Some(Self::Live),
            "LivePlayerBizType_YODA" => Some(Self::Yoda),
            "RN" => Some(Self::Rn),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LivePlayerType {
    Unknown = 0,
    Fullscreen = 1,
    FloatingWindow = 2,
    Background = 3,
    EndScreen = 4,
    LivePreview = 5,
}
impl LivePlayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "LivePlayerType_UNKNOWN",
            Self::Fullscreen => "FULLSCREEN",
            Self::FloatingWindow => "FLOATING_WINDOW",
            Self::Background => "LivePlayerType_BACKGROUND",
            Self::EndScreen => "END_SCREEN",
            Self::LivePreview => "LIVE_PREVIEW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LivePlayerType_UNKNOWN" => Some(Self::Unknown),
            "FULLSCREEN" => Some(Self::Fullscreen),
            "FLOATING_WINDOW" => Some(Self::FloatingWindow),
            "LivePlayerType_BACKGROUND" => Some(Self::Background),
            "END_SCREEN" => Some(Self::EndScreen),
            "LIVE_PREVIEW" => Some(Self::LivePreview),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveRoomStatus {
    Unknown7 = 0,
    Playing = 1,
    Finished = 2,
    Error = 3,
}
impl LiveRoomStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown7 => "LiveRoomStatus_UNKNOWN7",
            Self::Playing => "PLAYING",
            Self::Finished => "LiveRoomStatus_FINISHED",
            Self::Error => "LiveRoomStatus_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LiveRoomStatus_UNKNOWN7" => Some(Self::Unknown7),
            "PLAYING" => Some(Self::Playing),
            "LiveRoomStatus_FINISHED" => Some(Self::Finished),
            "LiveRoomStatus_ERROR" => Some(Self::Error),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveStreamType {
    Unknown2 = 0,
    Video = 1,
    Audio = 2,
    StreamTypeVoiceParty = 3,
}
impl LiveStreamType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "LiveStreamType_UNKNOWN2",
            Self::Video => "LiveStreamType_VIDEO",
            Self::Audio => "LiveStreamType_AUDIO",
            Self::StreamTypeVoiceParty => "STREAM_TYPE_VOICE_PARTY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LiveStreamType_UNKNOWN2" => Some(Self::Unknown2),
            "LiveStreamType_VIDEO" => Some(Self::Video),
            "LiveStreamType_AUDIO" => Some(Self::Audio),
            "STREAM_TYPE_VOICE_PARTY" => Some(Self::StreamTypeVoiceParty),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResolutionType {
    Unknown6 = 0,
    Standard = 1,
    High = 2,
    Super = 3,
    Custom = 4,
}
impl ResolutionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown6 => "ResolutionType_UNKNOWN6",
            Self::Standard => "STANDARD",
            Self::High => "HIGH",
            Self::Super => "SUPER",
            Self::Custom => "CUSTOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ResolutionType_UNKNOWN6" => Some(Self::Unknown6),
            "STANDARD" => Some(Self::Standard),
            "HIGH" => Some(Self::High),
            "SUPER" => Some(Self::Super),
            "CUSTOM" => Some(Self::Custom),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ScreenOrientationType {
    Unknown5 = 0,
    Landscape = 1,
    Portrait = 2,
}
impl ScreenOrientationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown5 => "ScreenOrientationType_UNKNOWN5",
            Self::Landscape => "LANDSCAPE",
            Self::Portrait => "PORTRAIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ScreenOrientationType_UNKNOWN5" => Some(Self::Unknown5),
            "LANDSCAPE" => Some(Self::Landscape),
            "PORTRAIT" => Some(Self::Portrait),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PingResult {
    None = 0,
    McuError = 1,
    McuSuccess = 2,
}
impl PingResult {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PingResult_NONE",
            Self::McuError => "MCU_ERROR",
            Self::McuSuccess => "MCU_SUCCESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PingResult_NONE" => Some(Self::None),
            "MCU_ERROR" => Some(Self::McuError),
            "MCU_SUCCESS" => Some(Self::McuSuccess),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PushCdnReason {
    None = 0,
    Normal = 1,
    PingError = 2,
    McuError = 3,
}
impl PushCdnReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "PUSH_CDN_REASON_NONE",
            Self::Normal => "PUSH_CDN_REASON_NORMAL",
            Self::PingError => "PUSH_CDN_REASON_PING_ERROR",
            Self::McuError => "PUSH_CDN_REASON_MCU_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUSH_CDN_REASON_NONE" => Some(Self::None),
            "PUSH_CDN_REASON_NORMAL" => Some(Self::Normal),
            "PUSH_CDN_REASON_PING_ERROR" => Some(Self::PingError),
            "PUSH_CDN_REASON_MCU_ERROR" => Some(Self::McuError),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ServerMode {
    Unknown = 0,
    Cdn = 1,
    Mcu = 2,
}
impl ServerMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "ServerMode_UNKNOWN",
            Self::Cdn => "CDN",
            Self::Mcu => "MCU",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ServerMode_UNKNOWN" => Some(Self::Unknown),
            "CDN" => Some(Self::Cdn),
            "MCU" => Some(Self::Mcu),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LivePlayerReleaseReason {
    Unknown2 = 0,
    UserLeave = 1,
    UserSwitchDefinition = 2,
    LiveEndByAnchor = 3,
    LiveEndByAdmin = 4,
    UserWatchOtherVideo = 5,
    UserWatchOtherLive = 6,
    LiveAuioStopInBackground = 7,
    InterruptedByOtherApp = 8,
    BannedByAnchor = 9,
    BufferEmptyFor10Sec = 10,
    BufferEmptyOver15SecInOneMin = 11,
    PlayerCriticalError = 12,
    PushFallBack = 13,
    Repush = 14,
    ReloadForFreeDataTraffic = 15,
    ReloadForLatencyChanged = 16,
}
impl LivePlayerReleaseReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "LivePlayerReleaseReason_UNKNOWN2",
            Self::UserLeave => "USER_LEAVE",
            Self::UserSwitchDefinition => "USER_SWITCH_DEFINITION",
            Self::LiveEndByAnchor => "LIVE_END_BY_ANCHOR",
            Self::LiveEndByAdmin => "LIVE_END_BY_ADMIN",
            Self::UserWatchOtherVideo => "USER_WATCH_OTHER_VIDEO",
            Self::UserWatchOtherLive => "USER_WATCH_OTHER_LIVE",
            Self::LiveAuioStopInBackground => "LIVE_AUIO_STOP_IN_BACKGROUND",
            Self::InterruptedByOtherApp => "INTERRUPTED_BY_OTHER_APP",
            Self::BannedByAnchor => "BANNED_BY_ANCHOR",
            Self::BufferEmptyFor10Sec => "BUFFER_EMPTY_FOR_10_SEC",
            Self::BufferEmptyOver15SecInOneMin => "BUFFER_EMPTY_OVER_15_SEC_IN_ONE_MIN",
            Self::PlayerCriticalError => "PLAYER_CRITICAL_ERROR",
            Self::PushFallBack => "PUSH_FALL_BACK",
            Self::Repush => "REPUSH",
            Self::ReloadForFreeDataTraffic => "RELOAD_FOR_FREE_DATA_TRAFFIC",
            Self::ReloadForLatencyChanged => "RELOAD_FOR_LATENCY_CHANGED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LivePlayerReleaseReason_UNKNOWN2" => Some(Self::Unknown2),
            "USER_LEAVE" => Some(Self::UserLeave),
            "USER_SWITCH_DEFINITION" => Some(Self::UserSwitchDefinition),
            "LIVE_END_BY_ANCHOR" => Some(Self::LiveEndByAnchor),
            "LIVE_END_BY_ADMIN" => Some(Self::LiveEndByAdmin),
            "USER_WATCH_OTHER_VIDEO" => Some(Self::UserWatchOtherVideo),
            "USER_WATCH_OTHER_LIVE" => Some(Self::UserWatchOtherLive),
            "LIVE_AUIO_STOP_IN_BACKGROUND" => Some(Self::LiveAuioStopInBackground),
            "INTERRUPTED_BY_OTHER_APP" => Some(Self::InterruptedByOtherApp),
            "BANNED_BY_ANCHOR" => Some(Self::BannedByAnchor),
            "BUFFER_EMPTY_FOR_10_SEC" => Some(Self::BufferEmptyFor10Sec),
            "BUFFER_EMPTY_OVER_15_SEC_IN_ONE_MIN" => {
                Some(Self::BufferEmptyOver15SecInOneMin)
            }
            "PLAYER_CRITICAL_ERROR" => Some(Self::PlayerCriticalError),
            "PUSH_FALL_BACK" => Some(Self::PushFallBack),
            "REPUSH" => Some(Self::Repush),
            "RELOAD_FOR_FREE_DATA_TRAFFIC" => Some(Self::ReloadForFreeDataTraffic),
            "RELOAD_FOR_LATENCY_CHANGED" => Some(Self::ReloadForLatencyChanged),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnterAction {
    Unknown5 = 0,
    ClickEnter = 1,
    SlideDownEnter = 2,
    SlideUpEnter = 3,
    ClickReEnter = 4,
    AutoEnter = 5,
}
impl EnterAction {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown5 => "EnterAction_UNKNOWN5",
            Self::ClickEnter => "CLICK_ENTER",
            Self::SlideDownEnter => "SLIDE_DOWN_ENTER",
            Self::SlideUpEnter => "SLIDE_UP_ENTER",
            Self::ClickReEnter => "CLICK_RE_ENTER",
            Self::AutoEnter => "AUTO_ENTER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EnterAction_UNKNOWN5" => Some(Self::Unknown5),
            "CLICK_ENTER" => Some(Self::ClickEnter),
            "SLIDE_DOWN_ENTER" => Some(Self::SlideDownEnter),
            "SLIDE_UP_ENTER" => Some(Self::SlideUpEnter),
            "CLICK_RE_ENTER" => Some(Self::ClickReEnter),
            "AUTO_ENTER" => Some(Self::AutoEnter),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveStatus {
    Unknown1 = 0,
    Processing = 1,
    Finished = 2,
    Error = 3,
}
impl LiveStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "LiveStatus_UNKNOWN1",
            Self::Processing => "PROCESSING",
            Self::Finished => "LiveStatus_FINISHED",
            Self::Error => "LiveStatus_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LiveStatus_UNKNOWN1" => Some(Self::Unknown1),
            "PROCESSING" => Some(Self::Processing),
            "LiveStatus_FINISHED" => Some(Self::Finished),
            "LiveStatus_ERROR" => Some(Self::Error),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ManifestSwitchStatus {
    Unknown2 = 0,
    AlwaysAuto = 1,
    AlwaysManual = 2,
    SwitchBetweenManualAuto = 3,
}
impl ManifestSwitchStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "ManifestSwitchStatus_UNKNOWN2",
            Self::AlwaysAuto => "ALWAYS_AUTO",
            Self::AlwaysManual => "ALWAYS_MANUAL",
            Self::SwitchBetweenManualAuto => "SWITCH_BETWEEN_MANUAL_AUTO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ManifestSwitchStatus_UNKNOWN2" => Some(Self::Unknown2),
            "ALWAYS_AUTO" => Some(Self::AlwaysAuto),
            "ALWAYS_MANUAL" => Some(Self::AlwaysManual),
            "SWITCH_BETWEEN_MANUAL_AUTO" => Some(Self::SwitchBetweenManualAuto),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SourceType {
    Unknown = 0,
    Feed = 1,
    Push = 2,
    LiveSubscription = 3,
    Follow = 4,
    Hot = 5,
    Nearby = 6,
    NearbyRoaming = 7,
    Share = 8,
    LivePk = 9,
    Web = 10,
    SmallProgram = 11,
    FansTop = 12,
    PrivateMessage = 13,
    BroadcastGift = 14,
    BroadcastGiftRedPackage = 15,
    Profile = 16,
    LiveProfileCard = 17,
    LiveClosePage = 18,
    LiveMusicStationCaption = 19,
    ProfileLike = 20,
    FeedDetailUserAvatar = 21,
    MusicStationUserAvatar = 22,
    MusicStationUserProductsPage = 23,
    News = 24,
    LiveFollowChannel = 25,
    GamezoneLiveGameWidget = 26,
    GamezoneVideoGameTag = 27,
    GamezoneNearbyGameEntry = 28,
    GamezoneSearchGameEntry = 29,
    GamezoneSidebarEntry = 30,
    GamezoneLinkExternal = 31,
    GamezoneWeb = 32,
    VoicePartyAggregationRecommend = 33,
    VoicePartyAggregationNearby = 34,
    VoicePartyAggregationKtv = 35,
    VoicePartyAggregationTopic = 36,
    GamezoneTopictagGameSearchRecommend = 37,
    GamezoneTopictagGameSearchKeyword = 38,
    GamezoneTopictagGameDetail = 39,
    LivePushArrowRedpack = 40,
    GamezoneGameSubscribeMessage = 41,
    GamezoneLabByGame = 42,
}
impl SourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "SourceType_UNKNOWN",
            Self::Feed => "FEED",
            Self::Push => "PUSH",
            Self::LiveSubscription => "LIVE_SUBSCRIPTION",
            Self::Follow => "FOLLOW",
            Self::Hot => "HOT",
            Self::Nearby => "SourceType_NEARBY",
            Self::NearbyRoaming => "NEARBY_ROAMING",
            Self::Share => "SHARE",
            Self::LivePk => "LIVE_PK",
            Self::Web => "WEB",
            Self::SmallProgram => "SMALL_PROGRAM",
            Self::FansTop => "FANS_TOP",
            Self::PrivateMessage => "PRIVATE_MESSAGE",
            Self::BroadcastGift => "BROADCAST_GIFT",
            Self::BroadcastGiftRedPackage => "BROADCAST_GIFT_RED_PACKAGE",
            Self::Profile => "PROFILE",
            Self::LiveProfileCard => "LIVE_PROFILE_CARD",
            Self::LiveClosePage => "LIVE_CLOSE_PAGE",
            Self::LiveMusicStationCaption => "LIVE_MUSIC_STATION_CAPTION",
            Self::ProfileLike => "PROFILE_LIKE",
            Self::FeedDetailUserAvatar => "FEED_DETAIL_USER_AVATAR",
            Self::MusicStationUserAvatar => "MUSIC_STATION_USER_AVATAR",
            Self::MusicStationUserProductsPage => "MUSIC_STATION_USER_PRODUCTS_PAGE",
            Self::News => "NEWS",
            Self::LiveFollowChannel => "LIVE_FOLLOW_CHANNEL",
            Self::GamezoneLiveGameWidget => "GAMEZONE_LIVE_GAME_WIDGET",
            Self::GamezoneVideoGameTag => "GAMEZONE_VIDEO_GAME_TAG",
            Self::GamezoneNearbyGameEntry => "GAMEZONE_NEARBY_GAME_ENTRY",
            Self::GamezoneSearchGameEntry => "GAMEZONE_SEARCH_GAME_ENTRY",
            Self::GamezoneSidebarEntry => "GAMEZONE_SIDEBAR_ENTRY",
            Self::GamezoneLinkExternal => "GAMEZONE_LINK_EXTERNAL",
            Self::GamezoneWeb => "GAMEZONE_WEB",
            Self::VoicePartyAggregationRecommend => "VOICE_PARTY_AGGREGATION_RECOMMEND",
            Self::VoicePartyAggregationNearby => "VOICE_PARTY_AGGREGATION_NEARBY",
            Self::VoicePartyAggregationKtv => "VOICE_PARTY_AGGREGATION_KTV",
            Self::VoicePartyAggregationTopic => "VOICE_PARTY_AGGREGATION_TOPIC",
            Self::GamezoneTopictagGameSearchRecommend => {
                "GAMEZONE_TOPICTAG_GAME_SEARCH_RECOMMEND"
            }
            Self::GamezoneTopictagGameSearchKeyword => {
                "GAMEZONE_TOPICTAG_GAME_SEARCH_KEYWORD"
            }
            Self::GamezoneTopictagGameDetail => "GAMEZONE_TOPICTAG_GAME_DETAIL",
            Self::LivePushArrowRedpack => "LIVE_PUSH_ARROW_REDPACK",
            Self::GamezoneGameSubscribeMessage => "GAMEZONE_GAME_SUBSCRIBE_MESSAGE",
            Self::GamezoneLabByGame => "GAMEZONE_LAB_BY_GAME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SourceType_UNKNOWN" => Some(Self::Unknown),
            "FEED" => Some(Self::Feed),
            "PUSH" => Some(Self::Push),
            "LIVE_SUBSCRIPTION" => Some(Self::LiveSubscription),
            "FOLLOW" => Some(Self::Follow),
            "HOT" => Some(Self::Hot),
            "SourceType_NEARBY" => Some(Self::Nearby),
            "NEARBY_ROAMING" => Some(Self::NearbyRoaming),
            "SHARE" => Some(Self::Share),
            "LIVE_PK" => Some(Self::LivePk),
            "WEB" => Some(Self::Web),
            "SMALL_PROGRAM" => Some(Self::SmallProgram),
            "FANS_TOP" => Some(Self::FansTop),
            "PRIVATE_MESSAGE" => Some(Self::PrivateMessage),
            "BROADCAST_GIFT" => Some(Self::BroadcastGift),
            "BROADCAST_GIFT_RED_PACKAGE" => Some(Self::BroadcastGiftRedPackage),
            "PROFILE" => Some(Self::Profile),
            "LIVE_PROFILE_CARD" => Some(Self::LiveProfileCard),
            "LIVE_CLOSE_PAGE" => Some(Self::LiveClosePage),
            "LIVE_MUSIC_STATION_CAPTION" => Some(Self::LiveMusicStationCaption),
            "PROFILE_LIKE" => Some(Self::ProfileLike),
            "FEED_DETAIL_USER_AVATAR" => Some(Self::FeedDetailUserAvatar),
            "MUSIC_STATION_USER_AVATAR" => Some(Self::MusicStationUserAvatar),
            "MUSIC_STATION_USER_PRODUCTS_PAGE" => {
                Some(Self::MusicStationUserProductsPage)
            }
            "NEWS" => Some(Self::News),
            "LIVE_FOLLOW_CHANNEL" => Some(Self::LiveFollowChannel),
            "GAMEZONE_LIVE_GAME_WIDGET" => Some(Self::GamezoneLiveGameWidget),
            "GAMEZONE_VIDEO_GAME_TAG" => Some(Self::GamezoneVideoGameTag),
            "GAMEZONE_NEARBY_GAME_ENTRY" => Some(Self::GamezoneNearbyGameEntry),
            "GAMEZONE_SEARCH_GAME_ENTRY" => Some(Self::GamezoneSearchGameEntry),
            "GAMEZONE_SIDEBAR_ENTRY" => Some(Self::GamezoneSidebarEntry),
            "GAMEZONE_LINK_EXTERNAL" => Some(Self::GamezoneLinkExternal),
            "GAMEZONE_WEB" => Some(Self::GamezoneWeb),
            "VOICE_PARTY_AGGREGATION_RECOMMEND" => {
                Some(Self::VoicePartyAggregationRecommend)
            }
            "VOICE_PARTY_AGGREGATION_NEARBY" => Some(Self::VoicePartyAggregationNearby),
            "VOICE_PARTY_AGGREGATION_KTV" => Some(Self::VoicePartyAggregationKtv),
            "VOICE_PARTY_AGGREGATION_TOPIC" => Some(Self::VoicePartyAggregationTopic),
            "GAMEZONE_TOPICTAG_GAME_SEARCH_RECOMMEND" => {
                Some(Self::GamezoneTopictagGameSearchRecommend)
            }
            "GAMEZONE_TOPICTAG_GAME_SEARCH_KEYWORD" => {
                Some(Self::GamezoneTopictagGameSearchKeyword)
            }
            "GAMEZONE_TOPICTAG_GAME_DETAIL" => Some(Self::GamezoneTopictagGameDetail),
            "LIVE_PUSH_ARROW_REDPACK" => Some(Self::LivePushArrowRedpack),
            "GAMEZONE_GAME_SUBSCRIBE_MESSAGE" => Some(Self::GamezoneGameSubscribeMessage),
            "GAMEZONE_LAB_BY_GAME" => Some(Self::GamezoneLabByGame),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DownloadType {
    Unknown5 = 0,
    Proxy = 1,
    NativeCache = 2,
}
impl DownloadType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown5 => "DownloadType_UNKNOWN5",
            Self::Proxy => "PROXY",
            Self::NativeCache => "NATIVE_CACHE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DownloadType_UNKNOWN5" => Some(Self::Unknown5),
            "PROXY" => Some(Self::Proxy),
            "NATIVE_CACHE" => Some(Self::NativeCache),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ImageType {
    Unknown2 = 0,
    HomeThumbnailPhoto = 1,
    HomeThumbnailLive = 2,
    MagicFaceThumbnail = 3,
    LiveGift = 4,
    LiveMessage = 5,
    UserAvatar = 6,
    UserBg = 7,
    TagShare = 8,
    MusicCover = 9,
    TopicBanner = 10,
    UgcDetailInfo = 11,
}
impl ImageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "ImageType_UNKNOWN2",
            Self::HomeThumbnailPhoto => "HOME_THUMBNAIL_PHOTO",
            Self::HomeThumbnailLive => "HOME_THUMBNAIL_LIVE",
            Self::MagicFaceThumbnail => "MAGIC_FACE_THUMBNAIL",
            Self::LiveGift => "LIVE_GIFT",
            Self::LiveMessage => "LIVE_MESSAGE",
            Self::UserAvatar => "USER_AVATAR",
            Self::UserBg => "USER_BG",
            Self::TagShare => "TAG_SHARE",
            Self::MusicCover => "MUSIC_COVER",
            Self::TopicBanner => "TOPIC_BANNER",
            Self::UgcDetailInfo => "UGC_DETAIL_INFO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ImageType_UNKNOWN2" => Some(Self::Unknown2),
            "HOME_THUMBNAIL_PHOTO" => Some(Self::HomeThumbnailPhoto),
            "HOME_THUMBNAIL_LIVE" => Some(Self::HomeThumbnailLive),
            "MAGIC_FACE_THUMBNAIL" => Some(Self::MagicFaceThumbnail),
            "LIVE_GIFT" => Some(Self::LiveGift),
            "LIVE_MESSAGE" => Some(Self::LiveMessage),
            "USER_AVATAR" => Some(Self::UserAvatar),
            "USER_BG" => Some(Self::UserBg),
            "TAG_SHARE" => Some(Self::TagShare),
            "MUSIC_COVER" => Some(Self::MusicCover),
            "TOPIC_BANNER" => Some(Self::TopicBanner),
            "UGC_DETAIL_INFO" => Some(Self::UgcDetailInfo),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LoadSource {
    Unknown4 = 0,
    Network = 1,
    Cache = 2,
}
impl LoadSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "LoadSource_UNKNOWN4",
            Self::Network => "LoadSource_NETWORK",
            Self::Cache => "CACHE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LoadSource_UNKNOWN4" => Some(Self::Unknown4),
            "LoadSource_NETWORK" => Some(Self::Network),
            "CACHE" => Some(Self::Cache),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LoadStatus {
    Unknown4 = 0,
    Finished = 1,
    Cancelled = 2,
    Failed = 3,
}
impl LoadStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "LoadStatus_UNKNOWN4",
            Self::Finished => "LoadStatus_FINISHED",
            Self::Cancelled => "LoadStatus_CANCELLED",
            Self::Failed => "LoadStatus_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LoadStatus_UNKNOWN4" => Some(Self::Unknown4),
            "LoadStatus_FINISHED" => Some(Self::Finished),
            "LoadStatus_CANCELLED" => Some(Self::Cancelled),
            "LoadStatus_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ResourceType {
    Unknown1 = 0,
    Image = 1,
    Video = 2,
    MagicFace = 3,
    MagicEmojiTrackData = 4,
    Music = 5,
    VideoScene = 6,
    Emoji = 7,
    PrefetchVideo = 8,
    MusicBeatEffect = 9,
    HuaweiHiai = 10,
    HiaiMagicEmojiTrackData = 11,
    Patch = 12,
    OfflineCache = 13,
    MakeUp = 14,
    Theme = 15,
    Filter = 16,
    SinglePhoto = 17,
    LongPhoto = 18,
    AtlasPhoto = 19,
    KtvSongPhoto = 20,
    MomentPhoto = 21,
    VideoDownload = 22,
    LiveKtvMusic = 23,
    KuaishanTemplate = 24,
    LiveBackgroundMusic = 25,
    Flutter = 26,
    Subtitle = 27,
    PrefetchVideoPctr = 28,
    MagicGift = 29,
    Sf2020Warmup = 30,
    AiCutStyle = 31,
    AdLive = 32,
    Effect = 33,
    SlidePrefetchVideo = 34,
    FeaturedPagePrefetchVideo = 35,
    Font = 36,
    RdUnknown = 37,
    Sticker = 38,
    Cover = 39,
    AlphaVideo = 40,
    LiveVideo = 41,
    ThreedLutmodel = 42,
    Warmup = 43,
    PrefetchVideoCorona = 44,
    PrefetchVideoLandscape = 45,
    VideoSceneEffect = 46,
    VideoSceneSticker = 47,
    VideoSceneDraw = 48,
    VideoSceneTheme = 49,
    PlayerModel = 50,
}
impl ResourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "ResourceType_UNKNOWN1",
            Self::Image => "ResourceType_IMAGE",
            Self::Video => "ResourceType_VIDEO",
            Self::MagicFace => "MAGIC_FACE",
            Self::MagicEmojiTrackData => "MAGIC_EMOJI_TRACK_DATA",
            Self::Music => "ResourceType_MUSIC",
            Self::VideoScene => "VIDEO_SCENE",
            Self::Emoji => "EMOJI",
            Self::PrefetchVideo => "PREFETCH_VIDEO",
            Self::MusicBeatEffect => "MUSIC_BEAT_EFFECT",
            Self::HuaweiHiai => "HUAWEI_HIAI",
            Self::HiaiMagicEmojiTrackData => "HIAI_MAGIC_EMOJI_TRACK_DATA",
            Self::Patch => "PATCH",
            Self::OfflineCache => "OFFLINE_CACHE",
            Self::MakeUp => "MAKE_UP",
            Self::Theme => "THEME",
            Self::Filter => "FILTER",
            Self::SinglePhoto => "ResourceType_SINGLE_PHOTO",
            Self::LongPhoto => "ResourceType_LONG_PHOTO",
            Self::AtlasPhoto => "ResourceType_ATLAS_PHOTO",
            Self::KtvSongPhoto => "KTV_SONG_PHOTO",
            Self::MomentPhoto => "MOMENT_PHOTO",
            Self::VideoDownload => "VIDEO_DOWNLOAD",
            Self::LiveKtvMusic => "LIVE_KTV_MUSIC",
            Self::KuaishanTemplate => "KUAISHAN_TEMPLATE",
            Self::LiveBackgroundMusic => "LIVE_BACKGROUND_MUSIC",
            Self::Flutter => "FLUTTER",
            Self::Subtitle => "SUBTITLE",
            Self::PrefetchVideoPctr => "PREFETCH_VIDEO_PCTR",
            Self::MagicGift => "MAGIC_GIFT",
            Self::Sf2020Warmup => "SF2020_WARMUP",
            Self::AiCutStyle => "AI_CUT_STYLE",
            Self::AdLive => "AD_LIVE",
            Self::Effect => "EFFECT",
            Self::SlidePrefetchVideo => "SLIDE_PREFETCH_VIDEO",
            Self::FeaturedPagePrefetchVideo => "FEATURED_PAGE_PREFETCH_VIDEO",
            Self::Font => "FONT",
            Self::RdUnknown => "RD_UNKNOWN",
            Self::Sticker => "STICKER",
            Self::Cover => "COVER",
            Self::AlphaVideo => "ResourceType_ALPHA_VIDEO",
            Self::LiveVideo => "LIVE_VIDEO",
            Self::ThreedLutmodel => "THREED_LUTMODEL",
            Self::Warmup => "WARMUP",
            Self::PrefetchVideoCorona => "PREFETCH_VIDEO_CORONA",
            Self::PrefetchVideoLandscape => "PREFETCH_VIDEO_LANDSCAPE",
            Self::VideoSceneEffect => "VIDEO_SCENE_EFFECT",
            Self::VideoSceneSticker => "VIDEO_SCENE_STICKER",
            Self::VideoSceneDraw => "VIDEO_SCENE_DRAW",
            Self::VideoSceneTheme => "VIDEO_SCENE_THEME",
            Self::PlayerModel => "PLAYER_MODEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ResourceType_UNKNOWN1" => Some(Self::Unknown1),
            "ResourceType_IMAGE" => Some(Self::Image),
            "ResourceType_VIDEO" => Some(Self::Video),
            "MAGIC_FACE" => Some(Self::MagicFace),
            "MAGIC_EMOJI_TRACK_DATA" => Some(Self::MagicEmojiTrackData),
            "ResourceType_MUSIC" => Some(Self::Music),
            "VIDEO_SCENE" => Some(Self::VideoScene),
            "EMOJI" => Some(Self::Emoji),
            "PREFETCH_VIDEO" => Some(Self::PrefetchVideo),
            "MUSIC_BEAT_EFFECT" => Some(Self::MusicBeatEffect),
            "HUAWEI_HIAI" => Some(Self::HuaweiHiai),
            "HIAI_MAGIC_EMOJI_TRACK_DATA" => Some(Self::HiaiMagicEmojiTrackData),
            "PATCH" => Some(Self::Patch),
            "OFFLINE_CACHE" => Some(Self::OfflineCache),
            "MAKE_UP" => Some(Self::MakeUp),
            "THEME" => Some(Self::Theme),
            "FILTER" => Some(Self::Filter),
            "ResourceType_SINGLE_PHOTO" => Some(Self::SinglePhoto),
            "ResourceType_LONG_PHOTO" => Some(Self::LongPhoto),
            "ResourceType_ATLAS_PHOTO" => Some(Self::AtlasPhoto),
            "KTV_SONG_PHOTO" => Some(Self::KtvSongPhoto),
            "MOMENT_PHOTO" => Some(Self::MomentPhoto),
            "VIDEO_DOWNLOAD" => Some(Self::VideoDownload),
            "LIVE_KTV_MUSIC" => Some(Self::LiveKtvMusic),
            "KUAISHAN_TEMPLATE" => Some(Self::KuaishanTemplate),
            "LIVE_BACKGROUND_MUSIC" => Some(Self::LiveBackgroundMusic),
            "FLUTTER" => Some(Self::Flutter),
            "SUBTITLE" => Some(Self::Subtitle),
            "PREFETCH_VIDEO_PCTR" => Some(Self::PrefetchVideoPctr),
            "MAGIC_GIFT" => Some(Self::MagicGift),
            "SF2020_WARMUP" => Some(Self::Sf2020Warmup),
            "AI_CUT_STYLE" => Some(Self::AiCutStyle),
            "AD_LIVE" => Some(Self::AdLive),
            "EFFECT" => Some(Self::Effect),
            "SLIDE_PREFETCH_VIDEO" => Some(Self::SlidePrefetchVideo),
            "FEATURED_PAGE_PREFETCH_VIDEO" => Some(Self::FeaturedPagePrefetchVideo),
            "FONT" => Some(Self::Font),
            "RD_UNKNOWN" => Some(Self::RdUnknown),
            "STICKER" => Some(Self::Sticker),
            "COVER" => Some(Self::Cover),
            "ResourceType_ALPHA_VIDEO" => Some(Self::AlphaVideo),
            "LIVE_VIDEO" => Some(Self::LiveVideo),
            "THREED_LUTMODEL" => Some(Self::ThreedLutmodel),
            "WARMUP" => Some(Self::Warmup),
            "PREFETCH_VIDEO_CORONA" => Some(Self::PrefetchVideoCorona),
            "PREFETCH_VIDEO_LANDSCAPE" => Some(Self::PrefetchVideoLandscape),
            "VIDEO_SCENE_EFFECT" => Some(Self::VideoSceneEffect),
            "VIDEO_SCENE_STICKER" => Some(Self::VideoSceneSticker),
            "VIDEO_SCENE_DRAW" => Some(Self::VideoSceneDraw),
            "VIDEO_SCENE_THEME" => Some(Self::VideoSceneTheme),
            "PLAYER_MODEL" => Some(Self::PlayerModel),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UrlRetryStatus {
    Unknown6 = 0,
    HasRetry = 1,
    NoRetry = 2,
}
impl UrlRetryStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown6 => "UrlRetryStatus_UNKNOWN6",
            Self::HasRetry => "HAS_RETRY",
            Self::NoRetry => "NO_RETRY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UrlRetryStatus_UNKNOWN6" => Some(Self::Unknown6),
            "HAS_RETRY" => Some(Self::HasRetry),
            "NO_RETRY" => Some(Self::NoRetry),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SwitchStatus {
    Unknown2 = 0,
    Disabled = 1,
    Enabled = 2,
}
impl SwitchStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "SwitchStatus_UNKNOWN2",
            Self::Disabled => "SwitchStatus_DISABLED",
            Self::Enabled => "SwitchStatus_ENABLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SwitchStatus_UNKNOWN2" => Some(Self::Unknown2),
            "SwitchStatus_DISABLED" => Some(Self::Disabled),
            "SwitchStatus_ENABLED" => Some(Self::Enabled),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CustomStatEventBiz {
    Other = 0,
    ArchData = 1,
    Produce = 2,
    Live = 3,
    Search = 4,
    FeedArch = 5,
    Ad = 6,
    Eshop = 7,
    GameApp = 8,
    UserGrowth = 9,
    Service = 10,
    FansGroup = 11,
    Music = 12,
    Social = 13,
    Consume = 14,
    Nearby = 15,
    LongVideo = 16,
    Poi = 17,
    Videozt = 18,
    Performance = 19,
    ArchDyn = 20,
    ArchBase = 21,
    EdgeReco = 22,
    Design = 23,
    Security = 24,
    MiniProgram = 25,
    Ytech = 26,
    Plc = 27,
    Corona = 28,
    Yoda = 29,
    Radar = 30,
    EshopWeb = 31,
    Activity = 32,
    Video = 33,
    House = 34,
    PlatformQa = 35,
}
impl CustomStatEventBiz {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Other => "OTHER",
            Self::ArchData => "ARCH_DATA",
            Self::Produce => "PRODUCE",
            Self::Live => "CustomStatEventBiz_LIVE",
            Self::Search => "SEARCH",
            Self::FeedArch => "FEED_ARCH",
            Self::Ad => "CustomStatEventBiz_AD",
            Self::Eshop => "ESHOP",
            Self::GameApp => "GAME_APP",
            Self::UserGrowth => "USER_GROWTH",
            Self::Service => "SERVICE",
            Self::FansGroup => "FANS_GROUP",
            Self::Music => "CustomStatEventBiz_MUSIC",
            Self::Social => "SOCIAL",
            Self::Consume => "CONSUME",
            Self::Nearby => "CustomStatEventBiz_NEARBY",
            Self::LongVideo => "LONG_VIDEO",
            Self::Poi => "POI",
            Self::Videozt => "VIDEOZT",
            Self::Performance => "PERFORMANCE",
            Self::ArchDyn => "ARCH_DYN",
            Self::ArchBase => "ARCH_BASE",
            Self::EdgeReco => "EDGE_RECO",
            Self::Design => "DESIGN",
            Self::Security => "SECURITY",
            Self::MiniProgram => "MINI_PROGRAM",
            Self::Ytech => "YTECH",
            Self::Plc => "PLC",
            Self::Corona => "CORONA",
            Self::Yoda => "CustomStatEventBiz_YODA",
            Self::Radar => "RADAR",
            Self::EshopWeb => "ESHOP_WEB",
            Self::Activity => "ACTIVITY",
            Self::Video => "CustomStatEventBiz_VIDEO",
            Self::House => "HOUSE",
            Self::PlatformQa => "PLATFORM_QA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OTHER" => Some(Self::Other),
            "ARCH_DATA" => Some(Self::ArchData),
            "PRODUCE" => Some(Self::Produce),
            "CustomStatEventBiz_LIVE" => Some(Self::Live),
            "SEARCH" => Some(Self::Search),
            "FEED_ARCH" => Some(Self::FeedArch),
            "CustomStatEventBiz_AD" => Some(Self::Ad),
            "ESHOP" => Some(Self::Eshop),
            "GAME_APP" => Some(Self::GameApp),
            "USER_GROWTH" => Some(Self::UserGrowth),
            "SERVICE" => Some(Self::Service),
            "FANS_GROUP" => Some(Self::FansGroup),
            "CustomStatEventBiz_MUSIC" => Some(Self::Music),
            "SOCIAL" => Some(Self::Social),
            "CONSUME" => Some(Self::Consume),
            "CustomStatEventBiz_NEARBY" => Some(Self::Nearby),
            "LONG_VIDEO" => Some(Self::LongVideo),
            "POI" => Some(Self::Poi),
            "VIDEOZT" => Some(Self::Videozt),
            "PERFORMANCE" => Some(Self::Performance),
            "ARCH_DYN" => Some(Self::ArchDyn),
            "ARCH_BASE" => Some(Self::ArchBase),
            "EDGE_RECO" => Some(Self::EdgeReco),
            "DESIGN" => Some(Self::Design),
            "SECURITY" => Some(Self::Security),
            "MINI_PROGRAM" => Some(Self::MiniProgram),
            "YTECH" => Some(Self::Ytech),
            "PLC" => Some(Self::Plc),
            "CORONA" => Some(Self::Corona),
            "CustomStatEventBiz_YODA" => Some(Self::Yoda),
            "RADAR" => Some(Self::Radar),
            "ESHOP_WEB" => Some(Self::EshopWeb),
            "ACTIVITY" => Some(Self::Activity),
            "CustomStatEventBiz_VIDEO" => Some(Self::Video),
            "HOUSE" => Some(Self::House),
            "PLATFORM_QA" => Some(Self::PlatformQa),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Name {
    Unknown1 = 0,
    LiveAnchorRealNetStat = 1,
    ThirdPartyPaymentStat = 2,
}
impl Name {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Name_UNKNOWN1",
            Self::LiveAnchorRealNetStat => "LIVE_ANCHOR_REAL_NET_STAT",
            Self::ThirdPartyPaymentStat => "THIRD_PARTY_PAYMENT_STAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Name_UNKNOWN1" => Some(Self::Unknown1),
            "LIVE_ANCHOR_REAL_NET_STAT" => Some(Self::LiveAnchorRealNetStat),
            "THIRD_PARTY_PAYMENT_STAT" => Some(Self::ThirdPartyPaymentStat),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AttrType {
    UnknownAttr = 0,
    IntAttr = 1,
    FloatAttr = 2,
    StringAttr = 3,
    IntListAttr = 4,
    FloatListAttr = 5,
    StringListAttr = 6,
    Int2dListAttr = 7,
    Float2dListAttr = 8,
    String2dListAttr = 9,
}
impl AttrType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownAttr => "UNKNOWN_ATTR",
            Self::IntAttr => "INT_ATTR",
            Self::FloatAttr => "FLOAT_ATTR",
            Self::StringAttr => "STRING_ATTR",
            Self::IntListAttr => "INT_LIST_ATTR",
            Self::FloatListAttr => "FLOAT_LIST_ATTR",
            Self::StringListAttr => "STRING_LIST_ATTR",
            Self::Int2dListAttr => "INT_2D_LIST_ATTR",
            Self::Float2dListAttr => "FLOAT_2D_LIST_ATTR",
            Self::String2dListAttr => "STRING_2D_LIST_ATTR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_ATTR" => Some(Self::UnknownAttr),
            "INT_ATTR" => Some(Self::IntAttr),
            "FLOAT_ATTR" => Some(Self::FloatAttr),
            "STRING_ATTR" => Some(Self::StringAttr),
            "INT_LIST_ATTR" => Some(Self::IntListAttr),
            "FLOAT_LIST_ATTR" => Some(Self::FloatListAttr),
            "STRING_LIST_ATTR" => Some(Self::StringListAttr),
            "INT_2D_LIST_ATTR" => Some(Self::Int2dListAttr),
            "FLOAT_2D_LIST_ATTR" => Some(Self::Float2dListAttr),
            "STRING_2D_LIST_ATTR" => Some(Self::String2dListAttr),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ActionType {
    Init = 0,
    Purchase = 1,
    GetInfo = 2,
    CheckToken = 3,
    RefreshToken = 4,
    PurchaseUpdated = 5,
}
impl ActionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Init => "INIT",
            Self::Purchase => "PURCHASE",
            Self::GetInfo => "GET_INFO",
            Self::CheckToken => "CHECK_TOKEN",
            Self::RefreshToken => "REFRESH_TOKEN",
            Self::PurchaseUpdated => "PURCHASE_UPDATED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "INIT" => Some(Self::Init),
            "PURCHASE" => Some(Self::Purchase),
            "GET_INFO" => Some(Self::GetInfo),
            "CHECK_TOKEN" => Some(Self::CheckToken),
            "REFRESH_TOKEN" => Some(Self::RefreshToken),
            "PURCHASE_UPDATED" => Some(Self::PurchaseUpdated),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HeartBeatType {
    Unknown1 = 0,
    Normal = 1,
    PageShowEvent = 2,
    ElementShowEvent = 3,
    ClickEvent = 4,
    TaskEvent = 5,
    StatEvent = 6,
    CustomEvent = 7,
    ShareEvent = 8,
    SearchEvent = 9,
    OdotEvent = 10,
    ExceptionEvent = 11,
    FixAppEvent = 12,
    RealShow = 13,
    LaunchEvent = 14,
    Network = 15,
    Matrix = 16,
    HeartBeatEvent = 17,
    Longinus = 18,
    AcrossDay = 19,
    GePush = 20,
    BgFetch = 21,
    JPush = 22,
    VivoTransparent = 23,
    ContactAuto = 24,
    CdidChange = 25,
    ColdLaunch = 26,
    HotLaunch = 27,
    Aladdin = 28,
}
impl HeartBeatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "HeartBeatType_UNKNOWN1",
            Self::Normal => "HeartBeatType_NORMAL",
            Self::PageShowEvent => "PAGE_SHOW_EVENT",
            Self::ElementShowEvent => "ELEMENT_SHOW_EVENT",
            Self::ClickEvent => "CLICK_EVENT",
            Self::TaskEvent => "TASK_EVENT",
            Self::StatEvent => "STAT_EVENT",
            Self::CustomEvent => "CUSTOM_EVENT",
            Self::ShareEvent => "SHARE_EVENT",
            Self::SearchEvent => "SEARCH_EVENT",
            Self::OdotEvent => "ODOT_EVENT",
            Self::ExceptionEvent => "EXCEPTION_EVENT",
            Self::FixAppEvent => "FIX_APP_EVENT",
            Self::RealShow => "REAL_SHOW",
            Self::LaunchEvent => "LAUNCH_EVENT",
            Self::Network => "HeartBeatType_NETWORK",
            Self::Matrix => "MATRIX",
            Self::HeartBeatEvent => "HEART_BEAT_EVENT",
            Self::Longinus => "LONGINUS",
            Self::AcrossDay => "ACROSS_DAY",
            Self::GePush => "GE_PUSH",
            Self::BgFetch => "BG_FETCH",
            Self::JPush => "J_PUSH",
            Self::VivoTransparent => "VIVO_TRANSPARENT",
            Self::ContactAuto => "CONTACT_AUTO",
            Self::CdidChange => "CDID_CHANGE",
            Self::ColdLaunch => "COLD_LAUNCH",
            Self::HotLaunch => "HOT_LAUNCH",
            Self::Aladdin => "ALADDIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HeartBeatType_UNKNOWN1" => Some(Self::Unknown1),
            "HeartBeatType_NORMAL" => Some(Self::Normal),
            "PAGE_SHOW_EVENT" => Some(Self::PageShowEvent),
            "ELEMENT_SHOW_EVENT" => Some(Self::ElementShowEvent),
            "CLICK_EVENT" => Some(Self::ClickEvent),
            "TASK_EVENT" => Some(Self::TaskEvent),
            "STAT_EVENT" => Some(Self::StatEvent),
            "CUSTOM_EVENT" => Some(Self::CustomEvent),
            "SHARE_EVENT" => Some(Self::ShareEvent),
            "SEARCH_EVENT" => Some(Self::SearchEvent),
            "ODOT_EVENT" => Some(Self::OdotEvent),
            "EXCEPTION_EVENT" => Some(Self::ExceptionEvent),
            "FIX_APP_EVENT" => Some(Self::FixAppEvent),
            "REAL_SHOW" => Some(Self::RealShow),
            "LAUNCH_EVENT" => Some(Self::LaunchEvent),
            "HeartBeatType_NETWORK" => Some(Self::Network),
            "MATRIX" => Some(Self::Matrix),
            "HEART_BEAT_EVENT" => Some(Self::HeartBeatEvent),
            "LONGINUS" => Some(Self::Longinus),
            "ACROSS_DAY" => Some(Self::AcrossDay),
            "GE_PUSH" => Some(Self::GePush),
            "BG_FETCH" => Some(Self::BgFetch),
            "J_PUSH" => Some(Self::JPush),
            "VIVO_TRANSPARENT" => Some(Self::VivoTransparent),
            "CONTACT_AUTO" => Some(Self::ContactAuto),
            "CDID_CHANGE" => Some(Self::CdidChange),
            "COLD_LAUNCH" => Some(Self::ColdLaunch),
            "HOT_LAUNCH" => Some(Self::HotLaunch),
            "ALADDIN" => Some(Self::Aladdin),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Scheme {
    Unknown3 = 0,
    Http = 1,
    Https = 2,
}
impl Scheme {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "Scheme_UNKNOWN3",
            Self::Http => "SCHEME_HTTP",
            Self::Https => "SCHEME_HTTPS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Scheme_UNKNOWN3" => Some(Self::Unknown3),
            "SCHEME_HTTP" => Some(Self::Http),
            "SCHEME_HTTPS" => Some(Self::Https),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Strategy {
    Unknown2 = 0,
    PlatformDependent = 1,
    CrossPlatform = 2,
}
impl Strategy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "Strategy_UNKNOWN2",
            Self::PlatformDependent => "PLATFORM_DEPENDENT",
            Self::CrossPlatform => "CROSS_PLATFORM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Strategy_UNKNOWN2" => Some(Self::Unknown2),
            "PLATFORM_DEPENDENT" => Some(Self::PlatformDependent),
            "CROSS_PLATFORM" => Some(Self::CrossPlatform),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
    Unknown1 = 0,
    LongConnectionGift = 1,
}
impl Type {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Type_UNKNOWN1",
            Self::LongConnectionGift => "LONG_CONNECTION_GIFT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Type_UNKNOWN1" => Some(Self::Unknown1),
            "LONG_CONNECTION_GIFT" => Some(Self::LongConnectionGift),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BusinessType {
    Unknown1 = 0,
    Ad = 1,
}
impl BusinessType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "BusinessType_UNKNOWN1",
            Self::Ad => "BusinessType_AD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BusinessType_UNKNOWN1" => Some(Self::Unknown1),
            "BusinessType_AD" => Some(Self::Ad),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DisplayResult {
    Unknown2 = 0,
    Finished = 1,
    Cancelled = 2,
    Failed = 3,
}
impl DisplayResult {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "DisplayResult_UNKNOWN2",
            Self::Finished => "DisplayResult_FINISHED",
            Self::Cancelled => "DisplayResult_CANCELLED",
            Self::Failed => "DisplayResult_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DisplayResult_UNKNOWN2" => Some(Self::Unknown2),
            "DisplayResult_FINISHED" => Some(Self::Finished),
            "DisplayResult_CANCELLED" => Some(Self::Cancelled),
            "DisplayResult_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatMediaType {
    Unknown3 = 0,
    Audio = 1,
    Video = 2,
}
impl ChatMediaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "ChatMediaType_UNKNOWN3",
            Self::Audio => "ChatMediaType_AUDIO",
            Self::Video => "ChatMediaType_VIDEO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ChatMediaType_UNKNOWN3" => Some(Self::Unknown3),
            "ChatMediaType_AUDIO" => Some(Self::Audio),
            "ChatMediaType_VIDEO" => Some(Self::Video),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EndReason {
    Unknown2 = 0,
    SendingInvitationError = 1,
    InvitationTimeOut = 2,
    GuestRejectInvitation = 3,
    RespondingAnchorInvitationError = 4,
    PreparingConnectionError = 5,
    EstablishingConnectionError = 6,
    ByAnchor = 7,
    ByAnchorException = 8,
    ByGuest = 9,
    ByGuestException = 10,
}
impl EndReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "EndReason_UNKNOWN2",
            Self::SendingInvitationError => "SENDING_INVITATION_ERROR",
            Self::InvitationTimeOut => "INVITATION_TIME_OUT",
            Self::GuestRejectInvitation => "GUEST_REJECT_INVITATION",
            Self::RespondingAnchorInvitationError => "RESPONDING_ANCHOR_INVITATION_ERROR",
            Self::PreparingConnectionError => "PREPARING_CONNECTION_ERROR",
            Self::EstablishingConnectionError => "ESTABLISHING_CONNECTION_ERROR",
            Self::ByAnchor => "BY_ANCHOR",
            Self::ByAnchorException => "BY_ANCHOR_EXCEPTION",
            Self::ByGuest => "BY_GUEST",
            Self::ByGuestException => "BY_GUEST_EXCEPTION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EndReason_UNKNOWN2" => Some(Self::Unknown2),
            "SENDING_INVITATION_ERROR" => Some(Self::SendingInvitationError),
            "INVITATION_TIME_OUT" => Some(Self::InvitationTimeOut),
            "GUEST_REJECT_INVITATION" => Some(Self::GuestRejectInvitation),
            "RESPONDING_ANCHOR_INVITATION_ERROR" => {
                Some(Self::RespondingAnchorInvitationError)
            }
            "PREPARING_CONNECTION_ERROR" => Some(Self::PreparingConnectionError),
            "ESTABLISHING_CONNECTION_ERROR" => Some(Self::EstablishingConnectionError),
            "BY_ANCHOR" => Some(Self::ByAnchor),
            "BY_ANCHOR_EXCEPTION" => Some(Self::ByAnchorException),
            "BY_GUEST" => Some(Self::ByGuest),
            "BY_GUEST_EXCEPTION" => Some(Self::ByGuestException),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Role {
    Unknown1 = 0,
    Anchor = 1,
    Guest = 2,
}
impl Role {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Role_UNKNOWN1",
            Self::Anchor => "ANCHOR",
            Self::Guest => "GUEST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Role_UNKNOWN1" => Some(Self::Unknown1),
            "ANCHOR" => Some(Self::Anchor),
            "GUEST" => Some(Self::Guest),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CloseReason {
    Unknown2 = 0,
    Terminate = 1,
}
impl CloseReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "CloseReason_UNKNOWN2",
            Self::Terminate => "TERMINATE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CloseReason_UNKNOWN2" => Some(Self::Unknown2),
            "TERMINATE" => Some(Self::Terminate),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LivePlayerStatus {
    Unknown1 = 0,
    OnScreen = 1,
    Hidden = 2,
    Background = 3,
}
impl LivePlayerStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "LivePlayerStatus_UNKNOWN1",
            Self::OnScreen => "ON_SCREEN",
            Self::Hidden => "HIDDEN",
            Self::Background => "LivePlayerStatus_BACKGROUND",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LivePlayerStatus_UNKNOWN1" => Some(Self::Unknown1),
            "ON_SCREEN" => Some(Self::OnScreen),
            "HIDDEN" => Some(Self::Hidden),
            "LivePlayerStatus_BACKGROUND" => Some(Self::Background),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SwitchFloatWindowReason {
    Unknown5 = 0,
    LiveSetting = 1,
    MoreFloatButton = 2,
    LiveEnterBackground = 3,
    EnterLiveMoreSquare = 4,
}
impl SwitchFloatWindowReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown5 => "SwitchFloatWindowReason_UNKNOWN5",
            Self::LiveSetting => "LIVE_SETTING",
            Self::MoreFloatButton => "MORE_FLOAT_BUTTON",
            Self::LiveEnterBackground => "LIVE_ENTER_BACKGROUND",
            Self::EnterLiveMoreSquare => "ENTER_LIVE_MORE_SQUARE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SwitchFloatWindowReason_UNKNOWN5" => Some(Self::Unknown5),
            "LIVE_SETTING" => Some(Self::LiveSetting),
            "MORE_FLOAT_BUTTON" => Some(Self::MoreFloatButton),
            "LIVE_ENTER_BACKGROUND" => Some(Self::LiveEnterBackground),
            "ENTER_LIVE_MORE_SQUARE" => Some(Self::EnterLiveMoreSquare),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UploadReason {
    Unknown3 = 0,
    RightPull = 1,
    ClickCloseButton = 2,
    EnterBackground = 3,
    EnterForeground = 4,
    ClickPhysicalBackButton = 5,
    LiveEnd = 6,
    LiveHide = 7,
    LiveShow = 8,
    Logout = 9,
    BackToSameLive = 10,
    NoFloatWindowPermission = 11,
    SlideClose = 12,
    EnterOtherLive = 13,
    EnterShoot = 14,
    SlideAway = 15,
    EnterImcompatiblePhotoDetail = 16,
    LiveKilled = 17,
    LiveTypeChanged = 18,
    EnterLiveWatch = 19,
    FeedSlideAway = 20,
    FeedMask = 21,
    PaidShowSwitchStatus = 22,
    ClickNegativeDialogItem = 23,
    LiveToWindow = 24,
    HeartbeatReport = 25,
    EnterToLiveMoreSquare = 26,
    LockScreen = 27,
    UnlockScreen = 28,
    PreviewLiveClick2NormalLive = 29,
    AutoSlide = 30,
}
impl UploadReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "UploadReason_UNKNOWN3",
            Self::RightPull => "RIGHT_PULL",
            Self::ClickCloseButton => "CLICK_CLOSE_BUTTON",
            Self::EnterBackground => "ENTER_BACKGROUND",
            Self::EnterForeground => "ENTER_FOREGROUND",
            Self::ClickPhysicalBackButton => "CLICK_PHYSICAL_BACK_BUTTON",
            Self::LiveEnd => "LIVE_END",
            Self::LiveHide => "LIVE_HIDE",
            Self::LiveShow => "LIVE_SHOW",
            Self::Logout => "LOGOUT",
            Self::BackToSameLive => "BACK_TO_SAME_LIVE",
            Self::NoFloatWindowPermission => "NO_FLOAT_WINDOW_PERMISSION",
            Self::SlideClose => "SLIDE_CLOSE",
            Self::EnterOtherLive => "ENTER_OTHER_LIVE",
            Self::EnterShoot => "ENTER_SHOOT",
            Self::SlideAway => "SLIDE_AWAY",
            Self::EnterImcompatiblePhotoDetail => "ENTER_IMCOMPATIBLE_PHOTO_DETAIL",
            Self::LiveKilled => "LIVE_KILLED",
            Self::LiveTypeChanged => "LIVE_TYPE_CHANGED",
            Self::EnterLiveWatch => "ENTER_LIVE_WATCH",
            Self::FeedSlideAway => "FEED_SLIDE_AWAY",
            Self::FeedMask => "FEED_MASK",
            Self::PaidShowSwitchStatus => "PAID_SHOW_SWITCH_STATUS",
            Self::ClickNegativeDialogItem => "CLICK_NEGATIVE_DIALOG_ITEM",
            Self::LiveToWindow => "LIVE_TO_WINDOW",
            Self::HeartbeatReport => "HEARTBEAT_REPORT",
            Self::EnterToLiveMoreSquare => "ENTER_TO_LIVE_MORE_SQUARE",
            Self::LockScreen => "LOCK_SCREEN",
            Self::UnlockScreen => "UNLOCK_SCREEN",
            Self::PreviewLiveClick2NormalLive => "PREVIEW_LIVE_CLICK2_NORMAL_LIVE",
            Self::AutoSlide => "AUTO_SLIDE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UploadReason_UNKNOWN3" => Some(Self::Unknown3),
            "RIGHT_PULL" => Some(Self::RightPull),
            "CLICK_CLOSE_BUTTON" => Some(Self::ClickCloseButton),
            "ENTER_BACKGROUND" => Some(Self::EnterBackground),
            "ENTER_FOREGROUND" => Some(Self::EnterForeground),
            "CLICK_PHYSICAL_BACK_BUTTON" => Some(Self::ClickPhysicalBackButton),
            "LIVE_END" => Some(Self::LiveEnd),
            "LIVE_HIDE" => Some(Self::LiveHide),
            "LIVE_SHOW" => Some(Self::LiveShow),
            "LOGOUT" => Some(Self::Logout),
            "BACK_TO_SAME_LIVE" => Some(Self::BackToSameLive),
            "NO_FLOAT_WINDOW_PERMISSION" => Some(Self::NoFloatWindowPermission),
            "SLIDE_CLOSE" => Some(Self::SlideClose),
            "ENTER_OTHER_LIVE" => Some(Self::EnterOtherLive),
            "ENTER_SHOOT" => Some(Self::EnterShoot),
            "SLIDE_AWAY" => Some(Self::SlideAway),
            "ENTER_IMCOMPATIBLE_PHOTO_DETAIL" => Some(Self::EnterImcompatiblePhotoDetail),
            "LIVE_KILLED" => Some(Self::LiveKilled),
            "LIVE_TYPE_CHANGED" => Some(Self::LiveTypeChanged),
            "ENTER_LIVE_WATCH" => Some(Self::EnterLiveWatch),
            "FEED_SLIDE_AWAY" => Some(Self::FeedSlideAway),
            "FEED_MASK" => Some(Self::FeedMask),
            "PAID_SHOW_SWITCH_STATUS" => Some(Self::PaidShowSwitchStatus),
            "CLICK_NEGATIVE_DIALOG_ITEM" => Some(Self::ClickNegativeDialogItem),
            "LIVE_TO_WINDOW" => Some(Self::LiveToWindow),
            "HEARTBEAT_REPORT" => Some(Self::HeartbeatReport),
            "ENTER_TO_LIVE_MORE_SQUARE" => Some(Self::EnterToLiveMoreSquare),
            "LOCK_SCREEN" => Some(Self::LockScreen),
            "UNLOCK_SCREEN" => Some(Self::UnlockScreen),
            "PREVIEW_LIVE_CLICK2_NORMAL_LIVE" => Some(Self::PreviewLiveClick2NormalLive),
            "AUTO_SLIDE" => Some(Self::AutoSlide),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ViewStatus {
    Unknown4 = 0,
    PaidShowFree = 1,
    PaidShowMask = 2,
    PaidShowPaid = 3,
    WhiteList = 4,
}
impl ViewStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "ViewStatus_UNKNOWN4",
            Self::PaidShowFree => "PAID_SHOW_FREE",
            Self::PaidShowMask => "PAID_SHOW_MASK",
            Self::PaidShowPaid => "PAID_SHOW_PAID",
            Self::WhiteList => "WHITE_LIST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ViewStatus_UNKNOWN4" => Some(Self::Unknown4),
            "PAID_SHOW_FREE" => Some(Self::PaidShowFree),
            "PAID_SHOW_MASK" => Some(Self::PaidShowMask),
            "PAID_SHOW_PAID" => Some(Self::PaidShowPaid),
            "WHITE_LIST" => Some(Self::WhiteList),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AlertStyle {
    Unknown3 = 0,
    None = 1,
    Banner = 2,
    Alert = 3,
}
impl AlertStyle {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "AlertStyle_UNKNOWN3",
            Self::None => "AlertStyle_NONE",
            Self::Banner => "BANNER",
            Self::Alert => "ALERT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AlertStyle_UNKNOWN3" => Some(Self::Unknown3),
            "AlertStyle_NONE" => Some(Self::None),
            "BANNER" => Some(Self::Banner),
            "ALERT" => Some(Self::Alert),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthorizationStatus {
    Unknown1 = 0,
    NotDetermined = 1,
    Denied = 2,
    Authorized = 3,
    Provisional = 4,
}
impl AuthorizationStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "AuthorizationStatus_UNKNOWN1",
            Self::NotDetermined => "AuthorizationStatus_NOT_DETERMINED",
            Self::Denied => "AuthorizationStatus_DENIED",
            Self::Authorized => "AuthorizationStatus_AUTHORIZED",
            Self::Provisional => "PROVISIONAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AuthorizationStatus_UNKNOWN1" => Some(Self::Unknown1),
            "AuthorizationStatus_NOT_DETERMINED" => Some(Self::NotDetermined),
            "AuthorizationStatus_DENIED" => Some(Self::Denied),
            "AuthorizationStatus_AUTHORIZED" => Some(Self::Authorized),
            "PROVISIONAL" => Some(Self::Provisional),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NotificationSetting {
    Unknown2 = 0,
    NotSupported = 1,
    Disabled = 2,
    Enabled = 3,
}
impl NotificationSetting {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "NotificationSetting_UNKNOWN2",
            Self::NotSupported => "NOT_SUPPORTED",
            Self::Disabled => "NotificationSetting_DISABLED",
            Self::Enabled => "NotificationSetting_ENABLED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NotificationSetting_UNKNOWN2" => Some(Self::Unknown2),
            "NOT_SUPPORTED" => Some(Self::NotSupported),
            "NotificationSetting_DISABLED" => Some(Self::Disabled),
            "NotificationSetting_ENABLED" => Some(Self::Enabled),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EventType {
    Unknown = 0,
    MainThreadBlock = 1,
    ActivityLaunch = 2,
    FrameRate = 3,
    Custome = 4,
    SwitchStatus = 5,
}
impl EventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "EventType_UNKNOWN",
            Self::MainThreadBlock => "MAIN_THREAD_BLOCK",
            Self::ActivityLaunch => "ACTIVITY_LAUNCH",
            Self::FrameRate => "FRAME_RATE",
            Self::Custome => "CUSTOME",
            Self::SwitchStatus => "SWITCH_STATUS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EventType_UNKNOWN" => Some(Self::Unknown),
            "MAIN_THREAD_BLOCK" => Some(Self::MainThreadBlock),
            "ACTIVITY_LAUNCH" => Some(Self::ActivityLaunch),
            "FRAME_RATE" => Some(Self::FrameRate),
            "CUSTOME" => Some(Self::Custome),
            "SWITCH_STATUS" => Some(Self::SwitchStatus),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FileType {
    Unknown1 = 0,
    Image = 1,
    Video = 2,
}
impl FileType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "FileType_UNKNOWN1",
            Self::Image => "FileType_IMAGE",
            Self::Video => "FileType_VIDEO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FileType_UNKNOWN1" => Some(Self::Unknown1),
            "FileType_IMAGE" => Some(Self::Image),
            "FileType_VIDEO" => Some(Self::Video),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    Unknown1 = 0,
    NotDetermined = 1,
    Denied = 2,
    Authorized = 3,
    Limited = 4,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Status_UNKNOWN1",
            Self::NotDetermined => "Status_NOT_DETERMINED",
            Self::Denied => "Status_DENIED",
            Self::Authorized => "Status_AUTHORIZED",
            Self::Limited => "LIMITED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Status_UNKNOWN1" => Some(Self::Unknown1),
            "Status_NOT_DETERMINED" => Some(Self::NotDetermined),
            "Status_DENIED" => Some(Self::Denied),
            "Status_AUTHORIZED" => Some(Self::Authorized),
            "LIMITED" => Some(Self::Limited),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FailReason {
    Unknown3 = 0,
    ApiFail = 1,
    DownloadFail = 2,
    EncodeFail = 3,
    StoreFail = 4,
}
impl FailReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "FailReason_UNKNOWN3",
            Self::ApiFail => "API_FAIL",
            Self::DownloadFail => "DOWNLOAD_FAIL",
            Self::EncodeFail => "ENCODE_FAIL",
            Self::StoreFail => "STORE_FAIL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FailReason_UNKNOWN3" => Some(Self::Unknown3),
            "API_FAIL" => Some(Self::ApiFail),
            "DOWNLOAD_FAIL" => Some(Self::DownloadFail),
            "ENCODE_FAIL" => Some(Self::EncodeFail),
            "STORE_FAIL" => Some(Self::StoreFail),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PhotoType {
    Unknown1 = 0,
    Video = 1,
    SinglePhoto = 2,
    LongPhoto = 3,
    AtlasPhoto = 4,
}
impl PhotoType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "PhotoType_UNKNOWN1",
            Self::Video => "PhotoType_VIDEO",
            Self::SinglePhoto => "PhotoType_SINGLE_PHOTO",
            Self::LongPhoto => "PhotoType_LONG_PHOTO",
            Self::AtlasPhoto => "PhotoType_ATLAS_PHOTO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PhotoType_UNKNOWN1" => Some(Self::Unknown1),
            "PhotoType_VIDEO" => Some(Self::Video),
            "PhotoType_SINGLE_PHOTO" => Some(Self::SinglePhoto),
            "PhotoType_LONG_PHOTO" => Some(Self::LongPhoto),
            "PhotoType_ATLAS_PHOTO" => Some(Self::AtlasPhoto),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeaveAction {
    Unknown2 = 0,
    SwipeToRight = 1,
    SwipeToLeft = 2,
    DropDown = 3,
    Back = 4,
    SwipeFromLeftEdge = 5,
    SystemHome = 6,
    SlideDown = 7,
    SlideUp = 8,
    SystemBack = 9,
    FeedSlideUp = 10,
    FeedSlideDown = 11,
    FeedRefresh = 13,
    FeedBack = 14,
    FeedHome = 15,
    FeedUnknown = 16,
    AutoLeave = 17,
    ClickOtherVideo = 18,
    EnterOtherPage = 19,
}
impl LeaveAction {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "LeaveAction_UNKNOWN2",
            Self::SwipeToRight => "SWIPE_TO_RIGHT",
            Self::SwipeToLeft => "SWIPE_TO_LEFT",
            Self::DropDown => "DROP_DOWN",
            Self::Back => "BACK",
            Self::SwipeFromLeftEdge => "SWIPE_FROM_LEFT_EDGE",
            Self::SystemHome => "SYSTEM_HOME",
            Self::SlideDown => "SLIDE_DOWN",
            Self::SlideUp => "SLIDE_UP",
            Self::SystemBack => "SYSTEM_BACK",
            Self::FeedSlideUp => "FEED_SLIDE_UP",
            Self::FeedSlideDown => "FEED_SLIDE_DOWN",
            Self::FeedRefresh => "FEED_REFRESH",
            Self::FeedBack => "FEED_BACK",
            Self::FeedHome => "FEED_HOME",
            Self::FeedUnknown => "FEED_UNKNOWN",
            Self::AutoLeave => "AUTO_LEAVE",
            Self::ClickOtherVideo => "CLICK_OTHER_VIDEO",
            Self::EnterOtherPage => "ENTER_OTHER_PAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LeaveAction_UNKNOWN2" => Some(Self::Unknown2),
            "SWIPE_TO_RIGHT" => Some(Self::SwipeToRight),
            "SWIPE_TO_LEFT" => Some(Self::SwipeToLeft),
            "DROP_DOWN" => Some(Self::DropDown),
            "BACK" => Some(Self::Back),
            "SWIPE_FROM_LEFT_EDGE" => Some(Self::SwipeFromLeftEdge),
            "SYSTEM_HOME" => Some(Self::SystemHome),
            "SLIDE_DOWN" => Some(Self::SlideDown),
            "SLIDE_UP" => Some(Self::SlideUp),
            "SYSTEM_BACK" => Some(Self::SystemBack),
            "FEED_SLIDE_UP" => Some(Self::FeedSlideUp),
            "FEED_SLIDE_DOWN" => Some(Self::FeedSlideDown),
            "FEED_REFRESH" => Some(Self::FeedRefresh),
            "FEED_BACK" => Some(Self::FeedBack),
            "FEED_HOME" => Some(Self::FeedHome),
            "FEED_UNKNOWN" => Some(Self::FeedUnknown),
            "AUTO_LEAVE" => Some(Self::AutoLeave),
            "CLICK_OTHER_VIDEO" => Some(Self::ClickOtherVideo),
            "ENTER_OTHER_PAGE" => Some(Self::EnterOtherPage),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MediaType {
    Unknown4 = 0,
    Video = 1,
    Image = 2,
    ImageAtlasHorizontal = 3,
    ImageAtlasVertical = 4,
    RedPackVideo = 5,
    RedPackDegradeMagic = 6,
    MvVideo = 7,
    Article = 8,
    SplashVideo = 9,
    AlphaVideo = 10,
    Mood = 11,
    Music = 12,
}
impl MediaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "MediaType_UNKNOWN4",
            Self::Video => "MediaType_VIDEO",
            Self::Image => "MediaType_IMAGE",
            Self::ImageAtlasHorizontal => "IMAGE_ATLAS_HORIZONTAL",
            Self::ImageAtlasVertical => "IMAGE_ATLAS_VERTICAL",
            Self::RedPackVideo => "RED_PACK_VIDEO",
            Self::RedPackDegradeMagic => "RED_PACK_DEGRADE_MAGIC",
            Self::MvVideo => "MV_VIDEO",
            Self::Article => "ARTICLE",
            Self::SplashVideo => "SPLASH_VIDEO",
            Self::AlphaVideo => "MediaType_ALPHA_VIDEO",
            Self::Mood => "MOOD",
            Self::Music => "MediaType_MUSIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MediaType_UNKNOWN4" => Some(Self::Unknown4),
            "MediaType_VIDEO" => Some(Self::Video),
            "MediaType_IMAGE" => Some(Self::Image),
            "IMAGE_ATLAS_HORIZONTAL" => Some(Self::ImageAtlasHorizontal),
            "IMAGE_ATLAS_VERTICAL" => Some(Self::ImageAtlasVertical),
            "RED_PACK_VIDEO" => Some(Self::RedPackVideo),
            "RED_PACK_DEGRADE_MAGIC" => Some(Self::RedPackDegradeMagic),
            "MV_VIDEO" => Some(Self::MvVideo),
            "ARTICLE" => Some(Self::Article),
            "SPLASH_VIDEO" => Some(Self::SplashVideo),
            "MediaType_ALPHA_VIDEO" => Some(Self::AlphaVideo),
            "MOOD" => Some(Self::Mood),
            "MediaType_MUSIC" => Some(Self::Music),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum StoryRelationType {
    Unknown = 0,
    Friends = 1,
    Followed = 2,
    Following = 3,
    Pymk = 4,
    Mystory = 5,
    Stranger = 6,
}
impl StoryRelationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "StoryRelationType_UNKNOWN",
            Self::Friends => "FRIENDS",
            Self::Followed => "FOLLOWED",
            Self::Following => "FOLLOWING",
            Self::Pymk => "PYMK",
            Self::Mystory => "MYSTORY",
            Self::Stranger => "STRANGER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "StoryRelationType_UNKNOWN" => Some(Self::Unknown),
            "FRIENDS" => Some(Self::Friends),
            "FOLLOWED" => Some(Self::Followed),
            "FOLLOWING" => Some(Self::Following),
            "PYMK" => Some(Self::Pymk),
            "MYSTORY" => Some(Self::Mystory),
            "STRANGER" => Some(Self::Stranger),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SystraceType {
    ViewTrace = 0,
    ResourceTrace = 1,
}
impl SystraceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ViewTrace => "VIEW_TRACE",
            Self::ResourceTrace => "RESOURCE_TRACE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIEW_TRACE" => Some(Self::ViewTrace),
            "RESOURCE_TRACE" => Some(Self::ResourceTrace),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AtlasParams {
    AtlasTotalCnt = 0,
    AtlasViewDistinctCnt = 1,
    AtlasViewCnt = 2,
}
impl AtlasParams {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AtlasTotalCnt => "ATLAS_TOTAL_CNT",
            Self::AtlasViewDistinctCnt => "ATLAS_VIEW_DISTINCT_CNT",
            Self::AtlasViewCnt => "ATLAS_VIEW_CNT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ATLAS_TOTAL_CNT" => Some(Self::AtlasTotalCnt),
            "ATLAS_VIEW_DISTINCT_CNT" => Some(Self::AtlasViewDistinctCnt),
            "ATLAS_VIEW_CNT" => Some(Self::AtlasViewCnt),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CollectStatus {
    Unknown11 = 0,
    Collect = 1,
    Uncollect = 2,
}
impl CollectStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown11 => "UNKNOWN11",
            Self::Collect => "COLLECT",
            Self::Uncollect => "UNCOLLECT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN11" => Some(Self::Unknown11),
            "COLLECT" => Some(Self::Collect),
            "UNCOLLECT" => Some(Self::Uncollect),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CollectType {
    Unknown10 = 0,
    Cancel = 1,
}
impl CollectType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown10 => "UNKNOWN10",
            Self::Cancel => "CANCEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN10" => Some(Self::Unknown10),
            "CANCEL" => Some(Self::Cancel),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FastPlayType {
    Unknown9 = 0,
    Forward = 1,
    Backward = 2,
    Normal = 3,
}
impl FastPlayType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown9 => "UNKNOWN9",
            Self::Forward => "FORWARD",
            Self::Backward => "BACKWARD",
            Self::Normal => "FastPlayType_NORMAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN9" => Some(Self::Unknown9),
            "FORWARD" => Some(Self::Forward),
            "BACKWARD" => Some(Self::Backward),
            "FastPlayType_NORMAL" => Some(Self::Normal),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum IpSource {
    Unknown3 = 0,
    Local = 1,
    HttpDns = 2,
    Auto = 3,
}
impl IpSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "IpSource_UNKNOWN3",
            Self::Local => "LOCAL",
            Self::HttpDns => "HTTP_DNS",
            Self::Auto => "AUTO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IpSource_UNKNOWN3" => Some(Self::Unknown3),
            "LOCAL" => Some(Self::Local),
            "HTTP_DNS" => Some(Self::HttpDns),
            "AUTO" => Some(Self::Auto),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeavePlayStatus {
    Unknown7 = 0,
    Wait = 1,
    Play = 2,
    Pause = 3,
}
impl LeavePlayStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown7 => "LeavePlayStatus_UNKNOWN7",
            Self::Wait => "WAIT",
            Self::Play => "PLAY",
            Self::Pause => "PAUSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LeavePlayStatus_UNKNOWN7" => Some(Self::Unknown7),
            "WAIT" => Some(Self::Wait),
            "PLAY" => Some(Self::Play),
            "PAUSE" => Some(Self::Pause),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayPosture {
    Unknown8 = 0,
    Sitting = 1,
    Lying = 2,
    Riding = 3,
    Walking = 4,
}
impl PlayPosture {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown8 => "UNKNOWN8",
            Self::Sitting => "SITTING",
            Self::Lying => "LYING",
            Self::Riding => "RIDING",
            Self::Walking => "WALKING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN8" => Some(Self::Unknown8),
            "SITTING" => Some(Self::Sitting),
            "LYING" => Some(Self::Lying),
            "RIDING" => Some(Self::Riding),
            "WALKING" => Some(Self::Walking),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SubType {
    Unknown6 = 0,
    LongArticle = 1,
}
impl SubType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown6 => "SubType_UNKNOWN6",
            Self::LongArticle => "LONG_ARTICLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SubType_UNKNOWN6" => Some(Self::Unknown6),
            "LONG_ARTICLE" => Some(Self::LongArticle),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VideoType {
    Unknown1 = 0,
    H264 = 1,
    H265 = 2,
}
impl VideoType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "VideoType_UNKNOWN1",
            Self::H264 => "VIDEO_TYPE_H264",
            Self::H265 => "VIDEO_TYPE_H265",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VideoType_UNKNOWN1" => Some(Self::Unknown1),
            "VIDEO_TYPE_H264" => Some(Self::H264),
            "VIDEO_TYPE_H265" => Some(Self::H265),
            _ => None,
        }
    }
}
