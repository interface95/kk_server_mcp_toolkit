// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ApplicationPackage {
    #[prost(string, optional, tag = "1")]
    pub package_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub version_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub version_code: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "5")]
    pub system: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub running: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "7")]
    pub first_installation_timestamp: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DevicePackage {
    #[prost(string, optional, tag = "1")]
    pub os_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub model: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub f41099ua: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Experiment {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct IdentityPackage {
    #[prost(string, optional, tag = "1")]
    pub device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub user_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub iu_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub s_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub user_flag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub global_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub random_device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub device_id_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub old_device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub p_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "11")]
    pub is_login_user: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "12")]
    pub cloud_device_id_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub ab_mapping_device_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "14")]
    pub ab_mapping_user_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "15")]
    pub ab_mapping_ids: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocationPackage {
    #[prost(string, optional, tag = "1")]
    pub unnormalized: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub country: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub province: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub city: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub county: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub street: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "7")]
    pub latitude: ::core::option::Option<f64>,
    #[prost(double, optional, tag = "8")]
    pub longitude: ::core::option::Option<f64>,
    #[prost(int32, optional, tag = "9")]
    pub vague: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LteMobileCellInfo {
    #[prost(int32, optional, tag = "1")]
    pub f41100cid: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub rssi: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub mcc: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub f41102mnc: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub lac: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub imei: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub imsi: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub rsrq: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub rsrp: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub f41101cqi: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "11")]
    pub rssnr: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "12")]
    pub cell_id: ::core::option::Option<i64>,
    #[prost(int32, optional, tag = "13")]
    pub arfcn: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub band: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub dbm: ::core::option::Option<i32>,
    #[prost(int64, optional, tag = "16")]
    pub timestamp_diff: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct NetworkPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub isp: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub f41103ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub dns_servers: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub lte_cell_info: ::core::option::Option<LteMobileCellInfo>,
    #[prost(bytes = "vec", repeated, tag = "6")]
    pub ipv6: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PerformanceMonitoringStatus {
    #[prost(bool, optional, tag = "1")]
    pub activity_launch_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub block_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "3")]
    pub thread_count_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub fd_count_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "5")]
    pub jvm_heap_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub native_heap_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub battery_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub network_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub shared_preferences_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "10")]
    pub frame_rate_monitoring_enabled: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "11")]
    pub process: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "12")]
    pub io_monitoring_enabled: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TimePackage {
    #[prost(int32, optional, tag = "1")]
    pub sync_status: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub client_time_diff: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub time_zone: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "4")]
    pub client_time_difference: ::core::option::Option<i64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeaveAction {
    Unknown3 = 0,
    SwipeToRight = 1,
    SwipeToLeft = 2,
    DropDown = 3,
    Back = 4,
    SwipeFromLeftEdge = 5,
    Home = 6,
    SlideDown = 7,
    SlideUp = 8,
    SystemBack = 9,
}
impl LeaveAction {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "UNKNOWN3",
            Self::SwipeToRight => "SWIPE_TO_RIGHT",
            Self::SwipeToLeft => "SWIPE_TO_LEFT",
            Self::DropDown => "DROP_DOWN",
            Self::Back => "BACK",
            Self::SwipeFromLeftEdge => "SWIPE_FROM_LEFT_EDGE",
            Self::Home => "HOME",
            Self::SlideDown => "SLIDE_DOWN",
            Self::SlideUp => "SLIDE_UP",
            Self::SystemBack => "SYSTEM_BACK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN3" => Some(Self::Unknown3),
            "SWIPE_TO_RIGHT" => Some(Self::SwipeToRight),
            "SWIPE_TO_LEFT" => Some(Self::SwipeToLeft),
            "DROP_DOWN" => Some(Self::DropDown),
            "BACK" => Some(Self::Back),
            "SWIPE_FROM_LEFT_EDGE" => Some(Self::SwipeFromLeftEdge),
            "HOME" => Some(Self::Home),
            "SLIDE_DOWN" => Some(Self::SlideDown),
            "SLIDE_UP" => Some(Self::SlideUp),
            "SYSTEM_BACK" => Some(Self::SystemBack),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ThirdPartyPlatform {
    Unknown1 = 0,
    Email = 1,
    Phone = 2,
    WechatTimeline = 3,
    QqZone = 4,
    Wechat = 5,
    Qq = 6,
    SinaWeibo = 7,
    Facebook = 8,
    Twitter = 9,
    WhatsApp = 10,
    Messenger = 11,
    Youtube = 12,
    Pinterest = 13,
    Kakaotalk = 14,
    Kik = 15,
    Instagram = 16,
    Vk = 17,
    Viber = 18,
    Line = 19,
    Bbm = 20,
    Google = 21,
    Naver = 22,
    CopyLink = 23,
    ImFriend = 24,
    Zalo = 25,
    Telegram = 26,
    Googleplus = 27,
    More = 28,
    KakaotalkStory = 29,
    FacebookLite = 30,
    InstagramStory = 31,
    MessengerLite = 32,
    TwitterLite = 33,
    Sms = 34,
    Shareit = 35,
    PhoneQuickLogin = 36,
    Duet = 37,
    FacebookStory = 38,
    Kwai = 39,
    SaveToLocal = 40,
    Download = 41,
    Mv = 42,
    WhatsAppStatus = 43,
    AppleId = 44,
    LastInformationQuickLogin = 45,
    Pin = 46,
    Unpin = 47,
    ImConversation = 48,
    SavePhotoToLocal = 49,
    OpenSdCard = 50,
    Dislike = 51,
    Report = 52,
    BlockOrUnblock = 53,
    PrivateOrPublic = 54,
    Unfollow = 55,
    Delete = 56,
    Screenshot = 57,
    Imo = 58,
    Kuaishou = 59,
    Nebula = 60,
    InstagramChat = 61,
    Snapchat = 62,
    GbWhatsApp = 63,
    FacebookReels = 64,
    WhatsAppGroup = 65,
    WhatsAppBusiness = 66,
    YoWhatsApp = 67,
    FmWhatsApp = 68,
    PlaceHolder = 69,
    NationalNetworkIdentity = 70,
}
impl ThirdPartyPlatform {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "ThirdPartyPlatform_UNKNOWN1",
            Self::Email => "EMAIL",
            Self::Phone => "PHONE",
            Self::WechatTimeline => "WECHAT_TIMELINE",
            Self::QqZone => "QQ_ZONE",
            Self::Wechat => "WECHAT",
            Self::Qq => "QQ",
            Self::SinaWeibo => "SINA_WEIBO",
            Self::Facebook => "FACEBOOK",
            Self::Twitter => "TWITTER",
            Self::WhatsApp => "WHATS_APP",
            Self::Messenger => "MESSENGER",
            Self::Youtube => "YOUTUBE",
            Self::Pinterest => "PINTEREST",
            Self::Kakaotalk => "KAKAOTALK",
            Self::Kik => "KIK",
            Self::Instagram => "INSTAGRAM",
            Self::Vk => "VK",
            Self::Viber => "VIBER",
            Self::Line => "LINE",
            Self::Bbm => "BBM",
            Self::Google => "GOOGLE",
            Self::Naver => "NAVER",
            Self::CopyLink => "COPY_LINK",
            Self::ImFriend => "IM_FRIEND",
            Self::Zalo => "ZALO",
            Self::Telegram => "TELEGRAM",
            Self::Googleplus => "GOOGLEPLUS",
            Self::More => "MORE",
            Self::KakaotalkStory => "KAKAOTALK_STORY",
            Self::FacebookLite => "FACEBOOK_LITE",
            Self::InstagramStory => "INSTAGRAM_STORY",
            Self::MessengerLite => "MESSENGER_LITE",
            Self::TwitterLite => "TWITTER_LITE",
            Self::Sms => "SMS",
            Self::Shareit => "SHAREIT",
            Self::PhoneQuickLogin => "PHONE_QUICK_LOGIN",
            Self::Duet => "DUET",
            Self::FacebookStory => "FACEBOOK_STORY",
            Self::Kwai => "KWAI",
            Self::SaveToLocal => "SAVE_TO_LOCAL",
            Self::Download => "DOWNLOAD",
            Self::Mv => "MV",
            Self::WhatsAppStatus => "WHATS_APP_STATUS",
            Self::AppleId => "APPLE_ID",
            Self::LastInformationQuickLogin => "LAST_INFORMATION_QUICK_LOGIN",
            Self::Pin => "PIN",
            Self::Unpin => "UNPIN",
            Self::ImConversation => "IM_CONVERSATION",
            Self::SavePhotoToLocal => "SAVE_PHOTO_TO_LOCAL",
            Self::OpenSdCard => "OPEN_SD_CARD",
            Self::Dislike => "DISLIKE",
            Self::Report => "REPORT",
            Self::BlockOrUnblock => "BLOCK_OR_UNBLOCK",
            Self::PrivateOrPublic => "PRIVATE_OR_PUBLIC",
            Self::Unfollow => "UNFOLLOW",
            Self::Delete => "DELETE",
            Self::Screenshot => "SCREENSHOT",
            Self::Imo => "IMO",
            Self::Kuaishou => "KUAISHOU",
            Self::Nebula => "NEBULA",
            Self::InstagramChat => "INSTAGRAM_CHAT",
            Self::Snapchat => "SNAPCHAT",
            Self::GbWhatsApp => "GB_WHATS_APP",
            Self::FacebookReels => "FACEBOOK_REELS",
            Self::WhatsAppGroup => "WHATS_APP_GROUP",
            Self::WhatsAppBusiness => "WHATS_APP_BUSINESS",
            Self::YoWhatsApp => "YO_WHATS_APP",
            Self::FmWhatsApp => "FM_WHATS_APP",
            Self::PlaceHolder => "PLACE_HOLDER",
            Self::NationalNetworkIdentity => "NATIONAL_NETWORK_IDENTITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ThirdPartyPlatform_UNKNOWN1" => Some(Self::Unknown1),
            "EMAIL" => Some(Self::Email),
            "PHONE" => Some(Self::Phone),
            "WECHAT_TIMELINE" => Some(Self::WechatTimeline),
            "QQ_ZONE" => Some(Self::QqZone),
            "WECHAT" => Some(Self::Wechat),
            "QQ" => Some(Self::Qq),
            "SINA_WEIBO" => Some(Self::SinaWeibo),
            "FACEBOOK" => Some(Self::Facebook),
            "TWITTER" => Some(Self::Twitter),
            "WHATS_APP" => Some(Self::WhatsApp),
            "MESSENGER" => Some(Self::Messenger),
            "YOUTUBE" => Some(Self::Youtube),
            "PINTEREST" => Some(Self::Pinterest),
            "KAKAOTALK" => Some(Self::Kakaotalk),
            "KIK" => Some(Self::Kik),
            "INSTAGRAM" => Some(Self::Instagram),
            "VK" => Some(Self::Vk),
            "VIBER" => Some(Self::Viber),
            "LINE" => Some(Self::Line),
            "BBM" => Some(Self::Bbm),
            "GOOGLE" => Some(Self::Google),
            "NAVER" => Some(Self::Naver),
            "COPY_LINK" => Some(Self::CopyLink),
            "IM_FRIEND" => Some(Self::ImFriend),
            "ZALO" => Some(Self::Zalo),
            "TELEGRAM" => Some(Self::Telegram),
            "GOOGLEPLUS" => Some(Self::Googleplus),
            "MORE" => Some(Self::More),
            "KAKAOTALK_STORY" => Some(Self::KakaotalkStory),
            "FACEBOOK_LITE" => Some(Self::FacebookLite),
            "INSTAGRAM_STORY" => Some(Self::InstagramStory),
            "MESSENGER_LITE" => Some(Self::MessengerLite),
            "TWITTER_LITE" => Some(Self::TwitterLite),
            "SMS" => Some(Self::Sms),
            "SHAREIT" => Some(Self::Shareit),
            "PHONE_QUICK_LOGIN" => Some(Self::PhoneQuickLogin),
            "DUET" => Some(Self::Duet),
            "FACEBOOK_STORY" => Some(Self::FacebookStory),
            "KWAI" => Some(Self::Kwai),
            "SAVE_TO_LOCAL" => Some(Self::SaveToLocal),
            "DOWNLOAD" => Some(Self::Download),
            "MV" => Some(Self::Mv),
            "WHATS_APP_STATUS" => Some(Self::WhatsAppStatus),
            "APPLE_ID" => Some(Self::AppleId),
            "LAST_INFORMATION_QUICK_LOGIN" => Some(Self::LastInformationQuickLogin),
            "PIN" => Some(Self::Pin),
            "UNPIN" => Some(Self::Unpin),
            "IM_CONVERSATION" => Some(Self::ImConversation),
            "SAVE_PHOTO_TO_LOCAL" => Some(Self::SavePhotoToLocal),
            "OPEN_SD_CARD" => Some(Self::OpenSdCard),
            "DISLIKE" => Some(Self::Dislike),
            "REPORT" => Some(Self::Report),
            "BLOCK_OR_UNBLOCK" => Some(Self::BlockOrUnblock),
            "PRIVATE_OR_PUBLIC" => Some(Self::PrivateOrPublic),
            "UNFOLLOW" => Some(Self::Unfollow),
            "DELETE" => Some(Self::Delete),
            "SCREENSHOT" => Some(Self::Screenshot),
            "IMO" => Some(Self::Imo),
            "KUAISHOU" => Some(Self::Kuaishou),
            "NEBULA" => Some(Self::Nebula),
            "INSTAGRAM_CHAT" => Some(Self::InstagramChat),
            "SNAPCHAT" => Some(Self::Snapchat),
            "GB_WHATS_APP" => Some(Self::GbWhatsApp),
            "FACEBOOK_REELS" => Some(Self::FacebookReels),
            "WHATS_APP_GROUP" => Some(Self::WhatsAppGroup),
            "WHATS_APP_BUSINESS" => Some(Self::WhatsAppBusiness),
            "YO_WHATS_APP" => Some(Self::YoWhatsApp),
            "FM_WHATS_APP" => Some(Self::FmWhatsApp),
            "PLACE_HOLDER" => Some(Self::PlaceHolder),
            "NATIONAL_NETWORK_IDENTITY" => Some(Self::NationalNetworkIdentity),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
    Unknown1 = 0,
    NotConnected = 1,
    Wifi = 2,
    Mobile4g = 3,
    Mobile3g = 4,
    Mobile2g = 5,
    MobileUnknown = 6,
    Mobile5g = 7,
    Mobile5gNsa = 8,
    Mobile5gSa = 9,
}
impl Type {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Type_UNKNOWN1",
            Self::NotConnected => "NOT_CONNECTED",
            Self::Wifi => "WIFI",
            Self::Mobile4g => "MOBILE_4G",
            Self::Mobile3g => "MOBILE_3G",
            Self::Mobile2g => "MOBILE_2G",
            Self::MobileUnknown => "MOBILE_UNKNOWN",
            Self::Mobile5g => "MOBILE_5G",
            Self::Mobile5gNsa => "MOBILE_5G_NSA",
            Self::Mobile5gSa => "MOBILE_5G_SA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Type_UNKNOWN1" => Some(Self::Unknown1),
            "NOT_CONNECTED" => Some(Self::NotConnected),
            "WIFI" => Some(Self::Wifi),
            "MOBILE_4G" => Some(Self::Mobile4g),
            "MOBILE_3G" => Some(Self::Mobile3g),
            "MOBILE_2G" => Some(Self::Mobile2g),
            "MOBILE_UNKNOWN" => Some(Self::MobileUnknown),
            "MOBILE_5G" => Some(Self::Mobile5g),
            "MOBILE_5G_NSA" => Some(Self::Mobile5gNsa),
            "MOBILE_5G_SA" => Some(Self::Mobile5gSa),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SyncStatus {
    Unsynchroized = 0,
    Synchroized = 1,
}
impl SyncStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unsynchroized => "UNSYNCHROIZED",
            Self::Synchroized => "SYNCHROIZED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSYNCHROIZED" => Some(Self::Unsynchroized),
            "SYNCHROIZED" => Some(Self::Synchroized),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AdditionalSeqIdPackage {
    #[prost(int32, optional, tag = "1")]
    pub channel: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub channel_seq_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub custom_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "4")]
    pub custom_seq_id: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AppPackage {
    #[prost(int32, optional, tag = "1")]
    pub product: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub platform: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub language: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub channel: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub version_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub version_code: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub package_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub hotfix_patch_version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "9")]
    pub build_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "10")]
    pub performance_monitoring_status: ::core::option::Option<
        PerformanceMonitoringStatus,
    >,
    #[prost(string, optional, tag = "11")]
    pub container: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub new_oc: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "13")]
    pub f41104abi: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "14")]
    pub robust_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "15")]
    pub android_os: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "16")]
    pub original_platform: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommonPackage {
    #[prost(message, optional, tag = "1")]
    pub identity_package: ::core::option::Option<IdentityPackage>,
    #[prost(message, optional, tag = "2")]
    pub app_package: ::core::option::Option<AppPackage>,
    #[prost(message, optional, tag = "3")]
    pub device_package: ::core::option::Option<DevicePackage>,
    #[prost(message, optional, tag = "4")]
    pub network_package: ::core::option::Option<NetworkPackage>,
    #[prost(message, optional, tag = "5")]
    pub location_package: ::core::option::Option<LocationPackage>,
    #[prost(message, repeated, tag = "6")]
    pub experiment: ::prost::alloc::vec::Vec<Experiment>,
    #[prost(message, optional, tag = "7")]
    pub time_package: ::core::option::Option<TimePackage>,
    #[prost(message, optional, tag = "8")]
    pub additional_seq_id_package: ::core::option::Option<AdditionalSeqIdPackage>,
    #[prost(string, optional, tag = "9")]
    pub style_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub service_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub sub_biz: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "12")]
    pub need_encrypt: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "13")]
    pub global_attr: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub h5_extra_attr: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "16")]
    pub stid_package: ::core::option::Option<super::super::protobuf::log::StidPackage>,
    #[prost(message, optional, tag = "17")]
    pub common_stid: ::core::option::Option<super::super::protobuf::log::StidPackage>,
    #[prost(int32, optional, tag = "18")]
    pub api_app_status: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "20")]
    pub kds_package: ::core::option::Option<KdsPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KdsPackage {
    #[prost(string, optional, tag = "1")]
    pub bundle_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub version_code: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Channel {
    Unknown1 = 0,
    Realtime = 1,
    HighFreq = 2,
    Normal = 3,
}
impl Channel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "UNKNOWN1",
            Self::Realtime => "REALTIME",
            Self::HighFreq => "HIGH_FREQ",
            Self::Normal => "NORMAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN1" => Some(Self::Unknown1),
            "REALTIME" => Some(Self::Realtime),
            "HIGH_FREQ" => Some(Self::HighFreq),
            "NORMAL" => Some(Self::Normal),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Abi {
    Unknown4 = 0,
    Arm32 = 1,
    Arm64 = 2,
}
impl Abi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "UNKNOWN4",
            Self::Arm32 => "ARM32",
            Self::Arm64 => "ARM64",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN4" => Some(Self::Unknown4),
            "ARM32" => Some(Self::Arm32),
            "ARM64" => Some(Self::Arm64),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AndroidOs {
    AndroidDefault = 0,
    AndroidHarmony = 1,
}
impl AndroidOs {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AndroidDefault => "ANDROID_DEFAULT",
            Self::AndroidHarmony => "ANDROID_HARMONY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ANDROID_DEFAULT" => Some(Self::AndroidDefault),
            "ANDROID_HARMONY" => Some(Self::AndroidHarmony),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BuildType {
    Unknown3 = 0,
    Debug = 1,
    Huidu = 2,
    Release = 3,
}
impl BuildType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown3 => "BuildType_UNKNOWN3",
            Self::Debug => "DEBUG",
            Self::Huidu => "HUIDU",
            Self::Release => "RELEASE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BuildType_UNKNOWN3" => Some(Self::Unknown3),
            "DEBUG" => Some(Self::Debug),
            "HUIDU" => Some(Self::Huidu),
            "RELEASE" => Some(Self::Release),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Platform {
    Unknown2 = 0,
    AndroidPhone = 1,
    AndroidPad = 2,
    Iphone = 3,
    Ipad = 4,
    WindowsPc = 5,
    AndroidPhoneH5 = 6,
    IphoneH5 = 7,
    OutsideAndroidH5 = 8,
    OutsideIosH5 = 9,
    PcWeb = 10,
    Mac = 11,
    HarmonyPhone = 12,
    HarmonyPad = 13,
    VisionPro = 14,
    HarmonyPhoneH5 = 15,
    OutsideHarmonyH5 = 16,
}
impl Platform {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "UNKNOWN2",
            Self::AndroidPhone => "ANDROID_PHONE",
            Self::AndroidPad => "ANDROID_PAD",
            Self::Iphone => "IPHONE",
            Self::Ipad => "IPAD",
            Self::WindowsPc => "WINDOWS_PC",
            Self::AndroidPhoneH5 => "ANDROID_PHONE_H5",
            Self::IphoneH5 => "IPHONE_H5",
            Self::OutsideAndroidH5 => "OUTSIDE_ANDROID_H5",
            Self::OutsideIosH5 => "OUTSIDE_IOS_H5",
            Self::PcWeb => "PC_WEB",
            Self::Mac => "MAC",
            Self::HarmonyPhone => "HARMONY_PHONE",
            Self::HarmonyPad => "HARMONY_PAD",
            Self::VisionPro => "VISION_PRO",
            Self::HarmonyPhoneH5 => "HARMONY_PHONE_H5",
            Self::OutsideHarmonyH5 => "OUTSIDE_HARMONY_H5",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN2" => Some(Self::Unknown2),
            "ANDROID_PHONE" => Some(Self::AndroidPhone),
            "ANDROID_PAD" => Some(Self::AndroidPad),
            "IPHONE" => Some(Self::Iphone),
            "IPAD" => Some(Self::Ipad),
            "WINDOWS_PC" => Some(Self::WindowsPc),
            "ANDROID_PHONE_H5" => Some(Self::AndroidPhoneH5),
            "IPHONE_H5" => Some(Self::IphoneH5),
            "OUTSIDE_ANDROID_H5" => Some(Self::OutsideAndroidH5),
            "OUTSIDE_IOS_H5" => Some(Self::OutsideIosH5),
            "PC_WEB" => Some(Self::PcWeb),
            "MAC" => Some(Self::Mac),
            "HARMONY_PHONE" => Some(Self::HarmonyPhone),
            "HARMONY_PAD" => Some(Self::HarmonyPad),
            "VISION_PRO" => Some(Self::VisionPro),
            "HARMONY_PHONE_H5" => Some(Self::HarmonyPhoneH5),
            "OUTSIDE_HARMONY_H5" => Some(Self::OutsideHarmonyH5),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Product {
    Unknown1 = 0,
    Kuaishou = 1,
    KuaishouGameExtension = 2,
    KuaishouLiveMate = 3,
    KuaishouVideoEditor = 4,
    Kwai = 5,
    KuaishouH5 = 6,
    KwaiLite = 7,
    KwaiGo = 8,
    KuaishouLiveMateWp = 9,
    WechatSmallApp = 12,
    Nebula = 13,
    KwaiGameLivePlugin = 14,
    AcfunGameCenter = 15,
    GameDiandianxiao = 16,
    Thanos = 17,
    Uvideo = 18,
    GameZone = 19,
    KwaiGoBrazil = 20,
    KwaiGoComics = 21,
    KuaishouAntman = 22,
    UvideoV2 = 23,
    KwaiBulldog = 24,
    LolitaGlobal = 25,
    KuaishouNebulaAntman = 26,
    Zikzak = 27,
    KsTv = 28,
    UvideoLite = 29,
    KuaishouVision = 30,
    KwaiMe = 31,
    KuaishouLandscape = 32,
    KuaishouBuckcar = 33,
    KuaishouVr = 34,
    KuaishouBamboo = 35,
    KuaishouLlmerchant = 36,
    KwaiAlliance = 37,
    Xifan = 38,
    KwaiGame = 39,
    Betse = 40,
    KwaiKtok = 41,
    KwaiCoingame = 42,
    KuaishouVp = 43,
    KwaiKnov = 44,
    KwaiFantasay = 45,
    Fantasay = 46,
    KwaiKleao = 47,
    Libra = 48,
    Aquarius = 49,
    Scorpio = 50,
    Aries = 51,
    Gemini = 52,
    Cancer = 53,
    Sagittarius = 54,
    Capricorn = 55,
}
impl Product {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Product_UNKNOWN1",
            Self::Kuaishou => "Product_KUAISHOU",
            Self::KuaishouGameExtension => "KUAISHOU_GAME_EXTENSION",
            Self::KuaishouLiveMate => "KUAISHOU_LIVE_MATE",
            Self::KuaishouVideoEditor => "KUAISHOU_VIDEO_EDITOR",
            Self::Kwai => "Product_KWAI",
            Self::KuaishouH5 => "KUAISHOU_H5",
            Self::KwaiLite => "KWAI_LITE",
            Self::KwaiGo => "KWAI_GO",
            Self::KuaishouLiveMateWp => "KUAISHOU_LIVE_MATE_WP",
            Self::WechatSmallApp => "WECHAT_SMALL_APP",
            Self::Nebula => "Product_NEBULA",
            Self::KwaiGameLivePlugin => "KWAI_GAME_LIVE_PLUGIN",
            Self::AcfunGameCenter => "ACFUN_GAME_CENTER",
            Self::GameDiandianxiao => "GAME_DIANDIANXIAO",
            Self::Thanos => "THANOS",
            Self::Uvideo => "UVIDEO",
            Self::GameZone => "GAME_ZONE",
            Self::KwaiGoBrazil => "KWAI_GO_BRAZIL",
            Self::KwaiGoComics => "KWAI_GO_COMICS",
            Self::KuaishouAntman => "KUAISHOU_ANTMAN",
            Self::UvideoV2 => "UVIDEO_V2",
            Self::KwaiBulldog => "KWAI_BULLDOG",
            Self::LolitaGlobal => "LOLITA_GLOBAL",
            Self::KuaishouNebulaAntman => "KUAISHOU_NEBULA_ANTMAN",
            Self::Zikzak => "ZIKZAK",
            Self::KsTv => "KS_TV",
            Self::UvideoLite => "UVIDEO_LITE",
            Self::KuaishouVision => "KUAISHOU_VISION",
            Self::KwaiMe => "KWAI_ME",
            Self::KuaishouLandscape => "KUAISHOU_LANDSCAPE",
            Self::KuaishouBuckcar => "KUAISHOU_BUCKCAR",
            Self::KuaishouVr => "KUAISHOU_VR",
            Self::KuaishouBamboo => "KUAISHOU_BAMBOO",
            Self::KuaishouLlmerchant => "KUAISHOU_LLMERCHANT",
            Self::KwaiAlliance => "KWAI_ALLIANCE",
            Self::Xifan => "XIFAN",
            Self::KwaiGame => "KWAI_GAME",
            Self::Betse => "BETSE",
            Self::KwaiKtok => "KWAI_KTOK",
            Self::KwaiCoingame => "KWAI_COINGAME",
            Self::KuaishouVp => "KUAISHOU_VP",
            Self::KwaiKnov => "KWAI_KNOV",
            Self::KwaiFantasay => "KWAI_FANTASAY",
            Self::Fantasay => "FANTASAY",
            Self::KwaiKleao => "KWAI_KLEAO",
            Self::Libra => "LIBRA",
            Self::Aquarius => "AQUARIUS",
            Self::Scorpio => "SCORPIO",
            Self::Aries => "ARIES",
            Self::Gemini => "GEMINI",
            Self::Cancer => "CANCER",
            Self::Sagittarius => "SAGITTARIUS",
            Self::Capricorn => "CAPRICORN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Product_UNKNOWN1" => Some(Self::Unknown1),
            "Product_KUAISHOU" => Some(Self::Kuaishou),
            "KUAISHOU_GAME_EXTENSION" => Some(Self::KuaishouGameExtension),
            "KUAISHOU_LIVE_MATE" => Some(Self::KuaishouLiveMate),
            "KUAISHOU_VIDEO_EDITOR" => Some(Self::KuaishouVideoEditor),
            "Product_KWAI" => Some(Self::Kwai),
            "KUAISHOU_H5" => Some(Self::KuaishouH5),
            "KWAI_LITE" => Some(Self::KwaiLite),
            "KWAI_GO" => Some(Self::KwaiGo),
            "KUAISHOU_LIVE_MATE_WP" => Some(Self::KuaishouLiveMateWp),
            "WECHAT_SMALL_APP" => Some(Self::WechatSmallApp),
            "Product_NEBULA" => Some(Self::Nebula),
            "KWAI_GAME_LIVE_PLUGIN" => Some(Self::KwaiGameLivePlugin),
            "ACFUN_GAME_CENTER" => Some(Self::AcfunGameCenter),
            "GAME_DIANDIANXIAO" => Some(Self::GameDiandianxiao),
            "THANOS" => Some(Self::Thanos),
            "UVIDEO" => Some(Self::Uvideo),
            "GAME_ZONE" => Some(Self::GameZone),
            "KWAI_GO_BRAZIL" => Some(Self::KwaiGoBrazil),
            "KWAI_GO_COMICS" => Some(Self::KwaiGoComics),
            "KUAISHOU_ANTMAN" => Some(Self::KuaishouAntman),
            "UVIDEO_V2" => Some(Self::UvideoV2),
            "KWAI_BULLDOG" => Some(Self::KwaiBulldog),
            "LOLITA_GLOBAL" => Some(Self::LolitaGlobal),
            "KUAISHOU_NEBULA_ANTMAN" => Some(Self::KuaishouNebulaAntman),
            "ZIKZAK" => Some(Self::Zikzak),
            "KS_TV" => Some(Self::KsTv),
            "UVIDEO_LITE" => Some(Self::UvideoLite),
            "KUAISHOU_VISION" => Some(Self::KuaishouVision),
            "KWAI_ME" => Some(Self::KwaiMe),
            "KUAISHOU_LANDSCAPE" => Some(Self::KuaishouLandscape),
            "KUAISHOU_BUCKCAR" => Some(Self::KuaishouBuckcar),
            "KUAISHOU_VR" => Some(Self::KuaishouVr),
            "KUAISHOU_BAMBOO" => Some(Self::KuaishouBamboo),
            "KUAISHOU_LLMERCHANT" => Some(Self::KuaishouLlmerchant),
            "KWAI_ALLIANCE" => Some(Self::KwaiAlliance),
            "XIFAN" => Some(Self::Xifan),
            "KWAI_GAME" => Some(Self::KwaiGame),
            "BETSE" => Some(Self::Betse),
            "KWAI_KTOK" => Some(Self::KwaiKtok),
            "KWAI_COINGAME" => Some(Self::KwaiCoingame),
            "KUAISHOU_VP" => Some(Self::KuaishouVp),
            "KWAI_KNOV" => Some(Self::KwaiKnov),
            "KWAI_FANTASAY" => Some(Self::KwaiFantasay),
            "FANTASAY" => Some(Self::Fantasay),
            "KWAI_KLEAO" => Some(Self::KwaiKleao),
            "LIBRA" => Some(Self::Libra),
            "AQUARIUS" => Some(Self::Aquarius),
            "SCORPIO" => Some(Self::Scorpio),
            "ARIES" => Some(Self::Aries),
            "GEMINI" => Some(Self::Gemini),
            "CANCER" => Some(Self::Cancer),
            "SAGITTARIUS" => Some(Self::Sagittarius),
            "CAPRICORN" => Some(Self::Capricorn),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchReportEvent {
    #[prost(message, repeated, tag = "1")]
    pub event: ::prost::alloc::vec::Vec<ReportEvent>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RawBatchReportEvent {
    #[prost(bytes = "vec", repeated, tag = "1")]
    pub client_request_info: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    #[prost(message, repeated, tag = "2")]
    pub event: ::prost::alloc::vec::Vec<RawReportEvent>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RawReportEvent {
    #[prost(uint64, optional, tag = "1")]
    pub client_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub client_increment_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub server_hostname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "4")]
    pub server_timestamp: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "5")]
    pub common_package: ::core::option::Option<CommonPackage>,
    #[prost(message, optional, tag = "6")]
    pub event_package: ::core::option::Option<event::RawEventPackage>,
    #[prost(message, optional, tag = "7")]
    pub stat_package: ::core::option::Option<stat::RawStatPackage>,
    #[prost(string, optional, tag = "8")]
    pub explore_locale: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub event_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub front_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub process_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub relation_log_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReportEvent {
    #[prost(uint64, optional, tag = "1")]
    pub client_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub client_increment_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "3")]
    pub server_hostname: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "4")]
    pub server_timestamp: ::core::option::Option<u64>,
    #[prost(message, optional, tag = "5")]
    pub common_package: ::core::option::Option<CommonPackage>,
    #[prost(message, optional, tag = "6")]
    pub event_package: ::core::option::Option<event::EventPackage>,
    #[prost(message, optional, tag = "7")]
    pub stat_package: ::core::option::Option<stat::StatPackage>,
    #[prost(string, optional, tag = "8")]
    pub explore_locale: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub event_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub front_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub process_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub relation_log_id: ::core::option::Option<::prost::alloc::string::String>,
}
