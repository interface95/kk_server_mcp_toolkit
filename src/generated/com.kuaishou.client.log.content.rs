// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AdjustSilderItemPackage {
    #[prost(string, optional, tag = "1")]
    pub item: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub is_adjusted: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "3")]
    pub value: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AtlasEditPackageV2 {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub imported_count: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub clipped_count: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct AtlasPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub count: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub viewed_count: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BannerPackage {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCollectionPackageV2 {
    #[prost(message, repeated, tag = "1")]
    pub collection_package: ::prost::alloc::vec::Vec<CollectionPackageV2>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMoreInfoPackageV2 {
    #[prost(message, repeated, tag = "1")]
    pub more_info_package: ::prost::alloc::vec::Vec<MoreInfoPackageV2>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchSeriesPackageV2 {
    #[prost(message, repeated, tag = "1")]
    pub series_package: ::prost::alloc::vec::Vec<SeriesPackageV2>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeautyMakeUpStatusPackage {
    #[prost(int32, optional, tag = "1")]
    pub primary_type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "2")]
    pub beauty_make_up_sub_features_package: ::prost::alloc::vec::Vec<
        BeautyMakeUpSubFeaturesPackage,
    >,
    #[prost(string, optional, tag = "3")]
    pub primary_type_new: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub primary_index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub primary_live_value: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BeautyMakeUpSubFeaturesPackage {
    #[prost(int32, optional, tag = "1")]
    pub secondary_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub third_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub secodary_type_new: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub secodary_index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub third_index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub segment_index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub tab_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeautyStatusPackage {
    #[prost(uint32, optional, tag = "1")]
    pub r#type: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "2")]
    pub beauty_sub_features_package: ::prost::alloc::vec::Vec<BeautySubFeaturesPackage>,
    #[prost(string, optional, tag = "3")]
    pub segment_index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "4")]
    pub use_quick_beauty: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BeautySubFeaturesPackage {
    #[prost(int32, optional, tag = "1")]
    pub sub_features: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "3")]
    pub value: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "4")]
    pub is_adjusted: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "5")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BodySubFeaturesPackage {
    #[prost(string, optional, tag = "1")]
    pub item: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "2")]
    pub value: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BodyUsePackage {
    #[prost(string, optional, tag = "1")]
    pub item: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(float, optional, tag = "2")]
    pub value: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "3")]
    pub use_quick_body: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "4")]
    pub body_sub_features_package: ::prost::alloc::vec::Vec<BodySubFeaturesPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BusinessPackageV2 {
    #[prost(string, optional, tag = "1")]
    pub business_line: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "2")]
    pub custom: ::core::option::Option<CustomV2>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BusinessProfilePackage {
    #[prost(string, optional, tag = "1")]
    pub visited_user_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CameraRecordFeaturesStatusPackage {
    #[prost(bool, optional, tag = "1")]
    pub beauty: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "2")]
    pub magic_face_package: ::prost::alloc::vec::Vec<MagicFacePackage>,
    #[prost(string, optional, tag = "3")]
    pub magic_music: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub music: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub beats_switch_package: ::core::option::Option<FeatureSwitchPackage>,
    #[prost(message, optional, tag = "6")]
    pub music_detail_package: ::core::option::Option<MusicDetailPackage>,
    #[prost(message, optional, tag = "7")]
    pub beauty_status_package: ::core::option::Option<BeautyStatusPackage>,
    #[prost(message, repeated, tag = "8")]
    pub filter_use_package: ::prost::alloc::vec::Vec<FilterDetailPackage>,
    #[prost(message, repeated, tag = "9")]
    pub beauty_make_up_status_detail_package: ::prost::alloc::vec::Vec<
        BeautyMakeUpStatusPackage,
    >,
    #[prost(message, repeated, tag = "10")]
    pub style_status_package: ::prost::alloc::vec::Vec<StyleStatusPackage>,
    #[prost(message, repeated, tag = "11")]
    pub beauty_use_package: ::prost::alloc::vec::Vec<BeautyStatusPackage>,
    #[prost(message, repeated, tag = "12")]
    pub body_user_package: ::prost::alloc::vec::Vec<BodyUsePackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ChatPackage {
    #[prost(string, optional, tag = "1")]
    pub send_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub send_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub show_time: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub message_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub message_content: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub receive_user_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ChinaMobileQuickLoginValidateResultPackage {
    #[prost(string, optional, tag = "1")]
    pub result_code: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub token: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub auth_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub auth_type_description: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub open_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub channel: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectionPackageV2 {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub cnt: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub secondary_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, repeated, tag = "10")]
    pub photo_package: ::prost::alloc::vec::Vec<PhotoPackage>,
    #[prost(string, optional, tag = "11")]
    pub photo_count: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub llsid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommentPackage {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub reply_identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub pasted: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "4")]
    pub author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    pub hot: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub child_comment: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub child_comment_count: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "9")]
    pub recall_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "10")]
    pub recall_type_new: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub tag_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "12")]
    pub show_length: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "13")]
    pub is_first_show: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "14")]
    pub reply_author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "15")]
    pub at_user_cnt: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "16")]
    pub is_edited: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "17")]
    pub edit_status: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "19")]
    pub emotion_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "20")]
    pub emotion_biz_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "21")]
    pub f41092god: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "22")]
    pub comment_mark: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "23")]
    pub comment_user_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "24")]
    pub down_comment: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "25")]
    pub sever_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "26")]
    pub hidden_comment: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "27")]
    pub author_head_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "28")]
    pub comment_tag: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "29")]
    pub if_have_reply_button: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "30")]
    pub click_position: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "31")]
    pub comment_tab: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "32")]
    pub is_head_pendant: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "33")]
    pub picture_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "34")]
    pub picture_biz_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "35")]
    pub is_picture_slide: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "36")]
    pub comment_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "37")]
    pub comment_photo_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "38")]
    pub comment_photo_source: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "39")]
    pub reco_cmt_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "40")]
    pub image_num: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "41")]
    pub image_type_num: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "42")]
    pub if_product_review_comment: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CommodityDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub index: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub selected: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "5")]
    pub item_type: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "6")]
    pub has_coupon: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub is_seckill: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "8")]
    pub is_in_explanation: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub is_playback: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub is_snapup: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "11")]
    pub is_more_cheap: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "12")]
    pub is_new_exclusive: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "13")]
    pub is_full_reduction: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "14")]
    pub is_sandea_py_item: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "15")]
    pub is_search_flash: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "16")]
    pub market_good_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "17")]
    pub item_activity_type: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "18")]
    pub status: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "19")]
    pub inventory: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "20")]
    pub price: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub light_spot: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "22")]
    pub activity_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "23")]
    pub sku_num: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "24")]
    pub seller_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "25")]
    pub carrier_entry: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "26")]
    pub carrier_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "27")]
    pub carrier_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "28")]
    pub rights_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ContentPackage {
    #[prost(message, optional, tag = "1")]
    pub user_package: ::core::option::Option<UserPackage>,
    #[prost(message, optional, tag = "2")]
    pub live_stream_package: ::core::option::Option<LiveStreamPackage>,
    #[prost(message, optional, tag = "3")]
    pub screen_package: ::core::option::Option<ScreenPackage>,
    #[prost(message, optional, tag = "4")]
    pub payment_package: ::core::option::Option<PaymentPackage>,
    #[prost(message, optional, tag = "5")]
    pub gift_package: ::core::option::Option<GiftPackage>,
    #[prost(message, optional, tag = "6")]
    pub sound_effect_package: ::core::option::Option<SoundEffectPackage>,
    #[prost(message, optional, tag = "7")]
    pub message_package: ::core::option::Option<MessagePackage>,
    #[prost(message, optional, tag = "8")]
    pub photo_package: ::core::option::Option<PhotoPackage>,
    #[prost(message, optional, tag = "9")]
    pub video_package: ::core::option::Option<VideoPackage>,
    #[prost(message, optional, tag = "10")]
    pub comment_package: ::core::option::Option<CommentPackage>,
    #[prost(message, optional, tag = "11")]
    pub local_music_package: ::core::option::Option<LocalMusicPackage>,
    #[prost(message, optional, tag = "12")]
    pub search_result_package: ::core::option::Option<SearchResultPackage>,
    #[prost(message, optional, tag = "13")]
    pub third_party_recommend_user_list_item_package: ::core::option::Option<
        ThirdPartyRecommendUserListItemPackage,
    >,
    #[prost(message, optional, tag = "14")]
    pub atlas_package: ::core::option::Option<AtlasPackage>,
    #[prost(message, optional, tag = "15")]
    pub banner_package: ::core::option::Option<BannerPackage>,
    #[prost(message, optional, tag = "16")]
    pub profile_package: ::core::option::Option<ProfilePackage>,
    #[prost(message, optional, tag = "17")]
    pub third_party_bind_package: ::core::option::Option<ThirdPartyBindPackage>,
    #[prost(message, optional, tag = "18")]
    pub login_source_package: ::core::option::Option<LoginSourcePackage>,
    #[prost(message, optional, tag = "19")]
    pub refer_photo_package: ::core::option::Option<PhotoPackage>,
    #[prost(message, optional, tag = "20")]
    pub tag_package: ::core::option::Option<TagPackage>,
    #[prost(message, optional, tag = "21")]
    pub live_broadcast_package: ::core::option::Option<LiveBroadcastPacakge>,
    #[prost(message, optional, tag = "22")]
    pub effect_package: ::core::option::Option<EffectPackage>,
    #[prost(message, optional, tag = "23")]
    pub feature_switch_package: ::core::option::Option<FeatureSwitchPackage>,
    #[prost(message, optional, tag = "24")]
    pub import_music_from_pc_package: ::core::option::Option<ImportMusicFromPcPackage>,
    #[prost(message, optional, tag = "25")]
    pub live_audience_package: ::core::option::Option<LiveAudiencePacakge>,
    #[prost(message, optional, tag = "26")]
    pub e_commerce_link_package: ::core::option::Option<ECommerceLinkPacakge>,
    #[prost(message, optional, tag = "27")]
    pub comment_show_package: ::core::option::Option<CommentShowPackage>,
    #[prost(message, optional, tag = "28")]
    pub tag_show_package: ::core::option::Option<TagShowPackage>,
    #[prost(message, optional, tag = "29")]
    pub photo_show_package: ::core::option::Option<PhotoShowPackage>,
    #[prost(message, optional, tag = "30")]
    pub batch_visit_detail_package: ::core::option::Option<BatchVisitDetailPackage>,
    #[prost(message, optional, tag = "31")]
    pub singer_detail_package: ::core::option::Option<SingerDetailPackage>,
    #[prost(message, optional, tag = "32")]
    pub music_detail_package: ::core::option::Option<MusicDetailPackage>,
    #[prost(message, optional, tag = "34")]
    pub batch_feed_show_count_package: ::core::option::Option<BatchFeedShowCountPackage>,
    #[prost(message, optional, tag = "36")]
    pub video_edit_operation_package: ::core::option::Option<VideoEditOperationPackage>,
    #[prost(message, optional, tag = "37")]
    pub video_edit_features_status_package: ::core::option::Option<
        VideoEditFeaturesStatusPackage,
    >,
    #[prost(message, optional, tag = "38")]
    pub batch_feature_switch_package: ::core::option::Option<BatchFeatureSwitchPackage>,
    #[prost(message, optional, tag = "39")]
    pub commodity_detail_package: ::core::option::Option<CommodityDetailPackage>,
    #[prost(message, optional, tag = "40")]
    pub batch_user_package: ::core::option::Option<BatchUserPackage>,
    #[prost(message, optional, tag = "41")]
    pub camera_record_features_status_package: ::core::option::Option<
        CameraRecordFeaturesStatusPackage,
    >,
    #[prost(message, optional, tag = "42")]
    pub k_song_detail_package: ::core::option::Option<KSongDetailPackage>,
    #[prost(message, optional, tag = "44")]
    pub photo_seek_bar_drag_package: ::core::option::Option<PhotoSeekBarDragPackage>,
    #[prost(message, optional, tag = "46")]
    pub magic_face_show_package: ::core::option::Option<MagicFaceShowPackage>,
    #[prost(message, optional, tag = "47")]
    pub production_edit_operation_package: ::core::option::Option<
        ProductionEditOperationPackage,
    >,
    #[prost(message, optional, tag = "48")]
    pub features_element_stay_length_package: ::core::option::Option<
        FeaturesElementStayLengthPackage,
    >,
    #[prost(message, optional, tag = "49")]
    pub beauty_status_package: ::core::option::Option<BeautyStatusPackage>,
    #[prost(message, optional, tag = "50")]
    pub batch_music_detail_package: ::core::option::Option<BatchMusicDetailPackage>,
    #[prost(message, optional, tag = "51")]
    pub batch_edit_effect_package: ::core::option::Option<BatchEditEffectPackage>,
    #[prost(message, optional, tag = "53")]
    pub batch_theme_package: ::core::option::Option<BatchThemePackage>,
    #[prost(message, optional, tag = "54")]
    pub batch_commodity_detail_package: ::core::option::Option<
        BatchCommodityDetailPackage,
    >,
    #[prost(message, optional, tag = "57")]
    pub batch_filter_detail_package: ::core::option::Option<BatchFilterDetailPackage>,
    #[prost(message, optional, tag = "58")]
    pub record_info_package: ::core::option::Option<RecordInfoPackage>,
    #[prost(message, optional, tag = "59")]
    pub record_fps_info_package: ::core::option::Option<RecordFpsInfoPackage>,
    #[prost(message, optional, tag = "61")]
    pub video_preview_info_package: ::core::option::Option<VideoPreviewInfoPackage>,
    #[prost(message, optional, tag = "62")]
    pub import_origin_video_packge: ::core::option::Option<ImportOriginVideoPackage>,
    #[prost(message, optional, tag = "63")]
    pub import_origin_photo_package: ::core::option::Option<ImportOriginPhotoPackage>,
    #[prost(message, optional, tag = "65")]
    pub video_clip_detail_package: ::core::option::Option<VideoClipDetailPackage>,
    #[prost(message, optional, tag = "66")]
    pub video_encoding_detail_package: ::core::option::Option<
        VideoEncodingDetailPackage,
    >,
    #[prost(message, optional, tag = "68")]
    pub batch_seek_bar_package: ::core::option::Option<BatchSeekBarDragPackage>,
    #[prost(message, optional, tag = "70")]
    pub music_adjust_detail_package: ::core::option::Option<MusicAdjustDetailPackage>,
    #[prost(message, optional, tag = "71")]
    pub chat_package: ::core::option::Option<ChatPackage>,
    #[prost(message, optional, tag = "72")]
    pub init_method_cost_package: ::core::option::Option<InitMethodCostPackage>,
    #[prost(message, optional, tag = "73")]
    pub video_watermark_detail_package: ::core::option::Option<
        VideoWatermarkDetailPackage,
    >,
    #[prost(message, optional, tag = "75")]
    pub china_mobile_quick_login_validate_result_package: ::core::option::Option<
        ChinaMobileQuickLoginValidateResultPackage,
    >,
    #[prost(message, optional, tag = "76")]
    pub beauty_make_up_status_pacakge: ::core::option::Option<BeautyMakeUpStatusPackage>,
    #[prost(message, optional, tag = "77")]
    pub batch_beauty_make_up_status_package: ::core::option::Option<
        BatchBeautyMakeUpStatusPackage,
    >,
    #[prost(message, optional, tag = "78")]
    pub batch_sticker_info_package: ::core::option::Option<BatchStickerInfoPackage>,
    #[prost(message, optional, tag = "79")]
    pub live_pk_package: ::core::option::Option<LivePkPackage>,
    #[prost(message, optional, tag = "80")]
    pub batch_moment_message_package: ::core::option::Option<BatchMomentMessagePackage>,
    #[prost(message, optional, tag = "85")]
    pub game_zone_game_package: ::core::option::Option<GameZoneGamePackage>,
    #[prost(message, optional, tag = "89")]
    pub music_loading_status_package: ::core::option::Option<MusicLoadingStatusPackage>,
    #[prost(message, optional, tag = "91")]
    pub morelist_package: ::core::option::Option<MorelistPackage>,
    #[prost(message, optional, tag = "109")]
    pub live_chat_package: ::core::option::Option<LiveChatPackageV2>,
    #[prost(message, optional, tag = "113")]
    pub live_voice_party_package: ::core::option::Option<LiveVoicePartyPackageV2>,
    #[prost(message, optional, tag = "116")]
    pub music_play_stat_package: ::core::option::Option<MusicPlayStatPackageV2>,
    #[prost(message, optional, tag = "123")]
    pub atlas_edit_package: ::core::option::Option<AtlasEditPackageV2>,
    #[prost(message, optional, tag = "124")]
    pub notification_package: ::core::option::Option<NotificationPackageV2>,
    #[prost(message, optional, tag = "127")]
    pub series_package: ::core::option::Option<SeriesPackageV2>,
    #[prost(message, optional, tag = "128")]
    pub batch_series_package: ::core::option::Option<BatchSeriesPackageV2>,
    #[prost(message, optional, tag = "129")]
    pub more_info_package: ::core::option::Option<MoreInfoPackageV2>,
    #[prost(message, optional, tag = "130")]
    pub batch_more_info_package: ::core::option::Option<BatchMoreInfoPackageV2>,
    #[prost(message, optional, tag = "133")]
    pub gossip_message_package: ::core::option::Option<GossipMessagePackageV2>,
    #[prost(message, optional, tag = "136")]
    pub target_user_package: ::core::option::Option<TargetUserPackageV2>,
    #[prost(message, optional, tag = "140")]
    pub collection_package: ::core::option::Option<CollectionPackageV2>,
    #[prost(message, optional, tag = "141")]
    pub batch_collection_package: ::core::option::Option<BatchCollectionPackageV2>,
    #[prost(message, optional, tag = "147")]
    pub business_package: ::core::option::Option<BusinessPackageV2>,
    #[prost(message, optional, tag = "149")]
    pub live_resource_file_package: ::core::option::Option<LiveResourceFilePackage>,
    #[prost(message, optional, tag = "150")]
    pub live_barrage_info_package: ::core::option::Option<LiveBarrageInfoPackage>,
    #[prost(message, optional, tag = "151")]
    pub local_intelligent_album_package: ::core::option::Option<
        LocalIntelligentAlbumPackage,
    >,
    #[prost(message, optional, tag = "152")]
    pub batch_local_intelligent_album_package: ::core::option::Option<
        BatchLocalIntelligentAlbumPackage,
    >,
    #[prost(message, optional, tag = "153")]
    pub im_user_package: ::core::option::Option<ImUserPackage>,
    #[prost(message, optional, tag = "154")]
    pub im_personal_session_package: ::core::option::Option<ImPersonalSessionPackage>,
    #[prost(message, optional, tag = "155")]
    pub im_group_session_package: ::core::option::Option<ImGroupSessionPackage>,
    #[prost(message, optional, tag = "156")]
    pub im_message_package: ::core::option::Option<ImMessagePackage>,
    #[prost(message, optional, tag = "157")]
    pub live_fans_group_package: ::core::option::Option<LiveFansGroupPackage>,
    #[prost(message, optional, tag = "159")]
    pub style_status_package: ::core::option::Option<StyleStatusPackage>,
    #[prost(message, optional, tag = "160")]
    pub moment_message_package: ::core::option::Option<MomentMessagePackage>,
    #[prost(message, optional, tag = "161")]
    pub business_profile_package: ::core::option::Option<BusinessProfilePackage>,
    #[prost(message, optional, tag = "162")]
    pub red_package: ::core::option::Option<RedPackPackage>,
    #[prost(message, optional, tag = "165")]
    pub download_resource_package: ::core::option::Option<DownloadResourcePackage>,
    #[prost(message, optional, tag = "166")]
    pub live_admin_operate_package: ::core::option::Option<LiveAdminOperatePackage>,
    #[prost(message, optional, tag = "167")]
    pub live_robot_speech_recognition_package: ::core::option::Option<
        LiveRobotSpeechRecognitionPackage,
    >,
    #[prost(message, optional, tag = "168")]
    pub live_robot_tts_package: ::core::option::Option<LiveRobotTtsPackage>,
    #[prost(message, optional, tag = "169")]
    pub ks_order_info_package: ::core::option::Option<KsOrderInfoPackage>,
    #[prost(message, optional, tag = "170")]
    pub live_share_package: ::core::option::Option<LiveSharePackage>,
    #[prost(message, optional, tag = "172")]
    pub batch_kuaishan_video_package: ::core::option::Option<BatchKuaishanVideoPackage>,
    #[prost(message, optional, tag = "173")]
    pub district_rank_package: ::core::option::Option<DistrictRankPackage>,
    #[prost(message, optional, tag = "174")]
    pub third_party_app_package: ::core::option::Option<ThirdPartyAppPackage>,
    #[prost(message, optional, tag = "175")]
    pub live_robot_package: ::core::option::Option<LiveRobotPackage>,
    #[prost(message, optional, tag = "177")]
    pub live_voice_party_theater_package: ::core::option::Option<
        LiveVoicePartyTheaterPackage,
    >,
    #[prost(message, optional, tag = "178")]
    pub live_voice_party_teampk_package: ::core::option::Option<
        LiveVoicePartyTeamPkPackage,
    >,
    #[prost(message, optional, tag = "179")]
    pub kuaishan_video_package: ::core::option::Option<KuaishanVideoPackage>,
    #[prost(message, optional, tag = "180")]
    pub body_user_package: ::core::option::Option<BodyUsePackage>,
    #[prost(message, optional, tag = "181")]
    pub danmaku_show_package: ::core::option::Option<DanmakuShowPackage>,
    #[prost(message, optional, tag = "182")]
    pub danmaku_package: ::core::option::Option<DanmakuPackage>,
    #[prost(message, optional, tag = "183")]
    pub item_base_info_package: ::core::option::Option<ItemBaseInfoPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct CustomV2 {
    #[prost(string, optional, tag = "1")]
    pub btn_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub conversion_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub source: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub activity_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub spread_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub order_status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub order_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub coupon_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub sub_business_line: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub buy_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub taget_photo_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub promotion_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub charge_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "17")]
    pub is_photo: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "18")]
    pub coupon_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "19")]
    pub brand: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "20")]
    pub model: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub tab_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "22")]
    pub sub_tab_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "23")]
    pub duration: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "24")]
    pub llsid: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "25")]
    pub is_realtime: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "26")]
    pub fail_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "27")]
    pub splash_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "28")]
    pub splash_id_new: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "29")]
    pub poi_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "30")]
    pub author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "31")]
    pub photo_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "32")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "33")]
    pub goods_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DanmakuPackage {
    #[prost(string, optional, tag = "1")]
    pub danmaku_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub danmaku_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub highcopy: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "4")]
    pub highlike: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "5")]
    pub danmaku_body_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "6")]
    pub server_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "7")]
    pub danmaku_show_num: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "8")]
    pub danmaku_show_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "9")]
    pub danmaku_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "10")]
    pub danmaku_color_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct DistrictRankPackage {
    #[prost(string, optional, tag = "1")]
    pub anchor_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub rank: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub is_districtrank_expand_gift_dialog: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "6")]
    pub rank_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ECommerceLinkPacakge {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EditEffectPackage {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EffectPackage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub location: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub duration: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, optional, tag = "4")]
    pub id: ::core::option::Option<i64>,
    #[prost(string, optional, tag = "5")]
    pub group_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FeatureSwitchPackage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub on: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FeaturesElementStayLengthPackage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FeedLogContext {
    #[prost(string, optional, tag = "1")]
    pub inter_stid_container: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub inter_st_ex_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub biz_log_params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct FeedShowCountPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "2")]
    pub count: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilterDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub segment_index: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub is_adjusted: ::core::option::Option<bool>,
    #[prost(float, optional, tag = "6")]
    pub value: ::core::option::Option<f32>,
    #[prost(bool, optional, tag = "7")]
    pub is_commonly_used: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "8")]
    pub tab_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "9")]
    pub tab_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GameZoneGamePackage {
    #[prost(string, optional, tag = "1")]
    pub category_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub category_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub game_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub game_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub game_score: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "6")]
    pub position: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "8")]
    pub is_fullscreen: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "9")]
    pub live_room_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub review_count: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "12")]
    pub live_room_count_text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "13")]
    pub review_count_text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub download_channel_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub download_channel_package: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "16")]
    pub download_channel_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "17")]
    pub game_package_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "18")]
    pub game_package_size: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct GiftPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub position: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "4")]
    pub magic_face_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "5")]
    pub total_count: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "6")]
    pub is_drawing_gift: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "7")]
    pub is_packet_gift: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "8")]
    pub is_combo_send: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "9")]
    pub to_anchor: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "10")]
    pub source_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "11")]
    pub is_local_has_material: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "12")]
    pub local_high_definition_materials: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(int32, optional, tag = "13")]
    pub gift_entry_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GossipMessagePackageV2 {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub index: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "3")]
    pub aggregation: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "4")]
    pub count: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "5")]
    pub user_status_package: ::prost::alloc::vec::Vec<UserStatusPackageV2>,
    #[prost(int32, optional, tag = "6")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(message, repeated, tag = "7")]
    pub photo_package: ::prost::alloc::vec::Vec<PhotoPackage>,
    #[prost(string, optional, tag = "8")]
    pub realtion_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "9")]
    pub has_arrow: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "10")]
    pub unread: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub ext_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub aggregate: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ImGroupSessionPackage {
    #[prost(string, optional, tag = "1")]
    pub group_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub group_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub is_top: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub is_mute: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub unread_massage_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "7")]
    pub member_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub user_role: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "9")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub owner_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub second_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub label: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ImMessageEmoticonPackage {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub package_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "4")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub biz_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ImMessageLinkPackage {
    #[prost(string, optional, tag = "1")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub icon_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub desc: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "6")]
    pub style: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ImMessageMultiImageLinkPackage {
    #[prost(string, optional, tag = "1")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub source_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub source_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub icon_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub desc: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "7")]
    pub image_urls: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub err_image_url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImMessagePackage {
    #[prost(string, optional, tag = "1")]
    pub message_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub send_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub receive_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub group_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "6")]
    pub has_at: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "7")]
    pub im_message_link_package: ::prost::alloc::vec::Vec<ImMessageLinkPackage>,
    #[prost(message, optional, tag = "8")]
    pub im_message_emoticon_package: ::core::option::Option<ImMessageEmoticonPackage>,
    #[prost(message, optional, tag = "9")]
    pub im_message_multi_image_link_package: ::core::option::Option<
        ImMessageMultiImageLinkPackage,
    >,
    #[prost(string, optional, tag = "10")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ImPersonalSessionPackage {
    #[prost(string, optional, tag = "1")]
    pub receive_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub relationship: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub is_top: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub is_mute: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub position: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub unread_massage_num: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ImUserPackage {
    #[prost(message, optional, tag = "1")]
    pub user_package: ::core::option::Option<UserPackage>,
    #[prost(int32, optional, tag = "2")]
    pub follow_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub friend_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub private_session_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub group_session_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "6")]
    pub unread_massage_num: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "8")]
    pub fans_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub public_group_seesion_num: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub session_num: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ImportMusicFromPcPackage {
    #[prost(int32, optional, tag = "1")]
    pub network_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub upload_status: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ImportOriginPhotoPackage {
    #[prost(bool, optional, tag = "1")]
    pub is_clipped: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub is_rotated: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "3")]
    pub origin_photo_segment_package: ::prost::alloc::vec::Vec<PhotoSegmentPackage>,
    #[prost(message, repeated, tag = "4")]
    pub clipped_photo_segment_package: ::prost::alloc::vec::Vec<PhotoSegmentPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ImportOriginVideoPackage {
    #[prost(message, optional, tag = "1")]
    pub origin_video_package: ::core::option::Option<VideoSegmentPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct InitMethodCostPackage {
    #[prost(string, optional, tag = "1")]
    pub method: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ItemBaseInfoPackage {
    #[prost(string, optional, tag = "1")]
    pub root_category_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub item_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KSongDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "2")]
    pub cover: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub model: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KsOrderInfoPackage {
    #[prost(string, optional, tag = "1")]
    pub ks_order_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KuaishanVideoPackage {
    #[prost(uint32, optional, tag = "1")]
    pub tab_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "2")]
    pub tab_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub template_id: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub template_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub template_index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveAdminOperatePackage {
    #[prost(int32, optional, tag = "2")]
    pub record_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub switch_tab_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub page_source_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveAudiencePacakge {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveBarrageInfoPackage {
    #[prost(int32, optional, tag = "1")]
    pub barrage_pos_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub barrage_text_size: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub barrage_alpha: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveBroadcastPacakge {
    #[prost(string, optional, tag = "1")]
    pub to_live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub receive_broadcast_audience_id: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "3")]
    pub exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub broadcast_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub to_anchor_user_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveChatPackageV2 {
    #[prost(string, optional, tag = "1")]
    pub user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub peer_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub apply_users_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub is_friend: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "6")]
    pub gift_ks_coin: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveFansGroupPackage {
    #[prost(string, optional, tag = "1")]
    pub fans_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub intimacy_score: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "3")]
    pub intimacy_level: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "4")]
    pub intimacy_status: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub intimacy_status_v2: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LivePkPackage {
    #[prost(int32, optional, tag = "1")]
    pub opponent_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub entrance_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub opponent_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub room_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub pk_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "8")]
    pub pk_score: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "9")]
    pub opponent_pk_score: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "10")]
    pub online_pk_friend_number: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "11")]
    pub opponent_watcher_number: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "12")]
    pub end_reason: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "13")]
    pub displayed_opponent_watcher_number: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(uint64, optional, tag = "14")]
    pub pk_close_microphone_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "15")]
    pub end_feedbacks: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "16")]
    pub pk_connect_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "17")]
    pub pk_play_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "18")]
    pub pk_end_timestamp: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "19")]
    pub interest_common: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "20")]
    pub pk_loser_punish_magic_face_id: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "21")]
    pub audience_watch_start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "22")]
    pub audience_watch_end_time: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "23")]
    pub audience_watch_end_reason: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "24")]
    pub game_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "25")]
    pub game_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveResourceFilePackage {
    #[prost(string, optional, tag = "1")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub version: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub is_zip_file: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveRobotPackage {
    #[prost(int32, optional, tag = "1")]
    pub pet_sex: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub robot_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub robot_status: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "4")]
    pub motor_skill_id: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "5")]
    pub motor_skill_status: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "6")]
    pub earn_task_type: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "7")]
    pub earn_task_status: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveRobotRequestPackage {
    #[prost(uint64, optional, tag = "1")]
    pub send_request_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub receive_response_timestamp: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveRobotSpeechRecognitionPackage {
    #[prost(string, optional, tag = "1")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub local_wake_up_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub server_wake_up_true_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub server_wake_up_false_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub receive_send_stop_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "7")]
    pub finish_timestamp: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "8")]
    pub recognition_result: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub skill: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub action: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "11")]
    pub slots: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveRobotTtsPackage {
    #[prost(string, optional, tag = "1")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub play_status: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveSharePackage {
    #[prost(int32, optional, tag = "1")]
    pub share_channel: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub guide_trigger_rule: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub third_party_platform: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub share_box_source_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveStreamPackage {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub host: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub port: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub f41093ip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "7")]
    pub is_anchor: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "8")]
    pub anchor_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "9")]
    pub audience_number: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "10")]
    pub game_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub game_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "12")]
    pub live_stream_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "13")]
    pub entrance_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "14")]
    pub source_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "15")]
    pub source_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "17")]
    pub content_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18")]
    pub source_type_new: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "19")]
    pub distince: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "20")]
    pub external_icon: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "21")]
    pub friend: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "22")]
    pub my_follow: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "23")]
    pub audience_number_string: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "24")]
    pub server_exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "25")]
    pub live_format: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "26")]
    pub kuaishou_musician: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "27")]
    pub reco_text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "28")]
    pub from_live: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "29")]
    pub show_index_plus_one: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "30")]
    pub live_operation_type: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "31")]
    pub refer_live_source_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "32")]
    pub aggregation_session_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "33")]
    pub live_icon_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "34")]
    pub live_reco_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "35")]
    pub live_icon_text_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "36")]
    pub live_icon_reason_text_type: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "37")]
    pub live_icon_reason_extra_info: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "38")]
    pub live_icon_text_extra_info: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(bool, optional, tag = "39")]
    pub is_normal_play: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "40")]
    pub live_style: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "41")]
    pub feed_log_ctx: ::core::option::Option<FeedLogContext>,
    #[prost(string, optional, tag = "42")]
    pub union_live_author: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "43")]
    pub is_fullscreen: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "44")]
    pub is_landscape: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "45")]
    pub live_main_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "47")]
    pub live_sub_style: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveVoicePartyPackageV2 {
    #[prost(string, optional, tag = "1")]
    pub voice_party_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub role: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "3")]
    pub guest_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "4")]
    pub is_mic_open: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "5")]
    pub selected_mic_seat_user_id: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(uint32, optional, tag = "6")]
    pub selected_mic_seat_user_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub applied_audience_number: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "8")]
    pub leave_mic_seat_reason: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub leave_voice_party_reason: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "10")]
    pub enter_voice_party_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "11")]
    pub leave_voice_party_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub enter_mic_seat_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub leave_mic_seat_timestamp: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "14")]
    pub entry_page: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "15")]
    pub mode: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "16")]
    pub enter_ktv_stage_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "17")]
    pub leave_ktv_stage_timestamp: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "18")]
    pub ktv_order_list_song_number: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "19")]
    pub ktv_order_list_audience_number: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "20")]
    pub ktv_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "21")]
    pub leave_ktv_stage_reason: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "22")]
    pub ktv_total_sung_song_number: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "23")]
    pub ktv_total_sung_singer_number: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "24")]
    pub leave_ktv_reason: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "25")]
    pub ktv_self_order_song_number: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "26")]
    pub ktv_self_order_song_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "27")]
    pub ktv_self_sung_song_number: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "28")]
    pub ktv_is_singer_singing: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "29")]
    pub enter_ktv_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "30")]
    pub leave_ktv_timestamp: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "31")]
    pub singer_play_bgm_trigger: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "32")]
    pub audio_begin_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "33")]
    pub audio_end_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "34")]
    pub video_begin_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "35")]
    pub video_end_timestamp: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "36")]
    pub enter_mic_seat_reason: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "37")]
    pub channel_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "38")]
    pub channel_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "39")]
    pub topic_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "40")]
    pub topic_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "41")]
    pub is_channel_select: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "42")]
    pub mic_status: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "43")]
    pub server_mic_status: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "44")]
    pub mic_set_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "45")]
    pub close_mic_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "46")]
    pub invite_mic_channel: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "47")]
    pub theater_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "48")]
    pub teampk_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "49")]
    pub team_pk_room_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "50")]
    pub mic_type: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "51")]
    pub mic_name_num: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "52")]
    pub mic_vip_num: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveVoicePartyTeamPkPackage {
    #[prost(string, optional, tag = "1")]
    pub team_pk_room_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub play_teampk_start_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub play_teampk_end_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub play_pk_start_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub play_pk_end_timestamp: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub pk_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "7")]
    pub play_teampk_end_reason: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub team_holder: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub pk_status: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "10")]
    pub teampk_mic_start_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "11")]
    pub teampk_mic_end_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub teampk_close_mic_duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LiveVoicePartyTheaterPackage {
    #[prost(string, optional, tag = "1")]
    pub theater_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub enter_theater_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub leave_theater_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub enter_theater_series_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "5")]
    pub leave_theater_series_timestamp: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub series_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "7")]
    pub index: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "8")]
    pub leave_theater_reason: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "9")]
    pub author_leave_theater_series_reason: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "10")]
    pub audience_leave_theater_series_reason: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "11")]
    pub fullscreen_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "12")]
    pub pause_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "13")]
    pub clearscteen_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "14")]
    pub seek_count: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "15")]
    pub theater_mic_start_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "16")]
    pub theater_mic_end_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "17")]
    pub theater_close_mic_duration: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "18")]
    pub drama_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "19")]
    pub landscape_duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LocalIntelligentAlbumPackage {
    #[prost(string, optional, tag = "1")]
    pub main_album_caption: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub subtitle_album_caption: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub picture_count: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub video_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "5")]
    pub album_begin_timestamp: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "6")]
    pub album_end_timestamp: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "7")]
    pub album_location: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub cluster_method: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub cluster_rule: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "10")]
    pub is_local: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "11")]
    pub album_label: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "12")]
    pub alnum_position: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LocalMusicPackage {
    #[prost(string, optional, tag = "1")]
    pub file_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub file_size: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub title: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub artist: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub album: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct LoginSourcePackage {
    #[prost(int32, optional, tag = "1")]
    pub source: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub action_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub portal_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub source_ext_info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MagicFacePackage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub group_id: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "6")]
    pub index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "7")]
    pub segment_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub r#type: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "9")]
    pub parent_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub magic_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub magic_face_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "12")]
    pub show_cover_tag: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "13")]
    pub strategy_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "14")]
    pub req_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub log_params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MessagePackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "3")]
    pub aggregation: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "4")]
    pub aggregation_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub status: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub message_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub message_subtype: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub relationship_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub has_relationship_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub story_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub author_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MomentMessagePackage {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub tag_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "6")]
    pub reason: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub picture_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub location: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub at_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MoreInfoPackageV2 {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub index: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub vlaue: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub f41094tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub extra_info: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MorelistContentPackage {
    #[prost(string, optional, tag = "1")]
    pub author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub content_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "3")]
    pub content_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "4")]
    pub content_source: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MorelistPackage {
    #[prost(int32, optional, tag = "1")]
    pub morelist_type: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "2")]
    pub morelist_content_package: ::core::option::Option<MorelistContentPackage>,
    #[prost(uint64, optional, tag = "3")]
    pub morelist_show_start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub morelist_show_end_time: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MusicAdjustDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub human_voice_adjust_default: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(string, optional, tag = "2")]
    pub human_voice_adjust_offset: ::core::option::Option<
        ::prost::alloc::string::String,
    >,
    #[prost(uint32, optional, tag = "3")]
    pub human_voice_volume: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub accompaniment_volume: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub noise_reduction_on: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "6")]
    pub headset_return_on: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "7")]
    pub reverberation_effect: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MusicDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub category_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub llsid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "8")]
    pub c_source: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "9")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MusicLoadingStatusPackage {
    #[prost(int32, optional, tag = "1")]
    pub music_file_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub music_loading_mode: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub music_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub music_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub music_duration: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub download_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "7")]
    pub loading_duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MusicPlayStatPackageV2 {
    #[prost(int32, optional, tag = "1")]
    pub music_play_mode: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub music_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub music_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub music_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "5")]
    pub music_index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "6")]
    pub singer_user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "7")]
    pub music_duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "8")]
    pub played_duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NotificationPackageV2 {
    #[prost(string, optional, tag = "1")]
    pub notify_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub r#type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub aggregate: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub unread: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub can_follow: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "6")]
    pub follow_request_status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub from_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub text: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub click_area: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub ext_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "11")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "12")]
    pub index: ::core::option::Option<u32>,
    #[prost(float, optional, tag = "13")]
    pub value: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "14")]
    pub status: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PaymentPackage {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub provider: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "3")]
    pub currency: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PhotoPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub author_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "4")]
    pub exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "5")]
    pub index: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "6")]
    pub llsid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub keyword: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "8")]
    pub vertical_index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "9")]
    pub s_author_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "10")]
    pub full_screen_display: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "11")]
    pub draw_time: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "12")]
    pub tag_owner: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "13")]
    pub share_identify: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "14")]
    pub server_exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "15")]
    pub is_top: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub is_clip: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "17")]
    pub subtype: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "18")]
    pub atlastype: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "19")]
    pub extra_info: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "20")]
    pub support_landscape_mode: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "21")]
    pub landscape_screen_display: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "22")]
    pub photo_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "23")]
    pub source: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "24")]
    pub report_context: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "25")]
    pub video_play_stat: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "26")]
    pub feed_log_ctx: ::core::option::Option<FeedLogContext>,
    #[prost(bool, optional, tag = "27")]
    pub is_live_pictures: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PhotoSeekBarDragPackage {
    #[prost(uint64, optional, tag = "1")]
    pub start_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "2")]
    pub end_time: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub cost: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PhotoSegmentPackage {
    #[prost(uint32, optional, tag = "1")]
    pub width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub height: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProductionEditOperationPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub sub_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub tab_id: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub tab_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ProfilePackage {
    #[prost(string, optional, tag = "1")]
    pub visited_uid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "2")]
    pub style: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "3")]
    pub f41095tab: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RecordFpsInfoPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub min_fps: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub max_fps: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub average: ::core::option::Option<u64>,
    #[prost(bool, optional, tag = "6")]
    pub beauty: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "7")]
    pub camera_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "8")]
    pub width: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "9")]
    pub height: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "10")]
    pub encode_type: ::core::option::Option<i32>,
    #[prost(bool, optional, tag = "11")]
    pub change_preview_size: ::core::option::Option<bool>,
    #[prost(uint64, optional, tag = "12")]
    pub duration_ms: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RecordInfoPackage {
    #[prost(int32, optional, tag = "1")]
    pub encode_type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub cost: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub action: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RedPackPackage {
    #[prost(string, optional, tag = "1")]
    pub red_pack_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub red_pack_count: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub red_pack_time: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "4")]
    pub red_pack_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "5")]
    pub draw_prize_page: ::core::option::Option<i32>,
    #[prost(uint32, optional, tag = "6")]
    pub error_code: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "7")]
    pub error_msg: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub red_pack_money_count: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ResourceProgressPackage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(double, optional, tag = "2")]
    pub progress: ::core::option::Option<f64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ScreenPackage {
    #[prost(int32, optional, tag = "1")]
    pub orientation: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchResultPackage {
    #[prost(string, optional, tag = "1")]
    pub content_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub position: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub content_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "4")]
    pub keyword: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int32, optional, tag = "5")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "6")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "7")]
    pub exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub llsid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "9")]
    pub count: ::core::option::Option<u32>,
    #[prost(message, repeated, tag = "10")]
    pub photo_package: ::prost::alloc::vec::Vec<PhotoPackage>,
    #[prost(string, optional, tag = "11")]
    pub music_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "12")]
    pub allow_to_collect: ::core::option::Option<bool>,
    #[prost(string, optional, tag = "13")]
    pub secondary_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "14")]
    pub follow_user: ::core::option::Option<bool>,
    #[prost(message, repeated, tag = "15")]
    pub im_personal_session_package: ::prost::alloc::vec::Vec<ImPersonalSessionPackage>,
    #[prost(message, repeated, tag = "16")]
    pub im_group_session_package: ::prost::alloc::vec::Vec<ImGroupSessionPackage>,
    #[prost(uint64, optional, tag = "17")]
    pub show_time: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SeriesPackageV2 {
    #[prost(uint64, optional, tag = "1")]
    pub series_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub series_name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub author_id: ::core::option::Option<u64>,
    #[prost(uint32, optional, tag = "4")]
    pub episode_count: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "5")]
    pub is_series_ended: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "6")]
    pub index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "8")]
    pub s_series_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "9")]
    pub recommendation: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "10")]
    pub tag_id: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "11")]
    pub tag_name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SingerDetailPackage {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct SoundEffectPackage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "2")]
    pub reverb_level: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "3")]
    pub r#type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StickerInfoPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub secondary_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "4")]
    pub page_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct StyleStatusPackage {
    #[prost(string, optional, tag = "1")]
    pub style_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TagPackage {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub exp_tag: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "4")]
    pub index: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "5")]
    pub llsid: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "6")]
    pub photo_count: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "7")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "9")]
    pub secondary_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "10")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct TargetUserPackageV2 {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub is_friend: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "3")]
    pub relationship_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ThemePackage {
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub index: ::core::option::Option<u32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ThirdPartyAppPackage {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ThirdPartyBindPackage {
    #[prost(int32, optional, tag = "1")]
    pub platform: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ThirdPartyRecommendUserListItemPackage {
    #[prost(int32, optional, tag = "1")]
    pub source: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub user_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "3")]
    pub position: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UserPackage {
    #[prost(string, optional, tag = "1")]
    pub identity: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "2")]
    pub kwai_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "3")]
    pub index: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "4")]
    pub params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "5")]
    pub promotion_tag: ::core::option::Option<bool>,
    #[prost(int32, optional, tag = "6")]
    pub account_type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "7")]
    pub avatar_status: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "8")]
    pub respack_id: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct UserStatusPackageV2 {
    #[prost(string, optional, tag = "1")]
    pub id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bool, optional, tag = "2")]
    pub followed: ::core::option::Option<bool>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VideoClipDetailPackage {
    #[prost(bool, optional, tag = "1")]
    pub is_clipped: ::core::option::Option<bool>,
    #[prost(bool, optional, tag = "2")]
    pub is_rotated: ::core::option::Option<bool>,
    #[prost(message, optional, tag = "3")]
    pub origin_video_package: ::core::option::Option<VideoSegmentPackage>,
    #[prost(message, optional, tag = "4")]
    pub clipped_video_package: ::core::option::Option<VideoSegmentPackage>,
    #[prost(float, optional, tag = "5")]
    pub speed: ::core::option::Option<f32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct VideoEditFeaturesStatusPackage {
    #[prost(bool, optional, tag = "1")]
    pub cut: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "2")]
    pub filter_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "3")]
    pub music_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "4")]
    pub effect_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "5")]
    pub magic_index: ::core::option::Option<u32>,
    #[prost(bool, optional, tag = "6")]
    pub subtitle: ::core::option::Option<bool>,
    #[prost(uint32, optional, tag = "7")]
    pub sticker_index: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub transition_index: ::core::option::Option<u32>,
    #[prost(string, repeated, tag = "9")]
    pub filter: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "10")]
    pub music: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "11")]
    pub effect: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "12")]
    pub magic: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "13")]
    pub sticker: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "14")]
    pub transition: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "15")]
    pub magic_finger: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "16")]
    pub cover: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, repeated, tag = "17")]
    pub mosaic: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "18")]
    pub frame_duration: ::core::option::Option<u32>,
    #[prost(string, optional, tag = "19")]
    pub background: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "20")]
    pub crop: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "21")]
    pub trim: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct VideoEditOperationPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(string, optional, tag = "2")]
    pub sub_type: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "3")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "4")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag = "5")]
    pub extra_message: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct VideoEncodingDetailPackage {
    #[prost(int32, optional, tag = "2")]
    pub encode_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VideoPackage {
    #[prost(string, optional, tag = "1")]
    pub file_path: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint64, optional, tag = "2")]
    pub file_size: ::core::option::Option<u64>,
    #[prost(int32, optional, tag = "3")]
    pub codec: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "4")]
    pub duration: ::core::option::Option<u64>,
    #[prost(float, optional, tag = "5")]
    pub bitrate: ::core::option::Option<f32>,
    #[prost(string, optional, tag = "6")]
    pub x264_params: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(uint32, optional, tag = "7")]
    pub video_width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "8")]
    pub video_height: ::core::option::Option<u32>,
    #[prost(int32, optional, tag = "9")]
    pub skip_transcode_code: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VideoPreviewInfoPackage {
    #[prost(int32, optional, tag = "1")]
    pub scene: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "2")]
    pub player: ::core::option::Option<i32>,
    #[prost(message, optional, tag = "3")]
    pub video_info_package: ::core::option::Option<VideoSegmentPackage>,
    #[prost(uint64, optional, tag = "4")]
    pub prepare_duration: ::core::option::Option<u64>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VideoSegmentPackage {
    #[prost(uint32, optional, tag = "1")]
    pub width: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub height: ::core::option::Option<u32>,
    #[prost(uint64, optional, tag = "3")]
    pub duration: ::core::option::Option<u64>,
    #[prost(float, optional, tag = "4")]
    pub avg_fps: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "5")]
    pub max_fps: ::core::option::Option<f32>,
    #[prost(float, optional, tag = "6")]
    pub min_fps: ::core::option::Option<f32>,
    #[prost(int32, optional, tag = "7")]
    pub encode_type: ::core::option::Option<i32>,
    #[prost(int32, optional, tag = "8")]
    pub decode_type: ::core::option::Option<i32>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct VideoWatermarkDetailPackage {
    #[prost(int32, optional, tag = "1")]
    pub r#type: ::core::option::Option<i32>,
    #[prost(uint64, optional, tag = "2")]
    pub duration: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "3")]
    pub cost: ::core::option::Option<u64>,
    #[prost(uint64, optional, tag = "4")]
    pub length: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "5")]
    pub download_url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct VisitDetailPackage {
    #[prost(uint64, optional, tag = "1")]
    pub client_timestamp: ::core::option::Option<u64>,
    #[prost(string, optional, tag = "2")]
    pub url: ::core::option::Option<::prost::alloc::string::String>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchBeautyMakeUpStatusPackage {
    #[prost(message, repeated, tag = "1")]
    pub beauty_make_up_status_use_package: ::prost::alloc::vec::Vec<
        BeautyMakeUpStatusPackage,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CommentShowPackage {
    #[prost(message, repeated, tag = "1")]
    pub comment_package: ::prost::alloc::vec::Vec<CommentPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TagShowPackage {
    #[prost(message, repeated, tag = "1")]
    pub tag_package: ::prost::alloc::vec::Vec<TagPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PhotoShowPackage {
    #[prost(message, repeated, tag = "1")]
    pub photo_package: ::prost::alloc::vec::Vec<PhotoPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchVisitDetailPackage {
    #[prost(message, repeated, tag = "1")]
    pub visit_detail_package: ::prost::alloc::vec::Vec<VisitDetailPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchFeedShowCountPackage {
    #[prost(message, repeated, tag = "1")]
    pub feed_show_count_package: ::prost::alloc::vec::Vec<FeedShowCountPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchFeatureSwitchPackage {
    #[prost(message, repeated, tag = "1")]
    pub feature_switch_package: ::prost::alloc::vec::Vec<FeatureSwitchPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchUserPackage {
    #[prost(message, repeated, tag = "1")]
    pub user_package: ::prost::alloc::vec::Vec<UserPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MagicFaceShowPackage {
    #[prost(message, repeated, tag = "1")]
    pub magic_face_package: ::prost::alloc::vec::Vec<MagicFacePackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMusicDetailPackage {
    #[prost(message, repeated, tag = "1")]
    pub music_detail_package: ::prost::alloc::vec::Vec<MusicDetailPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchEditEffectPackage {
    #[prost(message, repeated, tag = "1")]
    pub edit_effect_package: ::prost::alloc::vec::Vec<EditEffectPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchThemePackage {
    #[prost(message, repeated, tag = "1")]
    pub theme_package: ::prost::alloc::vec::Vec<ThemePackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchCommodityDetailPackage {
    #[prost(message, repeated, tag = "1")]
    pub commodity_detail_package: ::prost::alloc::vec::Vec<CommodityDetailPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchFilterDetailPackage {
    #[prost(message, repeated, tag = "1")]
    pub filter_detail_package: ::prost::alloc::vec::Vec<FilterDetailPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchSeekBarDragPackage {
    #[prost(message, repeated, tag = "1")]
    pub seek_bar_drag_package: ::prost::alloc::vec::Vec<PhotoSeekBarDragPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchStickerInfoPackage {
    #[prost(message, repeated, tag = "1")]
    pub sticker_info_package: ::prost::alloc::vec::Vec<StickerInfoPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchMomentMessagePackage {
    #[prost(message, repeated, tag = "1")]
    pub moment_message_package: ::prost::alloc::vec::Vec<MomentMessagePackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchLocalIntelligentAlbumPackage {
    #[prost(message, repeated, tag = "1")]
    pub local_intelligent_album_package: ::prost::alloc::vec::Vec<
        LocalIntelligentAlbumPackage,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownloadResourcePackage {
    #[prost(message, repeated, tag = "1")]
    pub resource_progress_package: ::prost::alloc::vec::Vec<ResourceProgressPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BatchKuaishanVideoPackage {
    #[prost(message, repeated, tag = "1")]
    pub kuaishan_video_package: ::prost::alloc::vec::Vec<KuaishanVideoPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DanmakuShowPackage {
    #[prost(message, repeated, tag = "1")]
    pub danmaku_package: ::prost::alloc::vec::Vec<DanmakuPackage>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveEntranceType {
    Default = 0,
    MusicStation = 1,
}
impl LiveEntranceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "LiveEntranceType_Default",
            Self::MusicStation => "LiveEntranceType_Music_Station",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LiveEntranceType_Default" => Some(Self::Default),
            "LiveEntranceType_Music_Station" => Some(Self::MusicStation),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveSourceType {
    LsUnknown = 0,
    LsFeed = 1,
    LsPush = 2,
    LsLiveSubscription = 3,
    LsFollow = 4,
    LsHot = 5,
    LsNearby = 6,
    LsNearbyRoaming = 7,
    LsShare = 8,
    LsLivePk = 9,
    LsWeb = 10,
    LsSmallProgram = 11,
    LsFansTop = 12,
    LsPrivateMessage = 13,
    LsBroadcastGift = 14,
    LsBroadcastGiftRedPackage = 15,
    LsProfile = 16,
    LsLiveProfileCard = 17,
    LsLiveClosePage = 18,
    LsLiveMusicStationCaption = 19,
    LsProfileLike = 20,
    LsFeedDetailUserAvatar = 21,
    LsMusicStationUserAvatar = 22,
    LsMusicStationUserProductsPage = 23,
    LsNews = 24,
    LsLiveFollowChannel = 25,
    LsGamezoneLiveGameWidget = 26,
    LsGamezoneVideoGameTag = 27,
    LsGamezoneNearbyGameEntry = 28,
    LsGamezoneSearchGameEntry = 29,
    LsGamezoneSidebarEntry = 30,
    LsGamezoneLinkExternal = 31,
    LsGamezoneWeb = 32,
    LsVoicePartyAggregationRecommend = 33,
    LsVoicePartyAggregationNearby = 34,
    LsVoicePartyAggregationKtv = 35,
    LsVoicePartyAggregationTopic = 36,
    LsNearbyLive = 37,
    LsMusicStationHelp = 38,
    LsGamezoneTopictagGameSearchRecommend = 39,
    LsGamezoneTopictagGameSearchKeyword = 40,
    LsGamezoneTopictagGameDetail = 41,
    LsLivePushArrowRedpack = 42,
    LsMusicStationUserCenter = 43,
    LsMusicStationSixSixRing = 44,
    LsFollowCard = 45,
    LsFollowAggrCard = 46,
    LsFollowAutoPlay = 47,
    LsLiveWatchSidebar = 48,
    LsFeedDetailBroadcastGift = 49,
    LsGamezoneGameSubscribeMessage = 50,
    LsFollowCardUserAvatar = 51,
    LsHotLiveChannel = 52,
    LsGamezoneLabByGame = 53,
    LsFollowCardAutoEnter = 54,
    LsThanosLiveSquare = 55,
    LsMusicStationAggrgatePage = 56,
    LsMusicStationMyFollowNotice = 57,
    LsMusicStationTopGuideCard = 58,
    LsGamezoneAggregation = 59,
    LsRecoLiveSquareAggregatePage = 60,
    LsCameraChainLive = 61,
    LsDistrictRankLive = 62,
    LsNearbyResourceLocation = 63,
    LsVoicePartyChannelTopicItem = 64,
    LsLiveRobotPetContributeList = 65,
    LsLiveRobotPetSocialList = 66,
    LsThanosLiveSquareAggregatePage = 67,
    LsMusicStationKwaiVoice = 68,
    LsMusicStationKwaiVoiceMomment = 69,
    LsSearchMusicStationChannel = 70,
    LsMusicStationTagEntrance = 71,
    LsMusicStationKwaiVoiceEntrance = 72,
    LsMusicStationKwaiVoiceH5 = 73,
    LsFollowLive = 74,
    LsNotifications = 75,
    LsFeaturedLiveSquareAggregatePage = 76,
    LsMenuLiveSquareAggregatePage = 77,
    LsMenu = 78,
    LsGiftWheelExpensiveGift = 79,
    LsVoicePartyAggregationRecommendChannel = 80,
    LsSfPreheatTask = 81,
    LsSfMainBreakoutVenueResource = 82,
    LsGamecenterVideoFeeds = 83,
    LsSfentrance = 84,
    LsNearbyLiveSquareAggregatePage = 85,
    LsSf2020LiveSquareAggregatePage = 86,
    LsSf2020LiveThanksRedPackList = 87,
    LsSf2020LiveThanksRedPackNotification = 88,
    LsSf2020LiveThanksRedPackTokenPopup = 89,
    LsVoicePartyHotroomPandent = 90,
    LsSearch = 91,
    LsNebulaLiveSquareAggregatePage = 92,
    NewLiveMoreSquare = 93,
    MyFollowLive = 94,
    LsFollowReco = 95,
    LsGamezoneNewLiveGameTvTab = 96,
    LsFollowFva = 97,
    LsOperationH5 = 98,
    LsFansTopOrderHelpBuy = 99,
    LsNationRankLive = 100,
    LsSquareResourceLocation = 101,
    LsNebulaGoldLiveSquareAggregatePage = 102,
    LsNebulaHotPush = 103,
    LsHotPreviewLive = 104,
    LsBroadcastPush = 105,
    LsGameCenterCompetition = 106,
    LsNearbyLocalTv = 107,
    LsPkRankGameOpponent = 108,
    LsPkRankGameThisWeekList = 109,
    LsPkRankGameWinningStreakList = 110,
    LsPkRankGamePreweekTopList = 111,
    LsNebulaHotTips = 112,
    LsMoreSquareSearch = 113,
    LsSearchAladdinMore = 114,
    LsNewGameCenterDetail = 115,
    MusicStationHome = 116,
    MusicTagV1 = 117,
    MusicTagV2 = 118,
    TextMusicTag = 119,
    FrequentlyVisitedAuthor = 120,
    LsAutoProfile = 121,
    LsAssistantLivePush = 122,
    LiveFront = 123,
    RightHeadOfAuthor = 124,
    LsTopicHomepageAvatar = 125,
    LsTopicDetailAvatar = 126,
    LsGiftHint = 127,
    LsGuardianHead = 128,
    LsBottomSidebarFeatured = 129,
    LsFeaturedPreview = 130,
    LsLiveOnlineUserProfileCard = 131,
    LsLiveWeekRankProfileCard = 132,
    LsKuaixiangConvenience = 133,
    LsLiveOrderCalendar = 134,
    LsLiveOrderPrivateLetter = 135,
    LsBottomSidebarFeaturedSingleLine = 136,
    LsBottomSidebarFeaturedSingleLineAvatar = 137,
    LsBottomSidebarFeaturedDoubleLineAvatar = 138,
    LsLiveFrequentlyVisited = 139,
    LsHotPreviewLiveReco = 140,
    LsHotLive = 141,
    LsLiveOrderPlc = 142,
    LsLiveOrderPush = 143,
    NewLiveMoreSquareAvatar = 144,
    LsLiveShotMessage = 145,
    LsLiveGiftExpireShotMessage = 146,
    LsLiveSplashAd = 147,
    LsTagGameLive = 148,
    LsSquareResourceDistrictRank = 149,
    LsBusinessRankLive = 150,
    LsLiveOnline = 151,
    LsMenuKwaishopHomepage = 152,
    LsFollowTimeTab = 153,
    LsLiveSquareSlideUpdown = 154,
    LsLiveWatchNoMoreLivePopLiveCard = 155,
    LsLiveWatchNoMoreLivePopButton = 156,
    LsExitLiveWatchRecommendedLiveCard = 157,
    LsExitLiveWatchRecommendedLiveAuthorOvert = 158,
    LsLiveWatchNoMoreLivePopAuthorOvert = 159,
    LsKsnebulaCoinControlModule = 160,
    LsKsnebulaCoinTaskCard = 161,
    LsBusinessCoinTaskCenter = 162,
    LsHotChannelKwaishopHomepage = 163,
    LsTopNavigationKwaishopHomepage = 164,
    LsTabbarNearbyChannelKwaishopHomepage = 165,
    LsChannelPageKwaishopHomepage = 166,
    LsCloseFromAnchorLiveEnterOtherLive = 167,
    LsCoronaGameBanner = 168,
    LsCoronaGameSubChannel = 169,
    LsActivityRedPacketRain = 170,
    LsLivePkAdversaryScreen = 171,
    LsLiveOnlineAdversaryScreen = 172,
    LsLiveSendRedPacketHeadButton = 173,
    LsGamezoneAccompanySquare = 174,
    LsLiveReceiveRedPacketRecommendList = 175,
    LsFindVerticalFieldFeedCard = 176,
    LsNearbyFeedCard = 177,
    LsFindFeedCard = 178,
    LsGlobalLiveRoom = 179,
    LsGamezoneLivePlayTogetherTab = 180,
    LsKwaishopPaySuccessLaotie = 181,
    LsKwaishopBusinessCoinLaotie = 182,
    LsNavigationModuleCard = 183,
    LsMoreModuleCard = 184,
    LsKwaishopBuyerHomeNewbuyerCoupon = 185,
    LsThanosFindFeaturedRecoCard = 186,
    LivePreviewUnBeautifulTime = 187,
    LsLiveWatchTopicCirclePanel = 188,
    LsExploreCard = 189,
    LsFriends = 190,
    LsKwaishopMarchantMorecategory = 191,
    LsKwaishopLaborDayCollectCard = 192,
    LsAppearanceHourlyRank = 193,
    LsNearbyTopRankLive = 194,
    LsLiveCommonNotificationShow = 195,
    LsLiveDspFeedAd = 196,
    LsNewsFeed = 197,
    LsLiveGoldenHourlyRank = 198,
    LsLiveWatchTopicCirclePanelReferealAuchor = 199,
    LsKwaishopLiveTrustCardBannerCoupon = 200,
    LsKwaishopEshopShoppingDay = 201,
    LsAwardVideoAd = 202,
    LsExploreLive = 203,
    LivePreviewMerchantCouponExplain = 204,
    LsFollowToAggregationLiveCard = 205,
    LsExplorePopularDiversionPosition = 206,
    LsLiveVoicePartyListFind = 207,
    LsLiveVoicePartyListFilmFind = 208,
    LsMomentLive = 209,
    LsKwaishopEshopCentLottery = 210,
    LsFollowFvaUserRecommend = 211,
    LsKwaishopEshopOlympics = 212,
    LsKwaishopTrustChannel = 213,
    LsKwaishopOlympicsTaskNewbuyer = 214,
    LsKwaishopOlympicsWalletSearch = 215,
    LsKwaishopOlympicsNewbuyerCoupon = 216,
    LsLiveGroupChatNotice = 217,
    LsFindLiveTabHourlyRank = 218,
    LsFindLiveTabOwnLive = 219,
    LsOlymicH5HomepageFindWatch = 220,
    SocialGroupChatMessageDetailShowPhoto = 221,
    SocialMyProfile = 222,
    FindChannelAuthorColumnLiveCard = 223,
    LsSingleLinePhotoFeedUserAvatarRightBar = 224,
    LsSingleLinePhotoFeedUserAvatarBottomBar = 225,
    LsSingleLinePhotoFeedSidebarShowPhoto = 226,
    LsFindVoicePartyOneClick = 227,
    LsLiveVoicePartyOneClick = 228,
    LsLiveQixiActivityRedPacket = 229,
    LsLiveSuperDiversionPositionGift = 230,
    LsGzoneLiveHourRank = 231,
    LsKwaishopQixiFeed = 232,
    LsInterstitialAd = 233,
    LsNearbyVoicePartyOneClick = 234,
    LsGzoneLiveKshellRank = 235,
    LsGamezoneBetSquare = 236,
    LsProfileBackgroud = 237,
    LsActivitySuperFansGroupPage = 238,
    LsSingleLinePhotoFeedAtFriend = 239,
    LsPopularityRankLive = 240,
    LsActivitySuperAuthorChallengePage = 241,
    LsExitLiveWatchRecommendedLiveSeeNow = 242,
    LsKsnebulaCoinTaskListWatchLive = 243,
    LsKsnebulaCoinTaskListSendLiveGifts = 244,
    LsKwaishopDoubleElevenLiveCommodity = 245,
    LsKwaishopDoubleElevenRecommend = 246,
    LsKwaishopDoubleElevenSubLiveCommodity = 247,
    LsKwaishopDoubleElevenCouponLive = 248,
    LsLiveShuangshiyiActivityRedPacket = 249,
    LsKwaishopDoubleElevenOperateRecommend = 250,
    LsKwaishopMerchantAnchorRecommend = 251,
    LsKwaishopMerchantAnchorRecommendLive = 252,
    LsKsCoinTaskListWatchLive = 253,
    LsKsCoinTaskListSendLiveGifts = 254,
    LsSpecialFollowWidgetPopup = 255,
    LsKwaiActivePendantUserHead = 256,
    LsLiveNiandushengdiainActivityRedPacket = 257,
    LsLiveActivityChunjieContentRecoLiveHead = 258,
    LsLiveActivityChunjieContentTrailerHead = 259,
    LsLiveActivityChunjieContentHotCard = 260,
    LsBuckcarLiveCard = 261,
    LsBuckcarEnterLiveButton = 262,
    LsLiveTakeAShot = 263,
    LsNearbyMapLive = 264,
    LsNearbyMapHot = 265,
    LsLiveNiandushengdiainActivityHotCrad = 266,
    LsLiveNiandushengdiainActivityLiveCard = 267,
    LsLiveNiandushengdiainActivityHotWord = 268,
    LsActivityHomepageH5TemporaryEntrance = 269,
    LsOpActivityMainPageBanner = 270,
    LsCnyTaskRechange = 271,
    LsCnyWarmUp = 272,
    LsCnyTaskFansgroup = 273,
    LsCnyTaskWish = 274,
    LsMyProfileWishEnter = 275,
    LsNearbyPostGroup = 276,
    LsEspMobileH5 = 277,
    LsFollowPreview = 278,
    LsCnyWishRoomNotifications = 279,
    LsLiveHourlyRankTopAuthor = 280,
    LsNewsSlide = 281,
    LsTvStation = 282,
    LsFollowingListHead = 283,
    LsSingleLinePhotoFeedUserAvatarRightBarGreatVideo = 284,
    LsSingleLinePhotoFeedUserAvatarBottomBarGreatVideo = 285,
    LsSingleLinePhotoFeedSidebarShowPhotoGreatVideo = 286,
    LsLiveMemberManagementListHead = 287,
    LsSearchListLive = 288,
    LsSearchListShop = 289,
    LiveVoicePartyGuideMic = 290,
    LsKissGiftH5Head = 293,
    LsLiveInteractivegameTv = 296,
    LsMerchantCsCrm = 297,
    LsAllianceProfile = 298,
    LsMerchantGoodsListItem = 299,
    LsNeaabyPreview = 300,
    LsFollowPreviewSecond = 301,
    LsKsnebulaCoinExchangePopup = 302,
    LsKsnebulaGoldCoinExchangeList = 303,
    LsLiveMultiPk = 304,
    LsAdWatchListDetail = 305,
    LsLivePush = 306,
    LsKsnebulaCoinTaskSpeedCard = 307,
    LsLvieBlindDataWriteResultPageButton = 308,
    LsWishLiveWishPopup = 309,
    LsDeliveryJobLiveAvatar = 310,
    LsMerchantBuyerMallTab = 311,
    LsDpChanel = 312,
    LsMerchantLxjAvatar = 313,
    LsMerchantLxjDetailAvatar = 314,
    LsSimpleBottomExpention = 315,
    LsLiveHotspotDetail = 316,
    LsPoiDetailLiveModule = 317,
    LsHourlyRankCityLive = 318,
    LsAndHongmengCardH5Entry = 319,
    LsLivePostRank = 320,
    LsKwaishopReco = 321,
    LsBroadcastGiftHighValue = 322,
    LsLiveCommentNotice = 323,
    LsHotInsideFeedPreviewLive = 324,
    LsHotSearchKboxCardLive = 325,
    LsHotSingleAggrCardLive = 326,
    LsFindCardUserAvatar = 327,
    LsLiteSideLiveCard = 328,
    LsLiteSideReturn = 329,
    LsGrabcardAutoEnterActivityLive = 330,
    LsAnchorEndpageRecoLive = 331,
    LsLiveMaskMoreLive = 332,
    LsLive20234tab = 333,
    LsProfileFangchanCard = 334,
    LsFangchanMarketActivityPage = 335,
    LsXtabLifeCardLivingPhoto = 336,
    LsHotspotPreviewLive = 337,
    LsNearbyMapLiveVoice = 338,
    LsLiveReserveSticker = 339,
    LsTvStationCard = 340,
    LsCoinTaskGandiCard = 341,
    LsHotLiveChannelPreview = 342,
    LsSchoolMap = 343,
    LsSearchCommodityMiniPreview = 344,
    LsFeatureFloatingLayer = 345,
    LsLiveGuidePopup = 346,
    LsInteractiveInteraction = 347,
    LsMenuVoiceParty = 348,
    LsDanmuRankLive = 349,
    LsLiveNewRank = 350,
    LsHotTalk = 351,
    LsSingleLinePhotoFeedQuickInteractive = 352,
    LsSimpleBottomCard = 353,
    LsTalentList = 354,
    LsKwaishopFloatingWindow = 355,
    LsFindJobSquare = 356,
    LsNearbySimple = 357,
    LsFindFeedSimple = 358,
    LsBarrageGameplayCenterMainPage = 359,
    LsRvipFeaturedChannel = 360,
    LsDanmuGameplay = 361,
    LsProfileButtonGoLive = 362,
    LsMenuOftenWatch = 363,
    LsSinglePlaceTag = 364,
    LsNearbyDoubleSimple = 365,
    LsDanmuScreenTreasureBoxViewingTask = 366,
    LsTuanboRankLive = 367,
    LsGonggeRankLive = 368,
    LsCommonDetailPreview = 369,
    LsSingleBigCard = 370,
    LsPhotoAnchorName = 371,
    LsDoubleFindNewFollowCard = 372,
    LsBanbanLiveCard = 373,
    LsIncreaseGoldCard = 374,
    LsFindFriendsPymk = 375,
    LsWidgeterLiveReminder = 376,
    LsPushPopup = 377,
    LsFollowSeeMore = 378,
    LsWidgeterLiveReminderBookmark = 379,
    LsSimpleLivePush = 380,
    LsProfileDesktopWidget = 381,
}
impl LiveSourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LsUnknown => "LS_UNKNOWN",
            Self::LsFeed => "LS_FEED",
            Self::LsPush => "LS_PUSH",
            Self::LsLiveSubscription => "LS_LIVE_SUBSCRIPTION",
            Self::LsFollow => "LS_FOLLOW",
            Self::LsHot => "LS_HOT",
            Self::LsNearby => "LS_NEARBY",
            Self::LsNearbyRoaming => "LS_NEARBY_ROAMING",
            Self::LsShare => "LS_SHARE",
            Self::LsLivePk => "LS_LIVE_PK",
            Self::LsWeb => "LS_WEB",
            Self::LsSmallProgram => "LS_SMALL_PROGRAM",
            Self::LsFansTop => "LS_FANS_TOP",
            Self::LsPrivateMessage => "LS_PRIVATE_MESSAGE",
            Self::LsBroadcastGift => "LS_BROADCAST_GIFT",
            Self::LsBroadcastGiftRedPackage => "LS_BROADCAST_GIFT_RED_PACKAGE",
            Self::LsProfile => "LS_PROFILE",
            Self::LsLiveProfileCard => "LS_LIVE_PROFILE_CARD",
            Self::LsLiveClosePage => "LS_LIVE_CLOSE_PAGE",
            Self::LsLiveMusicStationCaption => "LS_LIVE_MUSIC_STATION_CAPTION",
            Self::LsProfileLike => "LS_PROFILE_LIKE",
            Self::LsFeedDetailUserAvatar => "LS_FEED_DETAIL_USER_AVATAR",
            Self::LsMusicStationUserAvatar => "LS_MUSIC_STATION_USER_AVATAR",
            Self::LsMusicStationUserProductsPage => "LS_MUSIC_STATION_USER_PRODUCTS_PAGE",
            Self::LsNews => "LS_NEWS",
            Self::LsLiveFollowChannel => "LS_LIVE_FOLLOW_CHANNEL",
            Self::LsGamezoneLiveGameWidget => "LS_GAMEZONE_LIVE_GAME_WIDGET",
            Self::LsGamezoneVideoGameTag => "LS_GAMEZONE_VIDEO_GAME_TAG",
            Self::LsGamezoneNearbyGameEntry => "LS_GAMEZONE_NEARBY_GAME_ENTRY",
            Self::LsGamezoneSearchGameEntry => "LS_GAMEZONE_SEARCH_GAME_ENTRY",
            Self::LsGamezoneSidebarEntry => "LS_GAMEZONE_SIDEBAR_ENTRY",
            Self::LsGamezoneLinkExternal => "LS_GAMEZONE_LINK_EXTERNAL",
            Self::LsGamezoneWeb => "LS_GAMEZONE_WEB",
            Self::LsVoicePartyAggregationRecommend => {
                "LS_VOICE_PARTY_AGGREGATION_RECOMMEND"
            }
            Self::LsVoicePartyAggregationNearby => "LS_VOICE_PARTY_AGGREGATION_NEARBY",
            Self::LsVoicePartyAggregationKtv => "LS_VOICE_PARTY_AGGREGATION_KTV",
            Self::LsVoicePartyAggregationTopic => "LS_VOICE_PARTY_AGGREGATION_TOPIC",
            Self::LsNearbyLive => "LS_NEARBY_LIVE",
            Self::LsMusicStationHelp => "LS_MUSIC_STATION_HELP",
            Self::LsGamezoneTopictagGameSearchRecommend => {
                "LS_GAMEZONE_TOPICTAG_GAME_SEARCH_RECOMMEND"
            }
            Self::LsGamezoneTopictagGameSearchKeyword => {
                "LS_GAMEZONE_TOPICTAG_GAME_SEARCH_KEYWORD"
            }
            Self::LsGamezoneTopictagGameDetail => "LS_GAMEZONE_TOPICTAG_GAME_DETAIL",
            Self::LsLivePushArrowRedpack => "LS_LIVE_PUSH_ARROW_REDPACK",
            Self::LsMusicStationUserCenter => "LS_MUSIC_STATION_USER_CENTER",
            Self::LsMusicStationSixSixRing => "LS_MUSIC_STATION_SIX_SIX_RING",
            Self::LsFollowCard => "LS_FOLLOW_CARD",
            Self::LsFollowAggrCard => "LS_FOLLOW_AGGR_CARD",
            Self::LsFollowAutoPlay => "LS_FOLLOW_AUTO_PLAY",
            Self::LsLiveWatchSidebar => "LS_LIVE_WATCH_SIDEBAR",
            Self::LsFeedDetailBroadcastGift => "LS_FEED_DETAIL_BROADCAST_GIFT",
            Self::LsGamezoneGameSubscribeMessage => "LS_GAMEZONE_GAME_SUBSCRIBE_MESSAGE",
            Self::LsFollowCardUserAvatar => "LS_FOLLOW_CARD_USER_AVATAR",
            Self::LsHotLiveChannel => "LS_HOT_LIVE_CHANNEL",
            Self::LsGamezoneLabByGame => "LS_GAMEZONE_LAB_BY_GAME",
            Self::LsFollowCardAutoEnter => "LS_FOLLOW_CARD_AUTO_ENTER",
            Self::LsThanosLiveSquare => "LS_THANOS_LIVE_SQUARE",
            Self::LsMusicStationAggrgatePage => "LS_MUSIC_STATION_AGGRGATE_PAGE",
            Self::LsMusicStationMyFollowNotice => "LS_MUSIC_STATION_MY_FOLLOW_NOTICE",
            Self::LsMusicStationTopGuideCard => "LS_MUSIC_STATION_TOP_GUIDE_CARD",
            Self::LsGamezoneAggregation => "LS_GAMEZONE_AGGREGATION",
            Self::LsRecoLiveSquareAggregatePage => "LS_RECO_LIVE_SQUARE_AGGREGATE_PAGE",
            Self::LsCameraChainLive => "LS_CAMERA_CHAIN_LIVE",
            Self::LsDistrictRankLive => "LS_DISTRICT_RANK_LIVE",
            Self::LsNearbyResourceLocation => "LS_NEARBY_RESOURCE_LOCATION",
            Self::LsVoicePartyChannelTopicItem => "LS_VOICE_PARTY_CHANNEL_TOPIC_ITEM",
            Self::LsLiveRobotPetContributeList => "LS_LIVE_ROBOT_PET_CONTRIBUTE_LIST",
            Self::LsLiveRobotPetSocialList => "LS_LIVE_ROBOT_PET_SOCIAL_LIST",
            Self::LsThanosLiveSquareAggregatePage => {
                "LS_THANOS_LIVE_SQUARE_AGGREGATE_PAGE"
            }
            Self::LsMusicStationKwaiVoice => "LS_MUSIC_STATION_KWAI_VOICE",
            Self::LsMusicStationKwaiVoiceMomment => "LS_MUSIC_STATION_KWAI_VOICE_MOMMENT",
            Self::LsSearchMusicStationChannel => "LS_SEARCH_MUSIC_STATION_CHANNEL",
            Self::LsMusicStationTagEntrance => "LS_MUSIC_STATION_TAG_ENTRANCE",
            Self::LsMusicStationKwaiVoiceEntrance => {
                "LS_MUSIC_STATION_KWAI_VOICE_ENTRANCE"
            }
            Self::LsMusicStationKwaiVoiceH5 => "LS_MUSIC_STATION_KWAI_VOICE_H5",
            Self::LsFollowLive => "LS_FOLLOW_LIVE",
            Self::LsNotifications => "LS_NOTIFICATIONS",
            Self::LsFeaturedLiveSquareAggregatePage => {
                "LS_FEATURED_LIVE_SQUARE_AGGREGATE_PAGE"
            }
            Self::LsMenuLiveSquareAggregatePage => "LS_MENU_LIVE_SQUARE_AGGREGATE_PAGE",
            Self::LsMenu => "LS_MENU",
            Self::LsGiftWheelExpensiveGift => "LS_GIFT_WHEEL_EXPENSIVE_GIFT",
            Self::LsVoicePartyAggregationRecommendChannel => {
                "LS_VOICE_PARTY_AGGREGATION_RECOMMEND_CHANNEL"
            }
            Self::LsSfPreheatTask => "LS_SF_PREHEAT_TASK",
            Self::LsSfMainBreakoutVenueResource => "LS_SF_MAIN_BREAKOUT_VENUE_RESOURCE",
            Self::LsGamecenterVideoFeeds => "LS_GAMECENTER_VIDEO_FEEDS",
            Self::LsSfentrance => "LS_SFENTRANCE",
            Self::LsNearbyLiveSquareAggregatePage => {
                "LS_NEARBY_LIVE_SQUARE_AGGREGATE_PAGE"
            }
            Self::LsSf2020LiveSquareAggregatePage => {
                "LS_SF2020_LIVE_SQUARE_AGGREGATE_PAGE"
            }
            Self::LsSf2020LiveThanksRedPackList => "LS_SF2020_LIVE_THANKS_RED_PACK_LIST",
            Self::LsSf2020LiveThanksRedPackNotification => {
                "LS_SF2020_LIVE_THANKS_RED_PACK_NOTIFICATION"
            }
            Self::LsSf2020LiveThanksRedPackTokenPopup => {
                "LS_SF2020_LIVE_THANKS_RED_PACK_TOKEN_POPUP"
            }
            Self::LsVoicePartyHotroomPandent => "LS_VOICE_PARTY_HOTROOM_PANDENT",
            Self::LsSearch => "LS_SEARCH",
            Self::LsNebulaLiveSquareAggregatePage => {
                "LS_NEBULA_LIVE_SQUARE_AGGREGATE_PAGE"
            }
            Self::NewLiveMoreSquare => "NEW_LIVE_MORE_SQUARE",
            Self::MyFollowLive => "MY_FOLLOW_LIVE",
            Self::LsFollowReco => "LS_FOLLOW_RECO",
            Self::LsGamezoneNewLiveGameTvTab => "LS_GAMEZONE_NEW_LIVE_GAME_TV_TAB",
            Self::LsFollowFva => "LS_FOLLOW_FVA",
            Self::LsOperationH5 => "LS_OPERATION_H5",
            Self::LsFansTopOrderHelpBuy => "LS_FANS_TOP_ORDER_HELP_BUY",
            Self::LsNationRankLive => "LS_NATION_RANK_LIVE",
            Self::LsSquareResourceLocation => "LS_SQUARE_RESOURCE_LOCATION",
            Self::LsNebulaGoldLiveSquareAggregatePage => {
                "LS_NEBULA_GOLD_LIVE_SQUARE_AGGREGATE_PAGE"
            }
            Self::LsNebulaHotPush => "LS_NEBULA_HOT_PUSH",
            Self::LsHotPreviewLive => "LS_HOT_PREVIEW_LIVE",
            Self::LsBroadcastPush => "LS_BROADCAST_PUSH",
            Self::LsGameCenterCompetition => "LS_GAME_CENTER_COMPETITION",
            Self::LsNearbyLocalTv => "LS_NEARBY_LOCAL_TV",
            Self::LsPkRankGameOpponent => "LS_PK_RANK_GAME_OPPONENT",
            Self::LsPkRankGameThisWeekList => "LS_PK_RANK_GAME_THIS_WEEK_LIST",
            Self::LsPkRankGameWinningStreakList => "LS_PK_RANK_GAME_WINNING_STREAK_LIST",
            Self::LsPkRankGamePreweekTopList => "LS_PK_RANK_GAME_PREWEEK_TOP_LIST",
            Self::LsNebulaHotTips => "LS_NEBULA_HOT_TIPS",
            Self::LsMoreSquareSearch => "LS_MORE_SQUARE_SEARCH",
            Self::LsSearchAladdinMore => "LS_SEARCH_ALADDIN_MORE",
            Self::LsNewGameCenterDetail => "LS_NEW_GAME_CENTER_DETAIL",
            Self::MusicStationHome => "MUSIC_STATION_HOME",
            Self::MusicTagV1 => "MUSIC_TAG_V1",
            Self::MusicTagV2 => "MUSIC_TAG_V2",
            Self::TextMusicTag => "TEXT_MUSIC_TAG",
            Self::FrequentlyVisitedAuthor => "FREQUENTLY_VISITED_AUTHOR",
            Self::LsAutoProfile => "LS_AUTO_PROFILE",
            Self::LsAssistantLivePush => "LS_ASSISTANT_LIVE_PUSH",
            Self::LiveFront => "LIVE_FRONT",
            Self::RightHeadOfAuthor => "RIGHT_HEAD_OF_AUTHOR",
            Self::LsTopicHomepageAvatar => "LS_TOPIC_HOMEPAGE_AVATAR",
            Self::LsTopicDetailAvatar => "LS_TOPIC_DETAIL_AVATAR",
            Self::LsGiftHint => "LS_GIFT_HINT",
            Self::LsGuardianHead => "LS_GUARDIAN_HEAD",
            Self::LsBottomSidebarFeatured => "LS_BOTTOM_SIDEBAR_FEATURED",
            Self::LsFeaturedPreview => "LS_FEATURED_PREVIEW",
            Self::LsLiveOnlineUserProfileCard => "LS_LIVE_ONLINE_USER_PROFILE_CARD",
            Self::LsLiveWeekRankProfileCard => "LS_LIVE_WEEK_RANK_PROFILE_CARD",
            Self::LsKuaixiangConvenience => "LS_KUAIXIANG_CONVENIENCE",
            Self::LsLiveOrderCalendar => "LS_LIVE_ORDER_CALENDAR",
            Self::LsLiveOrderPrivateLetter => "LS_LIVE_ORDER_PRIVATE_LETTER",
            Self::LsBottomSidebarFeaturedSingleLine => {
                "LS_BOTTOM_SIDEBAR_FEATURED_SINGLE_LINE"
            }
            Self::LsBottomSidebarFeaturedSingleLineAvatar => {
                "LS_BOTTOM_SIDEBAR_FEATURED_SINGLE_LINE_AVATAR"
            }
            Self::LsBottomSidebarFeaturedDoubleLineAvatar => {
                "LS_BOTTOM_SIDEBAR_FEATURED_DOUBLE_LINE_AVATAR"
            }
            Self::LsLiveFrequentlyVisited => "LS_LIVE_FREQUENTLY_VISITED",
            Self::LsHotPreviewLiveReco => "LS_HOT_PREVIEW_LIVE_RECO",
            Self::LsHotLive => "LS_HOT_LIVE",
            Self::LsLiveOrderPlc => "LS_LIVE_ORDER_PLC",
            Self::LsLiveOrderPush => "LS_LIVE_ORDER_PUSH",
            Self::NewLiveMoreSquareAvatar => "NEW_LIVE_MORE_SQUARE_AVATAR",
            Self::LsLiveShotMessage => "LS_LIVE_SHOT_MESSAGE",
            Self::LsLiveGiftExpireShotMessage => "LS_LIVE_GIFT_EXPIRE_SHOT_MESSAGE",
            Self::LsLiveSplashAd => "LS_LIVE_SPLASH_AD",
            Self::LsTagGameLive => "LS_TAG_GAME_LIVE",
            Self::LsSquareResourceDistrictRank => "LS_SQUARE_RESOURCE_DISTRICT_RANK",
            Self::LsBusinessRankLive => "LS_BUSINESS_RANK_LIVE",
            Self::LsLiveOnline => "LS_LIVE_ONLINE",
            Self::LsMenuKwaishopHomepage => "LS_MENU_KWAISHOP_HOMEPAGE",
            Self::LsFollowTimeTab => "LS_FOLLOW_TIME_TAB",
            Self::LsLiveSquareSlideUpdown => "LS_LIVE_SQUARE_SLIDE_UPDOWN",
            Self::LsLiveWatchNoMoreLivePopLiveCard => {
                "LS_LIVE_WATCH_NO_MORE_LIVE_POP_LIVE_CARD"
            }
            Self::LsLiveWatchNoMoreLivePopButton => {
                "LS_LIVE_WATCH_NO_MORE_LIVE_POP_BUTTON"
            }
            Self::LsExitLiveWatchRecommendedLiveCard => {
                "LS_EXIT_LIVE_WATCH_RECOMMENDED_LIVE_CARD"
            }
            Self::LsExitLiveWatchRecommendedLiveAuthorOvert => {
                "LS_EXIT_LIVE_WATCH_RECOMMENDED_LIVE_AUTHOR_OVERT"
            }
            Self::LsLiveWatchNoMoreLivePopAuthorOvert => {
                "LS_LIVE_WATCH_NO_MORE_LIVE_POP_AUTHOR_OVERT"
            }
            Self::LsKsnebulaCoinControlModule => "LS_KSNEBULA_COIN_CONTROL_MODULE",
            Self::LsKsnebulaCoinTaskCard => "LS_KSNEBULA_COIN_TASK_CARD",
            Self::LsBusinessCoinTaskCenter => "LS_BUSINESS_COIN_TASK_CENTER",
            Self::LsHotChannelKwaishopHomepage => "LS_HOT_CHANNEL_KWAISHOP_HOMEPAGE",
            Self::LsTopNavigationKwaishopHomepage => {
                "LS_TOP_NAVIGATION_KWAISHOP_HOMEPAGE"
            }
            Self::LsTabbarNearbyChannelKwaishopHomepage => {
                "LS_TABBAR_NEARBY_CHANNEL_KWAISHOP_HOMEPAGE"
            }
            Self::LsChannelPageKwaishopHomepage => "LS_CHANNEL_PAGE_KWAISHOP_HOMEPAGE",
            Self::LsCloseFromAnchorLiveEnterOtherLive => {
                "LS_CLOSE_FROM_ANCHOR_LIVE_ENTER_OTHER_LIVE"
            }
            Self::LsCoronaGameBanner => "LS_CORONA_GAME_BANNER",
            Self::LsCoronaGameSubChannel => "LS_CORONA_GAME_SUB_CHANNEL",
            Self::LsActivityRedPacketRain => "LS_ACTIVITY_RED_PACKET_RAIN",
            Self::LsLivePkAdversaryScreen => "LS_LIVE_PK_ADVERSARY_SCREEN",
            Self::LsLiveOnlineAdversaryScreen => "LS_LIVE_ONLINE_ADVERSARY_SCREEN",
            Self::LsLiveSendRedPacketHeadButton => "LS_LIVE_SEND_RED_PACKET_HEAD_BUTTON",
            Self::LsGamezoneAccompanySquare => "LS_GAMEZONE_ACCOMPANY_SQUARE",
            Self::LsLiveReceiveRedPacketRecommendList => {
                "LS_LIVE_RECEIVE_RED_PACKET_RECOMMEND_LIST"
            }
            Self::LsFindVerticalFieldFeedCard => "LS_FIND_VERTICAL_FIELD_FEED_CARD",
            Self::LsNearbyFeedCard => "LS_NEARBY_FEED_CARD",
            Self::LsFindFeedCard => "LS_FIND_FEED_CARD",
            Self::LsGlobalLiveRoom => "LS_GLOBAL_LIVE_ROOM",
            Self::LsGamezoneLivePlayTogetherTab => "LS_GAMEZONE_LIVE_PLAY_TOGETHER_TAB",
            Self::LsKwaishopPaySuccessLaotie => "LS_KWAISHOP_PAY_SUCCESS_LAOTIE",
            Self::LsKwaishopBusinessCoinLaotie => "LS_KWAISHOP_BUSINESS_COIN_LAOTIE",
            Self::LsNavigationModuleCard => "LS_NAVIGATION_MODULE_CARD",
            Self::LsMoreModuleCard => "LS_MORE_MODULE_CARD",
            Self::LsKwaishopBuyerHomeNewbuyerCoupon => {
                "LS_KWAISHOP_BUYER_HOME_NEWBUYER_COUPON"
            }
            Self::LsThanosFindFeaturedRecoCard => "LS_THANOS_FIND_FEATURED_RECO_CARD",
            Self::LivePreviewUnBeautifulTime => "LIVE_PREVIEW_UN_BEAUTIFUL_TIME",
            Self::LsLiveWatchTopicCirclePanel => "LS_LIVE_WATCH_TOPIC_CIRCLE_PANEL",
            Self::LsExploreCard => "LS_EXPLORE_CARD",
            Self::LsFriends => "LS_FRIENDS",
            Self::LsKwaishopMarchantMorecategory => "LS_KWAISHOP_MARCHANT_MORECATEGORY",
            Self::LsKwaishopLaborDayCollectCard => "LS_KWAISHOP_LABOR_DAY_COLLECT_CARD",
            Self::LsAppearanceHourlyRank => "LS_APPEARANCE_HOURLY_RANK",
            Self::LsNearbyTopRankLive => "LS_NEARBY_TOP_RANK_LIVE",
            Self::LsLiveCommonNotificationShow => "LS_LIVE_COMMON_NOTIFICATION_SHOW",
            Self::LsLiveDspFeedAd => "LS_LIVE_DSP_FEED_AD",
            Self::LsNewsFeed => "LS_NEWS_FEED",
            Self::LsLiveGoldenHourlyRank => "LS_LIVE_GOLDEN_HOURLY_RANK",
            Self::LsLiveWatchTopicCirclePanelReferealAuchor => {
                "LS_LIVE_WATCH_TOPIC_CIRCLE_PANEL_REFEREAL_AUCHOR"
            }
            Self::LsKwaishopLiveTrustCardBannerCoupon => {
                "LS_KWAISHOP_LIVE_TRUST_CARD_BANNER_COUPON"
            }
            Self::LsKwaishopEshopShoppingDay => "LS_KWAISHOP_ESHOP_SHOPPING_DAY",
            Self::LsAwardVideoAd => "LS_AWARD_VIDEO_AD",
            Self::LsExploreLive => "LS_EXPLORE_LIVE",
            Self::LivePreviewMerchantCouponExplain => {
                "LIVE_PREVIEW_MERCHANT_COUPON_EXPLAIN"
            }
            Self::LsFollowToAggregationLiveCard => "LS_FOLLOW_TO_AGGREGATION_LIVE_CARD",
            Self::LsExplorePopularDiversionPosition => {
                "LS_EXPLORE_POPULAR_DIVERSION_POSITION"
            }
            Self::LsLiveVoicePartyListFind => "LS_LIVE_VOICE_PARTY_LIST_FIND",
            Self::LsLiveVoicePartyListFilmFind => "LS_LIVE_VOICE_PARTY_LIST_FILM_FIND",
            Self::LsMomentLive => "LS_MOMENT_LIVE",
            Self::LsKwaishopEshopCentLottery => "LS_KWAISHOP_ESHOP_CENT_LOTTERY",
            Self::LsFollowFvaUserRecommend => "LS_FOLLOW_FVA_USER_RECOMMEND",
            Self::LsKwaishopEshopOlympics => "LS_KWAISHOP_ESHOP_OLYMPICS",
            Self::LsKwaishopTrustChannel => "LS_KWAISHOP_TRUST_CHANNEL",
            Self::LsKwaishopOlympicsTaskNewbuyer => "LS_KWAISHOP_OLYMPICS_TASK_NEWBUYER",
            Self::LsKwaishopOlympicsWalletSearch => "LS_KWAISHOP_OLYMPICS_WALLET_SEARCH",
            Self::LsKwaishopOlympicsNewbuyerCoupon => {
                "LS_KWAISHOP_OLYMPICS_NEWBUYER_COUPON"
            }
            Self::LsLiveGroupChatNotice => "LS_LIVE_GROUP_CHAT_NOTICE",
            Self::LsFindLiveTabHourlyRank => "LS_FIND_LIVE_TAB_HOURLY_RANK",
            Self::LsFindLiveTabOwnLive => "LS_FIND_LIVE_TAB_OWN_LIVE",
            Self::LsOlymicH5HomepageFindWatch => "LS_OLYMIC_H5_HOMEPAGE_FIND_WATCH",
            Self::SocialGroupChatMessageDetailShowPhoto => {
                "SOCIAL_GROUP_CHAT_MESSAGE_DETAIL_SHOW_PHOTO"
            }
            Self::SocialMyProfile => "SOCIAL_MY_PROFILE",
            Self::FindChannelAuthorColumnLiveCard => {
                "FIND_CHANNEL_AUTHOR_COLUMN_LIVE_CARD"
            }
            Self::LsSingleLinePhotoFeedUserAvatarRightBar => {
                "LS_SINGLE_LINE_PHOTO_FEED_USER_AVATAR_RIGHT_BAR"
            }
            Self::LsSingleLinePhotoFeedUserAvatarBottomBar => {
                "LS_SINGLE_LINE_PHOTO_FEED_USER_AVATAR_BOTTOM_BAR"
            }
            Self::LsSingleLinePhotoFeedSidebarShowPhoto => {
                "LS_SINGLE_LINE_PHOTO_FEED_SIDEBAR_SHOW_PHOTO"
            }
            Self::LsFindVoicePartyOneClick => "LS_FIND_VOICE_PARTY_ONE_CLICK",
            Self::LsLiveVoicePartyOneClick => "LS_LIVE_VOICE_PARTY_ONE_CLICK",
            Self::LsLiveQixiActivityRedPacket => "LS_LIVE_QIXI_ACTIVITY_RED_PACKET",
            Self::LsLiveSuperDiversionPositionGift => {
                "LS_LIVE_SUPER_DIVERSION_POSITION_GIFT"
            }
            Self::LsGzoneLiveHourRank => "LS_GZONE_LIVE_HOUR_RANK",
            Self::LsKwaishopQixiFeed => "LS_KWAISHOP_QIXI_FEED",
            Self::LsInterstitialAd => "LS_INTERSTITIAL_AD",
            Self::LsNearbyVoicePartyOneClick => "LS_NEARBY_VOICE_PARTY_ONE_CLICK",
            Self::LsGzoneLiveKshellRank => "LS_GZONE_LIVE_KSHELL_RANK",
            Self::LsGamezoneBetSquare => "LS_GAMEZONE_BET_SQUARE",
            Self::LsProfileBackgroud => "LS_PROFILE_BACKGROUD",
            Self::LsActivitySuperFansGroupPage => "LS_ACTIVITY_SUPER_FANS_GROUP_PAGE",
            Self::LsSingleLinePhotoFeedAtFriend => "LS_SINGLE_LINE_PHOTO_FEED_AT_FRIEND",
            Self::LsPopularityRankLive => "LS_POPULARITY_RANK_LIVE",
            Self::LsActivitySuperAuthorChallengePage => {
                "LS_ACTIVITY_SUPER_AUTHOR_CHALLENGE_PAGE"
            }
            Self::LsExitLiveWatchRecommendedLiveSeeNow => {
                "LS_EXIT_LIVE_WATCH_RECOMMENDED_LIVE_SEE_NOW"
            }
            Self::LsKsnebulaCoinTaskListWatchLive => {
                "LS_KSNEBULA_COIN_TASK_LIST_WATCH_LIVE"
            }
            Self::LsKsnebulaCoinTaskListSendLiveGifts => {
                "LS_KSNEBULA_COIN_TASK_LIST_SEND_LIVE_GIFTS"
            }
            Self::LsKwaishopDoubleElevenLiveCommodity => {
                "LS_KWAISHOP_DOUBLE_ELEVEN_LIVE_COMMODITY"
            }
            Self::LsKwaishopDoubleElevenRecommend => {
                "LS_KWAISHOP_DOUBLE_ELEVEN_RECOMMEND"
            }
            Self::LsKwaishopDoubleElevenSubLiveCommodity => {
                "LS_KWAISHOP_DOUBLE_ELEVEN_SUB_LIVE_COMMODITY"
            }
            Self::LsKwaishopDoubleElevenCouponLive => {
                "LS_KWAISHOP_DOUBLE_ELEVEN_COUPON_LIVE"
            }
            Self::LsLiveShuangshiyiActivityRedPacket => {
                "LS_LIVE_SHUANGSHIYI_ACTIVITY_RED_PACKET"
            }
            Self::LsKwaishopDoubleElevenOperateRecommend => {
                "LS_KWAISHOP_DOUBLE_ELEVEN_OPERATE_RECOMMEND"
            }
            Self::LsKwaishopMerchantAnchorRecommend => {
                "LS_KWAISHOP_MERCHANT_ANCHOR_RECOMMEND"
            }
            Self::LsKwaishopMerchantAnchorRecommendLive => {
                "LS_KWAISHOP_MERCHANT_ANCHOR_RECOMMEND_LIVE"
            }
            Self::LsKsCoinTaskListWatchLive => "LS_KS_COIN_TASK_LIST_WATCH_LIVE",
            Self::LsKsCoinTaskListSendLiveGifts => "LS_KS_COIN_TASK_LIST_SEND_LIVE_GIFTS",
            Self::LsSpecialFollowWidgetPopup => "LS_SPECIAL_FOLLOW_WIDGET_POPUP",
            Self::LsKwaiActivePendantUserHead => "LS_KWAI_ACTIVE_PENDANT_USER_HEAD",
            Self::LsLiveNiandushengdiainActivityRedPacket => {
                "LS_LIVE_NIANDUSHENGDIAIN_ACTIVITY_RED_PACKET"
            }
            Self::LsLiveActivityChunjieContentRecoLiveHead => {
                "LS_LIVE_ACTIVITY_CHUNJIE_CONTENT_RECO_LIVE_HEAD"
            }
            Self::LsLiveActivityChunjieContentTrailerHead => {
                "LS_LIVE_ACTIVITY_CHUNJIE_CONTENT_TRAILER_HEAD"
            }
            Self::LsLiveActivityChunjieContentHotCard => {
                "LS_LIVE_ACTIVITY_CHUNJIE_CONTENT_HOT_CARD"
            }
            Self::LsBuckcarLiveCard => "LS_BUCKCAR_LIVE_CARD",
            Self::LsBuckcarEnterLiveButton => "LS_BUCKCAR_ENTER_LIVE_BUTTON",
            Self::LsLiveTakeAShot => "LS_LIVE_TAKE_A_SHOT",
            Self::LsNearbyMapLive => "LS_NEARBY_MAP_LIVE",
            Self::LsNearbyMapHot => "LS_NEARBY_MAP_HOT",
            Self::LsLiveNiandushengdiainActivityHotCrad => {
                "LS_LIVE_NIANDUSHENGDIAIN_ACTIVITY_HOT_CRAD"
            }
            Self::LsLiveNiandushengdiainActivityLiveCard => {
                "LS_LIVE_NIANDUSHENGDIAIN_ACTIVITY_LIVE_CARD"
            }
            Self::LsLiveNiandushengdiainActivityHotWord => {
                "LS_LIVE_NIANDUSHENGDIAIN_ACTIVITY_HOT_WORD"
            }
            Self::LsActivityHomepageH5TemporaryEntrance => {
                "LS_ACTIVITY_HOMEPAGE_H5_TEMPORARY_ENTRANCE"
            }
            Self::LsOpActivityMainPageBanner => "LS_OP_ACTIVITY_MAIN_PAGE_BANNER",
            Self::LsCnyTaskRechange => "LS_CNY_TASK_RECHANGE",
            Self::LsCnyWarmUp => "LS_CNY_WARM_UP",
            Self::LsCnyTaskFansgroup => "LS_CNY_TASK_FANSGROUP",
            Self::LsCnyTaskWish => "LS_CNY_TASK_WISH",
            Self::LsMyProfileWishEnter => "LS_MY_PROFILE_WISH_ENTER",
            Self::LsNearbyPostGroup => "LS_NEARBY_POST_GROUP",
            Self::LsEspMobileH5 => "LS_ESP_MOBILE_H5",
            Self::LsFollowPreview => "LS_FOLLOW_PREVIEW",
            Self::LsCnyWishRoomNotifications => "LS_CNY_WISH_ROOM_NOTIFICATIONS",
            Self::LsLiveHourlyRankTopAuthor => "LS_LIVE_HOURLY_RANK_TOP_AUTHOR",
            Self::LsNewsSlide => "LS_NEWS_SLIDE",
            Self::LsTvStation => "LS_TV_STATION",
            Self::LsFollowingListHead => "LS_FOLLOWING_LIST_HEAD",
            Self::LsSingleLinePhotoFeedUserAvatarRightBarGreatVideo => {
                "LS_SINGLE_LINE_PHOTO_FEED_USER_AVATAR_RIGHT_BAR_GREAT_VIDEO"
            }
            Self::LsSingleLinePhotoFeedUserAvatarBottomBarGreatVideo => {
                "LS_SINGLE_LINE_PHOTO_FEED_USER_AVATAR_BOTTOM_BAR_GREAT_VIDEO"
            }
            Self::LsSingleLinePhotoFeedSidebarShowPhotoGreatVideo => {
                "LS_SINGLE_LINE_PHOTO_FEED_SIDEBAR_SHOW_PHOTO_GREAT_VIDEO"
            }
            Self::LsLiveMemberManagementListHead => "LS_LIVE_MEMBER_MANAGEMENT_LIST_HEAD",
            Self::LsSearchListLive => "LS_SEARCH_LIST_LIVE",
            Self::LsSearchListShop => "LS_SEARCH_LIST_SHOP",
            Self::LiveVoicePartyGuideMic => "LIVE_VOICE_PARTY_GUIDE_MIC",
            Self::LsKissGiftH5Head => "LS_KISS_GIFT_H5_HEAD",
            Self::LsLiveInteractivegameTv => "LS_LIVE_INTERACTIVEGAME_TV",
            Self::LsMerchantCsCrm => "LS_MERCHANT_CS_CRM",
            Self::LsAllianceProfile => "LS_ALLIANCE_PROFILE",
            Self::LsMerchantGoodsListItem => "LS_MERCHANT_GOODS_LIST_ITEM",
            Self::LsNeaabyPreview => "LS_NEAABY_PREVIEW",
            Self::LsFollowPreviewSecond => "LS_FOLLOW_PREVIEW_SECOND",
            Self::LsKsnebulaCoinExchangePopup => "LS_KSNEBULA_COIN_EXCHANGE_POPUP",
            Self::LsKsnebulaGoldCoinExchangeList => "LS_KSNEBULA_GOLD_COIN_EXCHANGE_LIST",
            Self::LsLiveMultiPk => "LS_LIVE_MULTI_PK",
            Self::LsAdWatchListDetail => "LS_AD_WATCH_LIST_DETAIL",
            Self::LsLivePush => "LS_LIVE_PUSH",
            Self::LsKsnebulaCoinTaskSpeedCard => "LS_KSNEBULA_COIN_TASK_SPEED_CARD",
            Self::LsLvieBlindDataWriteResultPageButton => {
                "LS_LVIE_BLIND_DATA_WRITE_RESULT_PAGE_BUTTON"
            }
            Self::LsWishLiveWishPopup => "LS_WISH_LIVE_WISH_POPUP",
            Self::LsDeliveryJobLiveAvatar => "LS_DELIVERY_JOB_LIVE_AVATAR",
            Self::LsMerchantBuyerMallTab => "LS_MERCHANT_BUYER_MALL_TAB",
            Self::LsDpChanel => "LS_DP_CHANEL",
            Self::LsMerchantLxjAvatar => "LS_MERCHANT_LXJ_AVATAR",
            Self::LsMerchantLxjDetailAvatar => "LS_MERCHANT_LXJ_DETAIL_AVATAR",
            Self::LsSimpleBottomExpention => "LS_SIMPLE_BOTTOM_EXPENTION",
            Self::LsLiveHotspotDetail => "LS_LIVE_HOTSPOT_DETAIL",
            Self::LsPoiDetailLiveModule => "LS_POI_DETAIL_LIVE_MODULE",
            Self::LsHourlyRankCityLive => "LS_HOURLY_RANK_CITY_LIVE",
            Self::LsAndHongmengCardH5Entry => "LS_AND_HONGMENG_CARD_H5_ENTRY",
            Self::LsLivePostRank => "LS_LIVE_POST_RANK",
            Self::LsKwaishopReco => "LS_KWAISHOP_RECO",
            Self::LsBroadcastGiftHighValue => "LS_BROADCAST_GIFT_HIGH_VALUE",
            Self::LsLiveCommentNotice => "LS_LIVE_COMMENT_NOTICE",
            Self::LsHotInsideFeedPreviewLive => "LS_HOT_INSIDE_FEED_PREVIEW_LIVE",
            Self::LsHotSearchKboxCardLive => "LS_HOT_SEARCH_KBOX_CARD_LIVE",
            Self::LsHotSingleAggrCardLive => "LS_HOT_SINGLE_AGGR_CARD_LIVE",
            Self::LsFindCardUserAvatar => "LS_FIND_CARD_USER_AVATAR",
            Self::LsLiteSideLiveCard => "LS_LITE_SIDE_LIVE_CARD",
            Self::LsLiteSideReturn => "LS_LITE_SIDE_RETURN",
            Self::LsGrabcardAutoEnterActivityLive => {
                "LS_GRABCARD_AUTO_ENTER_ACTIVITY_LIVE"
            }
            Self::LsAnchorEndpageRecoLive => "LS_ANCHOR_ENDPAGE_RECO_LIVE",
            Self::LsLiveMaskMoreLive => "LS_LIVE_MASK_MORE_LIVE",
            Self::LsLive20234tab => "LS_LIVE_2023_4TAB",
            Self::LsProfileFangchanCard => "LS_PROFILE_FANGCHAN_CARD",
            Self::LsFangchanMarketActivityPage => "LS_FANGCHAN_MARKET_ACTIVITY_PAGE",
            Self::LsXtabLifeCardLivingPhoto => "LS_XTAB_LIFE_CARD_LIVING_PHOTO",
            Self::LsHotspotPreviewLive => "LS_HOTSPOT_PREVIEW_LIVE",
            Self::LsNearbyMapLiveVoice => "LS_NEARBY_MAP_LIVE_VOICE",
            Self::LsLiveReserveSticker => "LS_LIVE_RESERVE_STICKER",
            Self::LsTvStationCard => "LS_TV_STATION_CARD",
            Self::LsCoinTaskGandiCard => "LS_COIN_TASK_GANDI_CARD",
            Self::LsHotLiveChannelPreview => "LS_HOT_LIVE_CHANNEL_PREVIEW",
            Self::LsSchoolMap => "LS_SCHOOL_MAP",
            Self::LsSearchCommodityMiniPreview => "LS_SEARCH_COMMODITY_MINI_PREVIEW",
            Self::LsFeatureFloatingLayer => "LS_FEATURE_FLOATING_LAYER",
            Self::LsLiveGuidePopup => "LS_LIVE_GUIDE_POPUP",
            Self::LsInteractiveInteraction => "LS_INTERACTIVE_INTERACTION",
            Self::LsMenuVoiceParty => "LS_MENU_VOICE_PARTY",
            Self::LsDanmuRankLive => "LS_DANMU_RANK_LIVE",
            Self::LsLiveNewRank => "LS_LIVE_NEW_RANK",
            Self::LsHotTalk => "LS_HOT_TALK",
            Self::LsSingleLinePhotoFeedQuickInteractive => {
                "LS_SINGLE_LINE_PHOTO_FEED_QUICK_INTERACTIVE"
            }
            Self::LsSimpleBottomCard => "LS_SIMPLE_BOTTOM_CARD",
            Self::LsTalentList => "LS_TALENT_LIST",
            Self::LsKwaishopFloatingWindow => "LS_KWAISHOP_FLOATING_WINDOW",
            Self::LsFindJobSquare => "LS_FIND_JOB_SQUARE",
            Self::LsNearbySimple => "LS_NEARBY_SIMPLE",
            Self::LsFindFeedSimple => "LS_FIND_FEED_SIMPLE",
            Self::LsBarrageGameplayCenterMainPage => {
                "LS_BARRAGE_GAMEPLAY_CENTER_MAIN_PAGE"
            }
            Self::LsRvipFeaturedChannel => "LS_RVIP_FEATURED_CHANNEL",
            Self::LsDanmuGameplay => "LS_DANMU_GAMEPLAY",
            Self::LsProfileButtonGoLive => "LS_PROFILE_BUTTON_GO_LIVE",
            Self::LsMenuOftenWatch => "LS_MENU_OFTEN_WATCH",
            Self::LsSinglePlaceTag => "LS_SINGLE_PLACE_TAG",
            Self::LsNearbyDoubleSimple => "LS_NEARBY_DOUBLE_SIMPLE",
            Self::LsDanmuScreenTreasureBoxViewingTask => {
                "LS_DANMU_SCREEN_TREASURE_BOX_VIEWING_TASK"
            }
            Self::LsTuanboRankLive => "LS_TUANBO_RANK_LIVE",
            Self::LsGonggeRankLive => "LS_GONGGE_RANK_LIVE",
            Self::LsCommonDetailPreview => "LS_COMMON_DETAIL_PREVIEW",
            Self::LsSingleBigCard => "LS_SINGLE_BIG_CARD",
            Self::LsPhotoAnchorName => "LS_PHOTO_ANCHOR_NAME",
            Self::LsDoubleFindNewFollowCard => "LS_DOUBLE_FIND_NEW_FOLLOW_CARD",
            Self::LsBanbanLiveCard => "LS_BANBAN_LIVE_CARD",
            Self::LsIncreaseGoldCard => "LS_INCREASE_GOLD_CARD",
            Self::LsFindFriendsPymk => "LS_FIND_FRIENDS_PYMK",
            Self::LsWidgeterLiveReminder => "LS_WIDGETER_LIVE_REMINDER",
            Self::LsPushPopup => "LS_PUSH_POPUP",
            Self::LsFollowSeeMore => "LS_FOLLOW_SEE_MORE",
            Self::LsWidgeterLiveReminderBookmark => "LS_WIDGETER_LIVE_REMINDER_BOOKMARK",
            Self::LsSimpleLivePush => "LS_SIMPLE_LIVE_PUSH",
            Self::LsProfileDesktopWidget => "LS_PROFILE_DESKTOP_WIDGET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LS_UNKNOWN" => Some(Self::LsUnknown),
            "LS_FEED" => Some(Self::LsFeed),
            "LS_PUSH" => Some(Self::LsPush),
            "LS_LIVE_SUBSCRIPTION" => Some(Self::LsLiveSubscription),
            "LS_FOLLOW" => Some(Self::LsFollow),
            "LS_HOT" => Some(Self::LsHot),
            "LS_NEARBY" => Some(Self::LsNearby),
            "LS_NEARBY_ROAMING" => Some(Self::LsNearbyRoaming),
            "LS_SHARE" => Some(Self::LsShare),
            "LS_LIVE_PK" => Some(Self::LsLivePk),
            "LS_WEB" => Some(Self::LsWeb),
            "LS_SMALL_PROGRAM" => Some(Self::LsSmallProgram),
            "LS_FANS_TOP" => Some(Self::LsFansTop),
            "LS_PRIVATE_MESSAGE" => Some(Self::LsPrivateMessage),
            "LS_BROADCAST_GIFT" => Some(Self::LsBroadcastGift),
            "LS_BROADCAST_GIFT_RED_PACKAGE" => Some(Self::LsBroadcastGiftRedPackage),
            "LS_PROFILE" => Some(Self::LsProfile),
            "LS_LIVE_PROFILE_CARD" => Some(Self::LsLiveProfileCard),
            "LS_LIVE_CLOSE_PAGE" => Some(Self::LsLiveClosePage),
            "LS_LIVE_MUSIC_STATION_CAPTION" => Some(Self::LsLiveMusicStationCaption),
            "LS_PROFILE_LIKE" => Some(Self::LsProfileLike),
            "LS_FEED_DETAIL_USER_AVATAR" => Some(Self::LsFeedDetailUserAvatar),
            "LS_MUSIC_STATION_USER_AVATAR" => Some(Self::LsMusicStationUserAvatar),
            "LS_MUSIC_STATION_USER_PRODUCTS_PAGE" => {
                Some(Self::LsMusicStationUserProductsPage)
            }
            "LS_NEWS" => Some(Self::LsNews),
            "LS_LIVE_FOLLOW_CHANNEL" => Some(Self::LsLiveFollowChannel),
            "LS_GAMEZONE_LIVE_GAME_WIDGET" => Some(Self::LsGamezoneLiveGameWidget),
            "LS_GAMEZONE_VIDEO_GAME_TAG" => Some(Self::LsGamezoneVideoGameTag),
            "LS_GAMEZONE_NEARBY_GAME_ENTRY" => Some(Self::LsGamezoneNearbyGameEntry),
            "LS_GAMEZONE_SEARCH_GAME_ENTRY" => Some(Self::LsGamezoneSearchGameEntry),
            "LS_GAMEZONE_SIDEBAR_ENTRY" => Some(Self::LsGamezoneSidebarEntry),
            "LS_GAMEZONE_LINK_EXTERNAL" => Some(Self::LsGamezoneLinkExternal),
            "LS_GAMEZONE_WEB" => Some(Self::LsGamezoneWeb),
            "LS_VOICE_PARTY_AGGREGATION_RECOMMEND" => {
                Some(Self::LsVoicePartyAggregationRecommend)
            }
            "LS_VOICE_PARTY_AGGREGATION_NEARBY" => {
                Some(Self::LsVoicePartyAggregationNearby)
            }
            "LS_VOICE_PARTY_AGGREGATION_KTV" => Some(Self::LsVoicePartyAggregationKtv),
            "LS_VOICE_PARTY_AGGREGATION_TOPIC" => {
                Some(Self::LsVoicePartyAggregationTopic)
            }
            "LS_NEARBY_LIVE" => Some(Self::LsNearbyLive),
            "LS_MUSIC_STATION_HELP" => Some(Self::LsMusicStationHelp),
            "LS_GAMEZONE_TOPICTAG_GAME_SEARCH_RECOMMEND" => {
                Some(Self::LsGamezoneTopictagGameSearchRecommend)
            }
            "LS_GAMEZONE_TOPICTAG_GAME_SEARCH_KEYWORD" => {
                Some(Self::LsGamezoneTopictagGameSearchKeyword)
            }
            "LS_GAMEZONE_TOPICTAG_GAME_DETAIL" => {
                Some(Self::LsGamezoneTopictagGameDetail)
            }
            "LS_LIVE_PUSH_ARROW_REDPACK" => Some(Self::LsLivePushArrowRedpack),
            "LS_MUSIC_STATION_USER_CENTER" => Some(Self::LsMusicStationUserCenter),
            "LS_MUSIC_STATION_SIX_SIX_RING" => Some(Self::LsMusicStationSixSixRing),
            "LS_FOLLOW_CARD" => Some(Self::LsFollowCard),
            "LS_FOLLOW_AGGR_CARD" => Some(Self::LsFollowAggrCard),
            "LS_FOLLOW_AUTO_PLAY" => Some(Self::LsFollowAutoPlay),
            "LS_LIVE_WATCH_SIDEBAR" => Some(Self::LsLiveWatchSidebar),
            "LS_FEED_DETAIL_BROADCAST_GIFT" => Some(Self::LsFeedDetailBroadcastGift),
            "LS_GAMEZONE_GAME_SUBSCRIBE_MESSAGE" => {
                Some(Self::LsGamezoneGameSubscribeMessage)
            }
            "LS_FOLLOW_CARD_USER_AVATAR" => Some(Self::LsFollowCardUserAvatar),
            "LS_HOT_LIVE_CHANNEL" => Some(Self::LsHotLiveChannel),
            "LS_GAMEZONE_LAB_BY_GAME" => Some(Self::LsGamezoneLabByGame),
            "LS_FOLLOW_CARD_AUTO_ENTER" => Some(Self::LsFollowCardAutoEnter),
            "LS_THANOS_LIVE_SQUARE" => Some(Self::LsThanosLiveSquare),
            "LS_MUSIC_STATION_AGGRGATE_PAGE" => Some(Self::LsMusicStationAggrgatePage),
            "LS_MUSIC_STATION_MY_FOLLOW_NOTICE" => {
                Some(Self::LsMusicStationMyFollowNotice)
            }
            "LS_MUSIC_STATION_TOP_GUIDE_CARD" => Some(Self::LsMusicStationTopGuideCard),
            "LS_GAMEZONE_AGGREGATION" => Some(Self::LsGamezoneAggregation),
            "LS_RECO_LIVE_SQUARE_AGGREGATE_PAGE" => {
                Some(Self::LsRecoLiveSquareAggregatePage)
            }
            "LS_CAMERA_CHAIN_LIVE" => Some(Self::LsCameraChainLive),
            "LS_DISTRICT_RANK_LIVE" => Some(Self::LsDistrictRankLive),
            "LS_NEARBY_RESOURCE_LOCATION" => Some(Self::LsNearbyResourceLocation),
            "LS_VOICE_PARTY_CHANNEL_TOPIC_ITEM" => {
                Some(Self::LsVoicePartyChannelTopicItem)
            }
            "LS_LIVE_ROBOT_PET_CONTRIBUTE_LIST" => {
                Some(Self::LsLiveRobotPetContributeList)
            }
            "LS_LIVE_ROBOT_PET_SOCIAL_LIST" => Some(Self::LsLiveRobotPetSocialList),
            "LS_THANOS_LIVE_SQUARE_AGGREGATE_PAGE" => {
                Some(Self::LsThanosLiveSquareAggregatePage)
            }
            "LS_MUSIC_STATION_KWAI_VOICE" => Some(Self::LsMusicStationKwaiVoice),
            "LS_MUSIC_STATION_KWAI_VOICE_MOMMENT" => {
                Some(Self::LsMusicStationKwaiVoiceMomment)
            }
            "LS_SEARCH_MUSIC_STATION_CHANNEL" => Some(Self::LsSearchMusicStationChannel),
            "LS_MUSIC_STATION_TAG_ENTRANCE" => Some(Self::LsMusicStationTagEntrance),
            "LS_MUSIC_STATION_KWAI_VOICE_ENTRANCE" => {
                Some(Self::LsMusicStationKwaiVoiceEntrance)
            }
            "LS_MUSIC_STATION_KWAI_VOICE_H5" => Some(Self::LsMusicStationKwaiVoiceH5),
            "LS_FOLLOW_LIVE" => Some(Self::LsFollowLive),
            "LS_NOTIFICATIONS" => Some(Self::LsNotifications),
            "LS_FEATURED_LIVE_SQUARE_AGGREGATE_PAGE" => {
                Some(Self::LsFeaturedLiveSquareAggregatePage)
            }
            "LS_MENU_LIVE_SQUARE_AGGREGATE_PAGE" => {
                Some(Self::LsMenuLiveSquareAggregatePage)
            }
            "LS_MENU" => Some(Self::LsMenu),
            "LS_GIFT_WHEEL_EXPENSIVE_GIFT" => Some(Self::LsGiftWheelExpensiveGift),
            "LS_VOICE_PARTY_AGGREGATION_RECOMMEND_CHANNEL" => {
                Some(Self::LsVoicePartyAggregationRecommendChannel)
            }
            "LS_SF_PREHEAT_TASK" => Some(Self::LsSfPreheatTask),
            "LS_SF_MAIN_BREAKOUT_VENUE_RESOURCE" => {
                Some(Self::LsSfMainBreakoutVenueResource)
            }
            "LS_GAMECENTER_VIDEO_FEEDS" => Some(Self::LsGamecenterVideoFeeds),
            "LS_SFENTRANCE" => Some(Self::LsSfentrance),
            "LS_NEARBY_LIVE_SQUARE_AGGREGATE_PAGE" => {
                Some(Self::LsNearbyLiveSquareAggregatePage)
            }
            "LS_SF2020_LIVE_SQUARE_AGGREGATE_PAGE" => {
                Some(Self::LsSf2020LiveSquareAggregatePage)
            }
            "LS_SF2020_LIVE_THANKS_RED_PACK_LIST" => {
                Some(Self::LsSf2020LiveThanksRedPackList)
            }
            "LS_SF2020_LIVE_THANKS_RED_PACK_NOTIFICATION" => {
                Some(Self::LsSf2020LiveThanksRedPackNotification)
            }
            "LS_SF2020_LIVE_THANKS_RED_PACK_TOKEN_POPUP" => {
                Some(Self::LsSf2020LiveThanksRedPackTokenPopup)
            }
            "LS_VOICE_PARTY_HOTROOM_PANDENT" => Some(Self::LsVoicePartyHotroomPandent),
            "LS_SEARCH" => Some(Self::LsSearch),
            "LS_NEBULA_LIVE_SQUARE_AGGREGATE_PAGE" => {
                Some(Self::LsNebulaLiveSquareAggregatePage)
            }
            "NEW_LIVE_MORE_SQUARE" => Some(Self::NewLiveMoreSquare),
            "MY_FOLLOW_LIVE" => Some(Self::MyFollowLive),
            "LS_FOLLOW_RECO" => Some(Self::LsFollowReco),
            "LS_GAMEZONE_NEW_LIVE_GAME_TV_TAB" => Some(Self::LsGamezoneNewLiveGameTvTab),
            "LS_FOLLOW_FVA" => Some(Self::LsFollowFva),
            "LS_OPERATION_H5" => Some(Self::LsOperationH5),
            "LS_FANS_TOP_ORDER_HELP_BUY" => Some(Self::LsFansTopOrderHelpBuy),
            "LS_NATION_RANK_LIVE" => Some(Self::LsNationRankLive),
            "LS_SQUARE_RESOURCE_LOCATION" => Some(Self::LsSquareResourceLocation),
            "LS_NEBULA_GOLD_LIVE_SQUARE_AGGREGATE_PAGE" => {
                Some(Self::LsNebulaGoldLiveSquareAggregatePage)
            }
            "LS_NEBULA_HOT_PUSH" => Some(Self::LsNebulaHotPush),
            "LS_HOT_PREVIEW_LIVE" => Some(Self::LsHotPreviewLive),
            "LS_BROADCAST_PUSH" => Some(Self::LsBroadcastPush),
            "LS_GAME_CENTER_COMPETITION" => Some(Self::LsGameCenterCompetition),
            "LS_NEARBY_LOCAL_TV" => Some(Self::LsNearbyLocalTv),
            "LS_PK_RANK_GAME_OPPONENT" => Some(Self::LsPkRankGameOpponent),
            "LS_PK_RANK_GAME_THIS_WEEK_LIST" => Some(Self::LsPkRankGameThisWeekList),
            "LS_PK_RANK_GAME_WINNING_STREAK_LIST" => {
                Some(Self::LsPkRankGameWinningStreakList)
            }
            "LS_PK_RANK_GAME_PREWEEK_TOP_LIST" => Some(Self::LsPkRankGamePreweekTopList),
            "LS_NEBULA_HOT_TIPS" => Some(Self::LsNebulaHotTips),
            "LS_MORE_SQUARE_SEARCH" => Some(Self::LsMoreSquareSearch),
            "LS_SEARCH_ALADDIN_MORE" => Some(Self::LsSearchAladdinMore),
            "LS_NEW_GAME_CENTER_DETAIL" => Some(Self::LsNewGameCenterDetail),
            "MUSIC_STATION_HOME" => Some(Self::MusicStationHome),
            "MUSIC_TAG_V1" => Some(Self::MusicTagV1),
            "MUSIC_TAG_V2" => Some(Self::MusicTagV2),
            "TEXT_MUSIC_TAG" => Some(Self::TextMusicTag),
            "FREQUENTLY_VISITED_AUTHOR" => Some(Self::FrequentlyVisitedAuthor),
            "LS_AUTO_PROFILE" => Some(Self::LsAutoProfile),
            "LS_ASSISTANT_LIVE_PUSH" => Some(Self::LsAssistantLivePush),
            "LIVE_FRONT" => Some(Self::LiveFront),
            "RIGHT_HEAD_OF_AUTHOR" => Some(Self::RightHeadOfAuthor),
            "LS_TOPIC_HOMEPAGE_AVATAR" => Some(Self::LsTopicHomepageAvatar),
            "LS_TOPIC_DETAIL_AVATAR" => Some(Self::LsTopicDetailAvatar),
            "LS_GIFT_HINT" => Some(Self::LsGiftHint),
            "LS_GUARDIAN_HEAD" => Some(Self::LsGuardianHead),
            "LS_BOTTOM_SIDEBAR_FEATURED" => Some(Self::LsBottomSidebarFeatured),
            "LS_FEATURED_PREVIEW" => Some(Self::LsFeaturedPreview),
            "LS_LIVE_ONLINE_USER_PROFILE_CARD" => Some(Self::LsLiveOnlineUserProfileCard),
            "LS_LIVE_WEEK_RANK_PROFILE_CARD" => Some(Self::LsLiveWeekRankProfileCard),
            "LS_KUAIXIANG_CONVENIENCE" => Some(Self::LsKuaixiangConvenience),
            "LS_LIVE_ORDER_CALENDAR" => Some(Self::LsLiveOrderCalendar),
            "LS_LIVE_ORDER_PRIVATE_LETTER" => Some(Self::LsLiveOrderPrivateLetter),
            "LS_BOTTOM_SIDEBAR_FEATURED_SINGLE_LINE" => {
                Some(Self::LsBottomSidebarFeaturedSingleLine)
            }
            "LS_BOTTOM_SIDEBAR_FEATURED_SINGLE_LINE_AVATAR" => {
                Some(Self::LsBottomSidebarFeaturedSingleLineAvatar)
            }
            "LS_BOTTOM_SIDEBAR_FEATURED_DOUBLE_LINE_AVATAR" => {
                Some(Self::LsBottomSidebarFeaturedDoubleLineAvatar)
            }
            "LS_LIVE_FREQUENTLY_VISITED" => Some(Self::LsLiveFrequentlyVisited),
            "LS_HOT_PREVIEW_LIVE_RECO" => Some(Self::LsHotPreviewLiveReco),
            "LS_HOT_LIVE" => Some(Self::LsHotLive),
            "LS_LIVE_ORDER_PLC" => Some(Self::LsLiveOrderPlc),
            "LS_LIVE_ORDER_PUSH" => Some(Self::LsLiveOrderPush),
            "NEW_LIVE_MORE_SQUARE_AVATAR" => Some(Self::NewLiveMoreSquareAvatar),
            "LS_LIVE_SHOT_MESSAGE" => Some(Self::LsLiveShotMessage),
            "LS_LIVE_GIFT_EXPIRE_SHOT_MESSAGE" => Some(Self::LsLiveGiftExpireShotMessage),
            "LS_LIVE_SPLASH_AD" => Some(Self::LsLiveSplashAd),
            "LS_TAG_GAME_LIVE" => Some(Self::LsTagGameLive),
            "LS_SQUARE_RESOURCE_DISTRICT_RANK" => {
                Some(Self::LsSquareResourceDistrictRank)
            }
            "LS_BUSINESS_RANK_LIVE" => Some(Self::LsBusinessRankLive),
            "LS_LIVE_ONLINE" => Some(Self::LsLiveOnline),
            "LS_MENU_KWAISHOP_HOMEPAGE" => Some(Self::LsMenuKwaishopHomepage),
            "LS_FOLLOW_TIME_TAB" => Some(Self::LsFollowTimeTab),
            "LS_LIVE_SQUARE_SLIDE_UPDOWN" => Some(Self::LsLiveSquareSlideUpdown),
            "LS_LIVE_WATCH_NO_MORE_LIVE_POP_LIVE_CARD" => {
                Some(Self::LsLiveWatchNoMoreLivePopLiveCard)
            }
            "LS_LIVE_WATCH_NO_MORE_LIVE_POP_BUTTON" => {
                Some(Self::LsLiveWatchNoMoreLivePopButton)
            }
            "LS_EXIT_LIVE_WATCH_RECOMMENDED_LIVE_CARD" => {
                Some(Self::LsExitLiveWatchRecommendedLiveCard)
            }
            "LS_EXIT_LIVE_WATCH_RECOMMENDED_LIVE_AUTHOR_OVERT" => {
                Some(Self::LsExitLiveWatchRecommendedLiveAuthorOvert)
            }
            "LS_LIVE_WATCH_NO_MORE_LIVE_POP_AUTHOR_OVERT" => {
                Some(Self::LsLiveWatchNoMoreLivePopAuthorOvert)
            }
            "LS_KSNEBULA_COIN_CONTROL_MODULE" => Some(Self::LsKsnebulaCoinControlModule),
            "LS_KSNEBULA_COIN_TASK_CARD" => Some(Self::LsKsnebulaCoinTaskCard),
            "LS_BUSINESS_COIN_TASK_CENTER" => Some(Self::LsBusinessCoinTaskCenter),
            "LS_HOT_CHANNEL_KWAISHOP_HOMEPAGE" => {
                Some(Self::LsHotChannelKwaishopHomepage)
            }
            "LS_TOP_NAVIGATION_KWAISHOP_HOMEPAGE" => {
                Some(Self::LsTopNavigationKwaishopHomepage)
            }
            "LS_TABBAR_NEARBY_CHANNEL_KWAISHOP_HOMEPAGE" => {
                Some(Self::LsTabbarNearbyChannelKwaishopHomepage)
            }
            "LS_CHANNEL_PAGE_KWAISHOP_HOMEPAGE" => {
                Some(Self::LsChannelPageKwaishopHomepage)
            }
            "LS_CLOSE_FROM_ANCHOR_LIVE_ENTER_OTHER_LIVE" => {
                Some(Self::LsCloseFromAnchorLiveEnterOtherLive)
            }
            "LS_CORONA_GAME_BANNER" => Some(Self::LsCoronaGameBanner),
            "LS_CORONA_GAME_SUB_CHANNEL" => Some(Self::LsCoronaGameSubChannel),
            "LS_ACTIVITY_RED_PACKET_RAIN" => Some(Self::LsActivityRedPacketRain),
            "LS_LIVE_PK_ADVERSARY_SCREEN" => Some(Self::LsLivePkAdversaryScreen),
            "LS_LIVE_ONLINE_ADVERSARY_SCREEN" => Some(Self::LsLiveOnlineAdversaryScreen),
            "LS_LIVE_SEND_RED_PACKET_HEAD_BUTTON" => {
                Some(Self::LsLiveSendRedPacketHeadButton)
            }
            "LS_GAMEZONE_ACCOMPANY_SQUARE" => Some(Self::LsGamezoneAccompanySquare),
            "LS_LIVE_RECEIVE_RED_PACKET_RECOMMEND_LIST" => {
                Some(Self::LsLiveReceiveRedPacketRecommendList)
            }
            "LS_FIND_VERTICAL_FIELD_FEED_CARD" => Some(Self::LsFindVerticalFieldFeedCard),
            "LS_NEARBY_FEED_CARD" => Some(Self::LsNearbyFeedCard),
            "LS_FIND_FEED_CARD" => Some(Self::LsFindFeedCard),
            "LS_GLOBAL_LIVE_ROOM" => Some(Self::LsGlobalLiveRoom),
            "LS_GAMEZONE_LIVE_PLAY_TOGETHER_TAB" => {
                Some(Self::LsGamezoneLivePlayTogetherTab)
            }
            "LS_KWAISHOP_PAY_SUCCESS_LAOTIE" => Some(Self::LsKwaishopPaySuccessLaotie),
            "LS_KWAISHOP_BUSINESS_COIN_LAOTIE" => {
                Some(Self::LsKwaishopBusinessCoinLaotie)
            }
            "LS_NAVIGATION_MODULE_CARD" => Some(Self::LsNavigationModuleCard),
            "LS_MORE_MODULE_CARD" => Some(Self::LsMoreModuleCard),
            "LS_KWAISHOP_BUYER_HOME_NEWBUYER_COUPON" => {
                Some(Self::LsKwaishopBuyerHomeNewbuyerCoupon)
            }
            "LS_THANOS_FIND_FEATURED_RECO_CARD" => {
                Some(Self::LsThanosFindFeaturedRecoCard)
            }
            "LIVE_PREVIEW_UN_BEAUTIFUL_TIME" => Some(Self::LivePreviewUnBeautifulTime),
            "LS_LIVE_WATCH_TOPIC_CIRCLE_PANEL" => Some(Self::LsLiveWatchTopicCirclePanel),
            "LS_EXPLORE_CARD" => Some(Self::LsExploreCard),
            "LS_FRIENDS" => Some(Self::LsFriends),
            "LS_KWAISHOP_MARCHANT_MORECATEGORY" => {
                Some(Self::LsKwaishopMarchantMorecategory)
            }
            "LS_KWAISHOP_LABOR_DAY_COLLECT_CARD" => {
                Some(Self::LsKwaishopLaborDayCollectCard)
            }
            "LS_APPEARANCE_HOURLY_RANK" => Some(Self::LsAppearanceHourlyRank),
            "LS_NEARBY_TOP_RANK_LIVE" => Some(Self::LsNearbyTopRankLive),
            "LS_LIVE_COMMON_NOTIFICATION_SHOW" => {
                Some(Self::LsLiveCommonNotificationShow)
            }
            "LS_LIVE_DSP_FEED_AD" => Some(Self::LsLiveDspFeedAd),
            "LS_NEWS_FEED" => Some(Self::LsNewsFeed),
            "LS_LIVE_GOLDEN_HOURLY_RANK" => Some(Self::LsLiveGoldenHourlyRank),
            "LS_LIVE_WATCH_TOPIC_CIRCLE_PANEL_REFEREAL_AUCHOR" => {
                Some(Self::LsLiveWatchTopicCirclePanelReferealAuchor)
            }
            "LS_KWAISHOP_LIVE_TRUST_CARD_BANNER_COUPON" => {
                Some(Self::LsKwaishopLiveTrustCardBannerCoupon)
            }
            "LS_KWAISHOP_ESHOP_SHOPPING_DAY" => Some(Self::LsKwaishopEshopShoppingDay),
            "LS_AWARD_VIDEO_AD" => Some(Self::LsAwardVideoAd),
            "LS_EXPLORE_LIVE" => Some(Self::LsExploreLive),
            "LIVE_PREVIEW_MERCHANT_COUPON_EXPLAIN" => {
                Some(Self::LivePreviewMerchantCouponExplain)
            }
            "LS_FOLLOW_TO_AGGREGATION_LIVE_CARD" => {
                Some(Self::LsFollowToAggregationLiveCard)
            }
            "LS_EXPLORE_POPULAR_DIVERSION_POSITION" => {
                Some(Self::LsExplorePopularDiversionPosition)
            }
            "LS_LIVE_VOICE_PARTY_LIST_FIND" => Some(Self::LsLiveVoicePartyListFind),
            "LS_LIVE_VOICE_PARTY_LIST_FILM_FIND" => {
                Some(Self::LsLiveVoicePartyListFilmFind)
            }
            "LS_MOMENT_LIVE" => Some(Self::LsMomentLive),
            "LS_KWAISHOP_ESHOP_CENT_LOTTERY" => Some(Self::LsKwaishopEshopCentLottery),
            "LS_FOLLOW_FVA_USER_RECOMMEND" => Some(Self::LsFollowFvaUserRecommend),
            "LS_KWAISHOP_ESHOP_OLYMPICS" => Some(Self::LsKwaishopEshopOlympics),
            "LS_KWAISHOP_TRUST_CHANNEL" => Some(Self::LsKwaishopTrustChannel),
            "LS_KWAISHOP_OLYMPICS_TASK_NEWBUYER" => {
                Some(Self::LsKwaishopOlympicsTaskNewbuyer)
            }
            "LS_KWAISHOP_OLYMPICS_WALLET_SEARCH" => {
                Some(Self::LsKwaishopOlympicsWalletSearch)
            }
            "LS_KWAISHOP_OLYMPICS_NEWBUYER_COUPON" => {
                Some(Self::LsKwaishopOlympicsNewbuyerCoupon)
            }
            "LS_LIVE_GROUP_CHAT_NOTICE" => Some(Self::LsLiveGroupChatNotice),
            "LS_FIND_LIVE_TAB_HOURLY_RANK" => Some(Self::LsFindLiveTabHourlyRank),
            "LS_FIND_LIVE_TAB_OWN_LIVE" => Some(Self::LsFindLiveTabOwnLive),
            "LS_OLYMIC_H5_HOMEPAGE_FIND_WATCH" => Some(Self::LsOlymicH5HomepageFindWatch),
            "SOCIAL_GROUP_CHAT_MESSAGE_DETAIL_SHOW_PHOTO" => {
                Some(Self::SocialGroupChatMessageDetailShowPhoto)
            }
            "SOCIAL_MY_PROFILE" => Some(Self::SocialMyProfile),
            "FIND_CHANNEL_AUTHOR_COLUMN_LIVE_CARD" => {
                Some(Self::FindChannelAuthorColumnLiveCard)
            }
            "LS_SINGLE_LINE_PHOTO_FEED_USER_AVATAR_RIGHT_BAR" => {
                Some(Self::LsSingleLinePhotoFeedUserAvatarRightBar)
            }
            "LS_SINGLE_LINE_PHOTO_FEED_USER_AVATAR_BOTTOM_BAR" => {
                Some(Self::LsSingleLinePhotoFeedUserAvatarBottomBar)
            }
            "LS_SINGLE_LINE_PHOTO_FEED_SIDEBAR_SHOW_PHOTO" => {
                Some(Self::LsSingleLinePhotoFeedSidebarShowPhoto)
            }
            "LS_FIND_VOICE_PARTY_ONE_CLICK" => Some(Self::LsFindVoicePartyOneClick),
            "LS_LIVE_VOICE_PARTY_ONE_CLICK" => Some(Self::LsLiveVoicePartyOneClick),
            "LS_LIVE_QIXI_ACTIVITY_RED_PACKET" => Some(Self::LsLiveQixiActivityRedPacket),
            "LS_LIVE_SUPER_DIVERSION_POSITION_GIFT" => {
                Some(Self::LsLiveSuperDiversionPositionGift)
            }
            "LS_GZONE_LIVE_HOUR_RANK" => Some(Self::LsGzoneLiveHourRank),
            "LS_KWAISHOP_QIXI_FEED" => Some(Self::LsKwaishopQixiFeed),
            "LS_INTERSTITIAL_AD" => Some(Self::LsInterstitialAd),
            "LS_NEARBY_VOICE_PARTY_ONE_CLICK" => Some(Self::LsNearbyVoicePartyOneClick),
            "LS_GZONE_LIVE_KSHELL_RANK" => Some(Self::LsGzoneLiveKshellRank),
            "LS_GAMEZONE_BET_SQUARE" => Some(Self::LsGamezoneBetSquare),
            "LS_PROFILE_BACKGROUD" => Some(Self::LsProfileBackgroud),
            "LS_ACTIVITY_SUPER_FANS_GROUP_PAGE" => {
                Some(Self::LsActivitySuperFansGroupPage)
            }
            "LS_SINGLE_LINE_PHOTO_FEED_AT_FRIEND" => {
                Some(Self::LsSingleLinePhotoFeedAtFriend)
            }
            "LS_POPULARITY_RANK_LIVE" => Some(Self::LsPopularityRankLive),
            "LS_ACTIVITY_SUPER_AUTHOR_CHALLENGE_PAGE" => {
                Some(Self::LsActivitySuperAuthorChallengePage)
            }
            "LS_EXIT_LIVE_WATCH_RECOMMENDED_LIVE_SEE_NOW" => {
                Some(Self::LsExitLiveWatchRecommendedLiveSeeNow)
            }
            "LS_KSNEBULA_COIN_TASK_LIST_WATCH_LIVE" => {
                Some(Self::LsKsnebulaCoinTaskListWatchLive)
            }
            "LS_KSNEBULA_COIN_TASK_LIST_SEND_LIVE_GIFTS" => {
                Some(Self::LsKsnebulaCoinTaskListSendLiveGifts)
            }
            "LS_KWAISHOP_DOUBLE_ELEVEN_LIVE_COMMODITY" => {
                Some(Self::LsKwaishopDoubleElevenLiveCommodity)
            }
            "LS_KWAISHOP_DOUBLE_ELEVEN_RECOMMEND" => {
                Some(Self::LsKwaishopDoubleElevenRecommend)
            }
            "LS_KWAISHOP_DOUBLE_ELEVEN_SUB_LIVE_COMMODITY" => {
                Some(Self::LsKwaishopDoubleElevenSubLiveCommodity)
            }
            "LS_KWAISHOP_DOUBLE_ELEVEN_COUPON_LIVE" => {
                Some(Self::LsKwaishopDoubleElevenCouponLive)
            }
            "LS_LIVE_SHUANGSHIYI_ACTIVITY_RED_PACKET" => {
                Some(Self::LsLiveShuangshiyiActivityRedPacket)
            }
            "LS_KWAISHOP_DOUBLE_ELEVEN_OPERATE_RECOMMEND" => {
                Some(Self::LsKwaishopDoubleElevenOperateRecommend)
            }
            "LS_KWAISHOP_MERCHANT_ANCHOR_RECOMMEND" => {
                Some(Self::LsKwaishopMerchantAnchorRecommend)
            }
            "LS_KWAISHOP_MERCHANT_ANCHOR_RECOMMEND_LIVE" => {
                Some(Self::LsKwaishopMerchantAnchorRecommendLive)
            }
            "LS_KS_COIN_TASK_LIST_WATCH_LIVE" => Some(Self::LsKsCoinTaskListWatchLive),
            "LS_KS_COIN_TASK_LIST_SEND_LIVE_GIFTS" => {
                Some(Self::LsKsCoinTaskListSendLiveGifts)
            }
            "LS_SPECIAL_FOLLOW_WIDGET_POPUP" => Some(Self::LsSpecialFollowWidgetPopup),
            "LS_KWAI_ACTIVE_PENDANT_USER_HEAD" => Some(Self::LsKwaiActivePendantUserHead),
            "LS_LIVE_NIANDUSHENGDIAIN_ACTIVITY_RED_PACKET" => {
                Some(Self::LsLiveNiandushengdiainActivityRedPacket)
            }
            "LS_LIVE_ACTIVITY_CHUNJIE_CONTENT_RECO_LIVE_HEAD" => {
                Some(Self::LsLiveActivityChunjieContentRecoLiveHead)
            }
            "LS_LIVE_ACTIVITY_CHUNJIE_CONTENT_TRAILER_HEAD" => {
                Some(Self::LsLiveActivityChunjieContentTrailerHead)
            }
            "LS_LIVE_ACTIVITY_CHUNJIE_CONTENT_HOT_CARD" => {
                Some(Self::LsLiveActivityChunjieContentHotCard)
            }
            "LS_BUCKCAR_LIVE_CARD" => Some(Self::LsBuckcarLiveCard),
            "LS_BUCKCAR_ENTER_LIVE_BUTTON" => Some(Self::LsBuckcarEnterLiveButton),
            "LS_LIVE_TAKE_A_SHOT" => Some(Self::LsLiveTakeAShot),
            "LS_NEARBY_MAP_LIVE" => Some(Self::LsNearbyMapLive),
            "LS_NEARBY_MAP_HOT" => Some(Self::LsNearbyMapHot),
            "LS_LIVE_NIANDUSHENGDIAIN_ACTIVITY_HOT_CRAD" => {
                Some(Self::LsLiveNiandushengdiainActivityHotCrad)
            }
            "LS_LIVE_NIANDUSHENGDIAIN_ACTIVITY_LIVE_CARD" => {
                Some(Self::LsLiveNiandushengdiainActivityLiveCard)
            }
            "LS_LIVE_NIANDUSHENGDIAIN_ACTIVITY_HOT_WORD" => {
                Some(Self::LsLiveNiandushengdiainActivityHotWord)
            }
            "LS_ACTIVITY_HOMEPAGE_H5_TEMPORARY_ENTRANCE" => {
                Some(Self::LsActivityHomepageH5TemporaryEntrance)
            }
            "LS_OP_ACTIVITY_MAIN_PAGE_BANNER" => Some(Self::LsOpActivityMainPageBanner),
            "LS_CNY_TASK_RECHANGE" => Some(Self::LsCnyTaskRechange),
            "LS_CNY_WARM_UP" => Some(Self::LsCnyWarmUp),
            "LS_CNY_TASK_FANSGROUP" => Some(Self::LsCnyTaskFansgroup),
            "LS_CNY_TASK_WISH" => Some(Self::LsCnyTaskWish),
            "LS_MY_PROFILE_WISH_ENTER" => Some(Self::LsMyProfileWishEnter),
            "LS_NEARBY_POST_GROUP" => Some(Self::LsNearbyPostGroup),
            "LS_ESP_MOBILE_H5" => Some(Self::LsEspMobileH5),
            "LS_FOLLOW_PREVIEW" => Some(Self::LsFollowPreview),
            "LS_CNY_WISH_ROOM_NOTIFICATIONS" => Some(Self::LsCnyWishRoomNotifications),
            "LS_LIVE_HOURLY_RANK_TOP_AUTHOR" => Some(Self::LsLiveHourlyRankTopAuthor),
            "LS_NEWS_SLIDE" => Some(Self::LsNewsSlide),
            "LS_TV_STATION" => Some(Self::LsTvStation),
            "LS_FOLLOWING_LIST_HEAD" => Some(Self::LsFollowingListHead),
            "LS_SINGLE_LINE_PHOTO_FEED_USER_AVATAR_RIGHT_BAR_GREAT_VIDEO" => {
                Some(Self::LsSingleLinePhotoFeedUserAvatarRightBarGreatVideo)
            }
            "LS_SINGLE_LINE_PHOTO_FEED_USER_AVATAR_BOTTOM_BAR_GREAT_VIDEO" => {
                Some(Self::LsSingleLinePhotoFeedUserAvatarBottomBarGreatVideo)
            }
            "LS_SINGLE_LINE_PHOTO_FEED_SIDEBAR_SHOW_PHOTO_GREAT_VIDEO" => {
                Some(Self::LsSingleLinePhotoFeedSidebarShowPhotoGreatVideo)
            }
            "LS_LIVE_MEMBER_MANAGEMENT_LIST_HEAD" => {
                Some(Self::LsLiveMemberManagementListHead)
            }
            "LS_SEARCH_LIST_LIVE" => Some(Self::LsSearchListLive),
            "LS_SEARCH_LIST_SHOP" => Some(Self::LsSearchListShop),
            "LIVE_VOICE_PARTY_GUIDE_MIC" => Some(Self::LiveVoicePartyGuideMic),
            "LS_KISS_GIFT_H5_HEAD" => Some(Self::LsKissGiftH5Head),
            "LS_LIVE_INTERACTIVEGAME_TV" => Some(Self::LsLiveInteractivegameTv),
            "LS_MERCHANT_CS_CRM" => Some(Self::LsMerchantCsCrm),
            "LS_ALLIANCE_PROFILE" => Some(Self::LsAllianceProfile),
            "LS_MERCHANT_GOODS_LIST_ITEM" => Some(Self::LsMerchantGoodsListItem),
            "LS_NEAABY_PREVIEW" => Some(Self::LsNeaabyPreview),
            "LS_FOLLOW_PREVIEW_SECOND" => Some(Self::LsFollowPreviewSecond),
            "LS_KSNEBULA_COIN_EXCHANGE_POPUP" => Some(Self::LsKsnebulaCoinExchangePopup),
            "LS_KSNEBULA_GOLD_COIN_EXCHANGE_LIST" => {
                Some(Self::LsKsnebulaGoldCoinExchangeList)
            }
            "LS_LIVE_MULTI_PK" => Some(Self::LsLiveMultiPk),
            "LS_AD_WATCH_LIST_DETAIL" => Some(Self::LsAdWatchListDetail),
            "LS_LIVE_PUSH" => Some(Self::LsLivePush),
            "LS_KSNEBULA_COIN_TASK_SPEED_CARD" => Some(Self::LsKsnebulaCoinTaskSpeedCard),
            "LS_LVIE_BLIND_DATA_WRITE_RESULT_PAGE_BUTTON" => {
                Some(Self::LsLvieBlindDataWriteResultPageButton)
            }
            "LS_WISH_LIVE_WISH_POPUP" => Some(Self::LsWishLiveWishPopup),
            "LS_DELIVERY_JOB_LIVE_AVATAR" => Some(Self::LsDeliveryJobLiveAvatar),
            "LS_MERCHANT_BUYER_MALL_TAB" => Some(Self::LsMerchantBuyerMallTab),
            "LS_DP_CHANEL" => Some(Self::LsDpChanel),
            "LS_MERCHANT_LXJ_AVATAR" => Some(Self::LsMerchantLxjAvatar),
            "LS_MERCHANT_LXJ_DETAIL_AVATAR" => Some(Self::LsMerchantLxjDetailAvatar),
            "LS_SIMPLE_BOTTOM_EXPENTION" => Some(Self::LsSimpleBottomExpention),
            "LS_LIVE_HOTSPOT_DETAIL" => Some(Self::LsLiveHotspotDetail),
            "LS_POI_DETAIL_LIVE_MODULE" => Some(Self::LsPoiDetailLiveModule),
            "LS_HOURLY_RANK_CITY_LIVE" => Some(Self::LsHourlyRankCityLive),
            "LS_AND_HONGMENG_CARD_H5_ENTRY" => Some(Self::LsAndHongmengCardH5Entry),
            "LS_LIVE_POST_RANK" => Some(Self::LsLivePostRank),
            "LS_KWAISHOP_RECO" => Some(Self::LsKwaishopReco),
            "LS_BROADCAST_GIFT_HIGH_VALUE" => Some(Self::LsBroadcastGiftHighValue),
            "LS_LIVE_COMMENT_NOTICE" => Some(Self::LsLiveCommentNotice),
            "LS_HOT_INSIDE_FEED_PREVIEW_LIVE" => Some(Self::LsHotInsideFeedPreviewLive),
            "LS_HOT_SEARCH_KBOX_CARD_LIVE" => Some(Self::LsHotSearchKboxCardLive),
            "LS_HOT_SINGLE_AGGR_CARD_LIVE" => Some(Self::LsHotSingleAggrCardLive),
            "LS_FIND_CARD_USER_AVATAR" => Some(Self::LsFindCardUserAvatar),
            "LS_LITE_SIDE_LIVE_CARD" => Some(Self::LsLiteSideLiveCard),
            "LS_LITE_SIDE_RETURN" => Some(Self::LsLiteSideReturn),
            "LS_GRABCARD_AUTO_ENTER_ACTIVITY_LIVE" => {
                Some(Self::LsGrabcardAutoEnterActivityLive)
            }
            "LS_ANCHOR_ENDPAGE_RECO_LIVE" => Some(Self::LsAnchorEndpageRecoLive),
            "LS_LIVE_MASK_MORE_LIVE" => Some(Self::LsLiveMaskMoreLive),
            "LS_LIVE_2023_4TAB" => Some(Self::LsLive20234tab),
            "LS_PROFILE_FANGCHAN_CARD" => Some(Self::LsProfileFangchanCard),
            "LS_FANGCHAN_MARKET_ACTIVITY_PAGE" => {
                Some(Self::LsFangchanMarketActivityPage)
            }
            "LS_XTAB_LIFE_CARD_LIVING_PHOTO" => Some(Self::LsXtabLifeCardLivingPhoto),
            "LS_HOTSPOT_PREVIEW_LIVE" => Some(Self::LsHotspotPreviewLive),
            "LS_NEARBY_MAP_LIVE_VOICE" => Some(Self::LsNearbyMapLiveVoice),
            "LS_LIVE_RESERVE_STICKER" => Some(Self::LsLiveReserveSticker),
            "LS_TV_STATION_CARD" => Some(Self::LsTvStationCard),
            "LS_COIN_TASK_GANDI_CARD" => Some(Self::LsCoinTaskGandiCard),
            "LS_HOT_LIVE_CHANNEL_PREVIEW" => Some(Self::LsHotLiveChannelPreview),
            "LS_SCHOOL_MAP" => Some(Self::LsSchoolMap),
            "LS_SEARCH_COMMODITY_MINI_PREVIEW" => {
                Some(Self::LsSearchCommodityMiniPreview)
            }
            "LS_FEATURE_FLOATING_LAYER" => Some(Self::LsFeatureFloatingLayer),
            "LS_LIVE_GUIDE_POPUP" => Some(Self::LsLiveGuidePopup),
            "LS_INTERACTIVE_INTERACTION" => Some(Self::LsInteractiveInteraction),
            "LS_MENU_VOICE_PARTY" => Some(Self::LsMenuVoiceParty),
            "LS_DANMU_RANK_LIVE" => Some(Self::LsDanmuRankLive),
            "LS_LIVE_NEW_RANK" => Some(Self::LsLiveNewRank),
            "LS_HOT_TALK" => Some(Self::LsHotTalk),
            "LS_SINGLE_LINE_PHOTO_FEED_QUICK_INTERACTIVE" => {
                Some(Self::LsSingleLinePhotoFeedQuickInteractive)
            }
            "LS_SIMPLE_BOTTOM_CARD" => Some(Self::LsSimpleBottomCard),
            "LS_TALENT_LIST" => Some(Self::LsTalentList),
            "LS_KWAISHOP_FLOATING_WINDOW" => Some(Self::LsKwaishopFloatingWindow),
            "LS_FIND_JOB_SQUARE" => Some(Self::LsFindJobSquare),
            "LS_NEARBY_SIMPLE" => Some(Self::LsNearbySimple),
            "LS_FIND_FEED_SIMPLE" => Some(Self::LsFindFeedSimple),
            "LS_BARRAGE_GAMEPLAY_CENTER_MAIN_PAGE" => {
                Some(Self::LsBarrageGameplayCenterMainPage)
            }
            "LS_RVIP_FEATURED_CHANNEL" => Some(Self::LsRvipFeaturedChannel),
            "LS_DANMU_GAMEPLAY" => Some(Self::LsDanmuGameplay),
            "LS_PROFILE_BUTTON_GO_LIVE" => Some(Self::LsProfileButtonGoLive),
            "LS_MENU_OFTEN_WATCH" => Some(Self::LsMenuOftenWatch),
            "LS_SINGLE_PLACE_TAG" => Some(Self::LsSinglePlaceTag),
            "LS_NEARBY_DOUBLE_SIMPLE" => Some(Self::LsNearbyDoubleSimple),
            "LS_DANMU_SCREEN_TREASURE_BOX_VIEWING_TASK" => {
                Some(Self::LsDanmuScreenTreasureBoxViewingTask)
            }
            "LS_TUANBO_RANK_LIVE" => Some(Self::LsTuanboRankLive),
            "LS_GONGGE_RANK_LIVE" => Some(Self::LsGonggeRankLive),
            "LS_COMMON_DETAIL_PREVIEW" => Some(Self::LsCommonDetailPreview),
            "LS_SINGLE_BIG_CARD" => Some(Self::LsSingleBigCard),
            "LS_PHOTO_ANCHOR_NAME" => Some(Self::LsPhotoAnchorName),
            "LS_DOUBLE_FIND_NEW_FOLLOW_CARD" => Some(Self::LsDoubleFindNewFollowCard),
            "LS_BANBAN_LIVE_CARD" => Some(Self::LsBanbanLiveCard),
            "LS_INCREASE_GOLD_CARD" => Some(Self::LsIncreaseGoldCard),
            "LS_FIND_FRIENDS_PYMK" => Some(Self::LsFindFriendsPymk),
            "LS_WIDGETER_LIVE_REMINDER" => Some(Self::LsWidgeterLiveReminder),
            "LS_PUSH_POPUP" => Some(Self::LsPushPopup),
            "LS_FOLLOW_SEE_MORE" => Some(Self::LsFollowSeeMore),
            "LS_WIDGETER_LIVE_REMINDER_BOOKMARK" => {
                Some(Self::LsWidgeterLiveReminderBookmark)
            }
            "LS_SIMPLE_LIVE_PUSH" => Some(Self::LsSimpleLivePush),
            "LS_PROFILE_DESKTOP_WIDGET" => Some(Self::LsProfileDesktopWidget),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveStreamContentType {
    Default = 0,
    MusicStation = 1,
    Thanos = 2,
    NormalSlide = 3,
    LiveAggregate = 4,
    FollowLive = 5,
    VoiceParty = 6,
    Ktv = 7,
    GzoneSlide = 8,
    GzoneLiveNormal = 9,
    GzoneLiveSlide = 10,
    GzoneBanner = 11,
    LiveMoreSquareLive = 12,
    GzoneLiveCardAutoPlay = 13,
    HotPreview = 14,
    GzoneCompetitionBanner = 15,
    ProfileLive = 16,
    FrequentlyVisitedAuthor = 17,
    LivePreviewBeautifulTime = 18,
}
impl LiveStreamContentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Default => "LiveStreamContentType_Default",
            Self::MusicStation => "LiveStreamContentType_Music_Station",
            Self::Thanos => "LiveStreamContentType_Thanos",
            Self::NormalSlide => "LiveStreamContentType_Normal_Slide",
            Self::LiveAggregate => "LiveStreamContentType_Live_Aggregate",
            Self::FollowLive => "LiveStreamContentType_Follow_Live",
            Self::VoiceParty => "LiveStreamContentType_VOICE_PARTY",
            Self::Ktv => "LiveStreamContentType_KTV",
            Self::GzoneSlide => "LiveStreamContentType_GZONE_SLIDE",
            Self::GzoneLiveNormal => "LiveStreamContentType_GzoneLiveNormal",
            Self::GzoneLiveSlide => "LiveStreamContentType_GzoneLiveSlide",
            Self::GzoneBanner => "LiveStreamContentType_GZONE_BANNER",
            Self::LiveMoreSquareLive => "LiveStreamContentType_Live_More_Square_Live",
            Self::GzoneLiveCardAutoPlay => {
                "LiveStreamContentType_GZONE_LIVE_CARD_AUTO_PLAY"
            }
            Self::HotPreview => "LiveStreamContentType_Hot_Preview",
            Self::GzoneCompetitionBanner => {
                "LiveStreamContentType_GZONE_COMPETITION_BANNER"
            }
            Self::ProfileLive => "LiveStreamContentType_Profile_Live",
            Self::FrequentlyVisitedAuthor => {
                "LiveStreamContentType_FREQUENTLY_VISITED_AUTHOR"
            }
            Self::LivePreviewBeautifulTime => {
                "LiveStreamContentType_LIVE_PREVIEW_BEAUTIFUL_TIME"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LiveStreamContentType_Default" => Some(Self::Default),
            "LiveStreamContentType_Music_Station" => Some(Self::MusicStation),
            "LiveStreamContentType_Thanos" => Some(Self::Thanos),
            "LiveStreamContentType_Normal_Slide" => Some(Self::NormalSlide),
            "LiveStreamContentType_Live_Aggregate" => Some(Self::LiveAggregate),
            "LiveStreamContentType_Follow_Live" => Some(Self::FollowLive),
            "LiveStreamContentType_VOICE_PARTY" => Some(Self::VoiceParty),
            "LiveStreamContentType_KTV" => Some(Self::Ktv),
            "LiveStreamContentType_GZONE_SLIDE" => Some(Self::GzoneSlide),
            "LiveStreamContentType_GzoneLiveNormal" => Some(Self::GzoneLiveNormal),
            "LiveStreamContentType_GzoneLiveSlide" => Some(Self::GzoneLiveSlide),
            "LiveStreamContentType_GZONE_BANNER" => Some(Self::GzoneBanner),
            "LiveStreamContentType_Live_More_Square_Live" => {
                Some(Self::LiveMoreSquareLive)
            }
            "LiveStreamContentType_GZONE_LIVE_CARD_AUTO_PLAY" => {
                Some(Self::GzoneLiveCardAutoPlay)
            }
            "LiveStreamContentType_Hot_Preview" => Some(Self::HotPreview),
            "LiveStreamContentType_GZONE_COMPETITION_BANNER" => {
                Some(Self::GzoneCompetitionBanner)
            }
            "LiveStreamContentType_Profile_Live" => Some(Self::ProfileLive),
            "LiveStreamContentType_FREQUENTLY_VISITED_AUTHOR" => {
                Some(Self::FrequentlyVisitedAuthor)
            }
            "LiveStreamContentType_LIVE_PREVIEW_BEAUTIFUL_TIME" => {
                Some(Self::LivePreviewBeautifulTime)
            }
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Type {
    LiveEntranceTypeUnknown1 = 0,
    LocalWatermark = 1,
    Download = 2,
    NoWatermark = 3,
    ServerWatermark = 4,
    ServerNoWatermark = 5,
}
impl Type {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "Type_LiveEntranceType_UNKNOWN1",
            Self::LocalWatermark => "LOCAL_WATERMARK",
            Self::Download => "DOWNLOAD",
            Self::NoWatermark => "NO_WATERMARK",
            Self::ServerWatermark => "SERVER_WATERMARK",
            Self::ServerNoWatermark => "SERVER_NO_WATERMARK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Type_LiveEntranceType_UNKNOWN1" => Some(Self::LiveEntranceTypeUnknown1),
            "LOCAL_WATERMARK" => Some(Self::LocalWatermark),
            "DOWNLOAD" => Some(Self::Download),
            "NO_WATERMARK" => Some(Self::NoWatermark),
            "SERVER_WATERMARK" => Some(Self::ServerWatermark),
            "SERVER_NO_WATERMARK" => Some(Self::ServerNoWatermark),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PrimaryType {
    LiveEntranceTypeUnkonwn1 = 0,
    Natural = 1,
    Lovely = 2,
    Vigour = 3,
    Elegant = 4,
    Domineering = 5,
    Neutral = 6,
}
impl PrimaryType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnkonwn1 => "PrimaryType_LiveEntranceType_UNKONWN1",
            Self::Natural => "NATURAL",
            Self::Lovely => "LOVELY",
            Self::Vigour => "VIGOUR",
            Self::Elegant => "ELEGANT",
            Self::Domineering => "DOMINEERING",
            Self::Neutral => "NEUTRAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PrimaryType_LiveEntranceType_UNKONWN1" => {
                Some(Self::LiveEntranceTypeUnkonwn1)
            }
            "NATURAL" => Some(Self::Natural),
            "LOVELY" => Some(Self::Lovely),
            "VIGOUR" => Some(Self::Vigour),
            "ELEGANT" => Some(Self::Elegant),
            "DOMINEERING" => Some(Self::Domineering),
            "NEUTRAL" => Some(Self::Neutral),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SecondaryType {
    Unkonwn1 = 0,
    Lipstick = 1,
    Eyebrows = 2,
    Cheek = 3,
    Contour = 4,
    Eyeshadow = 5,
    Eyeliner = 6,
    Lash = 7,
    Eyelids = 8,
    Pupil = 9,
}
impl SecondaryType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unkonwn1 => "SecondaryType_UNKONWN1",
            Self::Lipstick => "LIPSTICK",
            Self::Eyebrows => "EYEBROWS",
            Self::Cheek => "CHEEK",
            Self::Contour => "CONTOUR",
            Self::Eyeshadow => "EYESHADOW",
            Self::Eyeliner => "EYELINER",
            Self::Lash => "LASH",
            Self::Eyelids => "EYELIDS",
            Self::Pupil => "PUPIL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SecondaryType_UNKONWN1" => Some(Self::Unkonwn1),
            "LIPSTICK" => Some(Self::Lipstick),
            "EYEBROWS" => Some(Self::Eyebrows),
            "CHEEK" => Some(Self::Cheek),
            "CONTOUR" => Some(Self::Contour),
            "EYESHADOW" => Some(Self::Eyeshadow),
            "EYELINER" => Some(Self::Eyeliner),
            "LASH" => Some(Self::Lash),
            "EYELIDS" => Some(Self::Eyelids),
            "PUPIL" => Some(Self::Pupil),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SubFeatures {
    Unkonwn1 = 0,
    SmoothSkin = 1,
    SkinColor = 2,
    ThinFace = 3,
    Jaw = 4,
    EnlargeEye = 5,
    Wrinkle = 6,
    EyeBag = 7,
    EyeBrighten = 8,
    TeethBrighten = 9,
    BeautifyLips = 10,
    NoseShadow = 11,
    CutFace = 12,
    TinyFace = 13,
    ShortFace = 14,
    NarrowFace = 15,
    ThinLowerJaw = 16,
    LowerJawbone = 17,
    ThinCheekbone = 18,
    EyeDistance = 19,
    ThinNose = 20,
    LongNose = 21,
    Philtrum = 22,
    EyeWidth = 23,
    EyeHeight = 24,
    EyeCorner = 25,
    Mouth = 26,
    MouthWidth = 27,
    MouthHeight = 28,
    ForeHead = 29,
    Clarity = 30,
    Stereo = 31,
    HairLine = 32,
    SkinSmooth = 33,
    NoseBridge = 34,
    Temple = 35,
    EyebrowSize = 36,
    EyePosition = 37,
    NoseLength = 38,
    JawThin = 39,
    FaceShort = 40,
    Bright = 41,
    Blond = 42,
    Ruddy = 43,
    ShrinkHead = 44,
    HighSkull = 45,
    FreckleAcne = 46,
    Wocan = 47,
    WaterSkin = 48,
    JawLine = 49,
    DuduLip = 50,
    AppleFace = 51,
    DoubleEyeLid = 52,
    HighNose = 53,
    Remaji = 54,
    ThinBody = 55,
    ThinLoin = 56,
    LongLeg = 57,
    MouthPosition = 58,
    SmileLips = 59,
    HighForehead = 60,
    WidthForehead = 61,
    Court = 62,
    MidCourt = 63,
    LowerCourt = 64,
    AiWhitening = 65,
    AddLight = 66,
}
impl SubFeatures {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unkonwn1 => "SubFeatures_UNKONWN1",
            Self::SmoothSkin => "SMOOTH_SKIN",
            Self::SkinColor => "SKIN_COLOR",
            Self::ThinFace => "THIN_FACE",
            Self::Jaw => "JAW",
            Self::EnlargeEye => "ENLARGE_EYE",
            Self::Wrinkle => "WRINKLE",
            Self::EyeBag => "EYE_BAG",
            Self::EyeBrighten => "EYE_BRIGHTEN",
            Self::TeethBrighten => "TEETH_BRIGHTEN",
            Self::BeautifyLips => "BEAUTIFY_LIPS",
            Self::NoseShadow => "NOSE_SHADOW",
            Self::CutFace => "CUT_FACE",
            Self::TinyFace => "TINY_FACE",
            Self::ShortFace => "SHORT_FACE",
            Self::NarrowFace => "NARROW_FACE",
            Self::ThinLowerJaw => "THIN_LOWER_JAW",
            Self::LowerJawbone => "LOWER_JAWBONE",
            Self::ThinCheekbone => "THIN_CHEEKBONE",
            Self::EyeDistance => "EYE_DISTANCE",
            Self::ThinNose => "THIN_NOSE",
            Self::LongNose => "LONG_NOSE",
            Self::Philtrum => "PHILTRUM",
            Self::EyeWidth => "EYE_WIDTH",
            Self::EyeHeight => "EYE_HEIGHT",
            Self::EyeCorner => "EYE_CORNER",
            Self::Mouth => "MOUTH",
            Self::MouthWidth => "MOUTH_WIDTH",
            Self::MouthHeight => "MOUTH_HEIGHT",
            Self::ForeHead => "FORE_HEAD",
            Self::Clarity => "CLARITY",
            Self::Stereo => "STEREO",
            Self::HairLine => "HAIR_LINE",
            Self::SkinSmooth => "SKIN_SMOOTH",
            Self::NoseBridge => "NOSE_BRIDGE",
            Self::Temple => "TEMPLE",
            Self::EyebrowSize => "EYEBROW_SIZE",
            Self::EyePosition => "EYE_POSITION",
            Self::NoseLength => "NOSE_LENGTH",
            Self::JawThin => "JAW_THIN",
            Self::FaceShort => "FACE_SHORT",
            Self::Bright => "BRIGHT",
            Self::Blond => "BLOND",
            Self::Ruddy => "RUDDY",
            Self::ShrinkHead => "SHRINK_HEAD",
            Self::HighSkull => "HIGH_SKULL",
            Self::FreckleAcne => "FRECKLE_ACNE",
            Self::Wocan => "WOCAN",
            Self::WaterSkin => "WATER_SKIN",
            Self::JawLine => "JAW_LINE",
            Self::DuduLip => "DUDU_LIP",
            Self::AppleFace => "APPLE_FACE",
            Self::DoubleEyeLid => "DOUBLE_EYE_LID",
            Self::HighNose => "HIGH_NOSE",
            Self::Remaji => "REMAJI",
            Self::ThinBody => "THIN_BODY",
            Self::ThinLoin => "THIN_LOIN",
            Self::LongLeg => "LONG_LEG",
            Self::MouthPosition => "MOUTH_POSITION",
            Self::SmileLips => "SMILE_LIPS",
            Self::HighForehead => "HIGH_FOREHEAD",
            Self::WidthForehead => "WIDTH_FOREHEAD",
            Self::Court => "COURT",
            Self::MidCourt => "MID_COURT",
            Self::LowerCourt => "LOWER_COURT",
            Self::AiWhitening => "AI_WHITENING",
            Self::AddLight => "ADD_LIGHT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SubFeatures_UNKONWN1" => Some(Self::Unkonwn1),
            "SMOOTH_SKIN" => Some(Self::SmoothSkin),
            "SKIN_COLOR" => Some(Self::SkinColor),
            "THIN_FACE" => Some(Self::ThinFace),
            "JAW" => Some(Self::Jaw),
            "ENLARGE_EYE" => Some(Self::EnlargeEye),
            "WRINKLE" => Some(Self::Wrinkle),
            "EYE_BAG" => Some(Self::EyeBag),
            "EYE_BRIGHTEN" => Some(Self::EyeBrighten),
            "TEETH_BRIGHTEN" => Some(Self::TeethBrighten),
            "BEAUTIFY_LIPS" => Some(Self::BeautifyLips),
            "NOSE_SHADOW" => Some(Self::NoseShadow),
            "CUT_FACE" => Some(Self::CutFace),
            "TINY_FACE" => Some(Self::TinyFace),
            "SHORT_FACE" => Some(Self::ShortFace),
            "NARROW_FACE" => Some(Self::NarrowFace),
            "THIN_LOWER_JAW" => Some(Self::ThinLowerJaw),
            "LOWER_JAWBONE" => Some(Self::LowerJawbone),
            "THIN_CHEEKBONE" => Some(Self::ThinCheekbone),
            "EYE_DISTANCE" => Some(Self::EyeDistance),
            "THIN_NOSE" => Some(Self::ThinNose),
            "LONG_NOSE" => Some(Self::LongNose),
            "PHILTRUM" => Some(Self::Philtrum),
            "EYE_WIDTH" => Some(Self::EyeWidth),
            "EYE_HEIGHT" => Some(Self::EyeHeight),
            "EYE_CORNER" => Some(Self::EyeCorner),
            "MOUTH" => Some(Self::Mouth),
            "MOUTH_WIDTH" => Some(Self::MouthWidth),
            "MOUTH_HEIGHT" => Some(Self::MouthHeight),
            "FORE_HEAD" => Some(Self::ForeHead),
            "CLARITY" => Some(Self::Clarity),
            "STEREO" => Some(Self::Stereo),
            "HAIR_LINE" => Some(Self::HairLine),
            "SKIN_SMOOTH" => Some(Self::SkinSmooth),
            "NOSE_BRIDGE" => Some(Self::NoseBridge),
            "TEMPLE" => Some(Self::Temple),
            "EYEBROW_SIZE" => Some(Self::EyebrowSize),
            "EYE_POSITION" => Some(Self::EyePosition),
            "NOSE_LENGTH" => Some(Self::NoseLength),
            "JAW_THIN" => Some(Self::JawThin),
            "FACE_SHORT" => Some(Self::FaceShort),
            "BRIGHT" => Some(Self::Bright),
            "BLOND" => Some(Self::Blond),
            "RUDDY" => Some(Self::Ruddy),
            "SHRINK_HEAD" => Some(Self::ShrinkHead),
            "HIGH_SKULL" => Some(Self::HighSkull),
            "FRECKLE_ACNE" => Some(Self::FreckleAcne),
            "WOCAN" => Some(Self::Wocan),
            "WATER_SKIN" => Some(Self::WaterSkin),
            "JAW_LINE" => Some(Self::JawLine),
            "DUDU_LIP" => Some(Self::DuduLip),
            "APPLE_FACE" => Some(Self::AppleFace),
            "DOUBLE_EYE_LID" => Some(Self::DoubleEyeLid),
            "HIGH_NOSE" => Some(Self::HighNose),
            "REMAJI" => Some(Self::Remaji),
            "THIN_BODY" => Some(Self::ThinBody),
            "THIN_LOIN" => Some(Self::ThinLoin),
            "LONG_LEG" => Some(Self::LongLeg),
            "MOUTH_POSITION" => Some(Self::MouthPosition),
            "SMILE_LIPS" => Some(Self::SmileLips),
            "HIGH_FOREHEAD" => Some(Self::HighForehead),
            "WIDTH_FOREHEAD" => Some(Self::WidthForehead),
            "COURT" => Some(Self::Court),
            "MID_COURT" => Some(Self::MidCourt),
            "LOWER_COURT" => Some(Self::LowerCourt),
            "AI_WHITENING" => Some(Self::AiWhitening),
            "ADD_LIGHT" => Some(Self::AddLight),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthType {
    Unkonwn1 = 0,
    WifiGatewayAuthentication = 1,
    GatewayAuthentication = 2,
    SmsUpwardAuthentication = 3,
    SmsAuthenticationCodeLogin = 4,
}
impl AuthType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unkonwn1 => "AuthType_UNKONWN1",
            Self::WifiGatewayAuthentication => "WIFI_GATEWAY_AUTHENTICATION",
            Self::GatewayAuthentication => "GATEWAY_AUTHENTICATION",
            Self::SmsUpwardAuthentication => "SMS_UPWARD_AUTHENTICATION",
            Self::SmsAuthenticationCodeLogin => "SMS_AUTHENTICATION_CODE_LOGIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AuthType_UNKONWN1" => Some(Self::Unkonwn1),
            "WIFI_GATEWAY_AUTHENTICATION" => Some(Self::WifiGatewayAuthentication),
            "GATEWAY_AUTHENTICATION" => Some(Self::GatewayAuthentication),
            "SMS_UPWARD_AUTHENTICATION" => Some(Self::SmsUpwardAuthentication),
            "SMS_AUTHENTICATION_CODE_LOGIN" => Some(Self::SmsAuthenticationCodeLogin),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Channel {
    Prefetch = 0,
    QuickLogin = 1,
}
impl Channel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Prefetch => "PREFETCH",
            Self::QuickLogin => "QUICK_LOGIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PREFETCH" => Some(Self::Prefetch),
            "QUICK_LOGIN" => Some(Self::QuickLogin),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CommentTag {
    None = 0,
    Select = 1,
    Author = 2,
    AuthorLiked = 3,
    Following = 4,
}
impl CommentTag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "CommentTag_NONE",
            Self::Select => "SELECT",
            Self::Author => "AUTHOR",
            Self::AuthorLiked => "AUTHOR_LIKED",
            Self::Following => "FOLLOWING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CommentTag_NONE" => Some(Self::None),
            "SELECT" => Some(Self::Select),
            "AUTHOR" => Some(Self::Author),
            "AUTHOR_LIKED" => Some(Self::AuthorLiked),
            "FOLLOWING" => Some(Self::Following),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RecallType {
    UnknownRecall = 0,
    Liked = 1,
    Other = 2,
}
impl RecallType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownRecall => "UNKNOWN_RECALL",
            Self::Liked => "LIKED",
            Self::Other => "OTHER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_RECALL" => Some(Self::UnknownRecall),
            "LIKED" => Some(Self::Liked),
            "OTHER" => Some(Self::Other),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DanmakuType {
    Unknown1 = 0,
    Comment = 1,
    Normal = 2,
    Plus = 3,
    Preset = 4,
    Sticker = 5,
    Instill = 6,
}
impl DanmakuType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "DanmakuType_UNKNOWN1",
            Self::Comment => "DanmakuType_COMMENT",
            Self::Normal => "DanmakuType_NORMAL",
            Self::Plus => "PLUS",
            Self::Preset => "PRESET",
            Self::Sticker => "STICKER",
            Self::Instill => "INSTILL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DanmakuType_UNKNOWN1" => Some(Self::Unknown1),
            "DanmakuType_COMMENT" => Some(Self::Comment),
            "DanmakuType_NORMAL" => Some(Self::Normal),
            "PLUS" => Some(Self::Plus),
            "PRESET" => Some(Self::Preset),
            "STICKER" => Some(Self::Sticker),
            "INSTILL" => Some(Self::Instill),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RankType {
    LiveEntranceTypeUnknown0 = 0,
    Nation = 1,
    District = 2,
    NotInRank = 3,
    Business = 4,
    Appearance = 5,
    Gzone = 6,
    Popularity = 7,
    Audience = 8,
    City = 9,
    Recruit = 10,
    GzoneSubRank = 11,
    Danmu = 12,
    NewRank = 13,
    HourRank = 14,
    DanmuAnchor = 15,
    DanmuGameplay = 16,
    GiftRank = 17,
    GonggeRank = 18,
    TuanboRank = 19,
    QuxianRank = 20,
}
impl RankType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown0 => "RankType_LiveEntranceType_UNKNOWN0",
            Self::Nation => "NATION",
            Self::District => "DISTRICT",
            Self::NotInRank => "NOT_IN_RANK",
            Self::Business => "BUSINESS",
            Self::Appearance => "APPEARANCE",
            Self::Gzone => "GZONE",
            Self::Popularity => "POPULARITY",
            Self::Audience => "RankType_AUDIENCE",
            Self::City => "CITY",
            Self::Recruit => "RankType_RECRUIT",
            Self::GzoneSubRank => "GZONE_SUB_RANK",
            Self::Danmu => "DANMU",
            Self::NewRank => "NEW_RANK",
            Self::HourRank => "HOUR_RANK",
            Self::DanmuAnchor => "DANMU_ANCHOR",
            Self::DanmuGameplay => "DANMU_GAMEPLAY",
            Self::GiftRank => "GIFT_RANK",
            Self::GonggeRank => "GONGGE_RANK",
            Self::TuanboRank => "TUANBO_RANK",
            Self::QuxianRank => "QUXIAN_RANK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RankType_LiveEntranceType_UNKNOWN0" => Some(Self::LiveEntranceTypeUnknown0),
            "NATION" => Some(Self::Nation),
            "DISTRICT" => Some(Self::District),
            "NOT_IN_RANK" => Some(Self::NotInRank),
            "BUSINESS" => Some(Self::Business),
            "APPEARANCE" => Some(Self::Appearance),
            "GZONE" => Some(Self::Gzone),
            "POPULARITY" => Some(Self::Popularity),
            "RankType_AUDIENCE" => Some(Self::Audience),
            "CITY" => Some(Self::City),
            "RankType_RECRUIT" => Some(Self::Recruit),
            "GZONE_SUB_RANK" => Some(Self::GzoneSubRank),
            "DANMU" => Some(Self::Danmu),
            "NEW_RANK" => Some(Self::NewRank),
            "HOUR_RANK" => Some(Self::HourRank),
            "DANMU_ANCHOR" => Some(Self::DanmuAnchor),
            "DANMU_GAMEPLAY" => Some(Self::DanmuGameplay),
            "GIFT_RANK" => Some(Self::GiftRank),
            "GONGGE_RANK" => Some(Self::GonggeRank),
            "TUANBO_RANK" => Some(Self::TuanboRank),
            "QUXIAN_RANK" => Some(Self::QuxianRank),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DownloadType {
    Unknown1 = 0,
    Search = 1,
    Detail = 2,
}
impl DownloadType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "DownloadType_UNKNOWN1",
            Self::Search => "DownloadType_SEARCH",
            Self::Detail => "DETAIL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DownloadType_UNKNOWN1" => Some(Self::Unknown1),
            "DownloadType_SEARCH" => Some(Self::Search),
            "DETAIL" => Some(Self::Detail),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GiftBoxSourceType {
    LiveEntranceTypeUnknown = 0,
    DistrictRank = 1,
    Nomal = 2,
    VoicePartyPersonalCard = 3,
    VoicePartyMic = 4,
    VoicePartyExclusiveGift = 5,
    VoicePartyContributioinList = 6,
    TopUserListSendGiftHint = 7,
    PkFirstBlood = 8,
    ToLightUpButton = 9,
    UserPanelBottomBar = 10,
    TopPrivilegePanelBottomBar = 11,
    UserPanelWeekBottomBar = 12,
    TopPrivilegePanelWeekBottomBar = 13,
    PeakNightRankHelpButton = 14,
    PeakNightTopCard = 15,
    LiveAudienceQuestionEntrance = 16,
    LiveGiftRedPacketPanel = 18,
    LiveRedPacketRainGainSucceedCard = 19,
    LivePkGiftsStartCard = 20,
    LiveGameRankListWeek = 21,
    LiveGameRankListFans = 22,
    LiveWishlist = 23,
    LiveHourlyNationalRankList = 24,
    LiveHourlyDistrictRankList = 25,
    LiveFansGroupTaskCard = 26,
    LiveAudienceChatProsonalCardSendGift = 27,
    LiveAudienceChatAchievementRankSendGift = 28,
    LiveDrawGiftsPanel = 29,
    LiveHourlyAppearanceRankList = 30,
    LiveHourlyTalentRankList = 31,
    LiveElectricityTrustCardSendGiftTask = 32,
    LiveCommonRedPackResultPane = 33,
    LiveArrowRedPackResultPanel = 34,
    LiveHourlyGzoneRankList = 35,
    LiveGzoneKshellRank = 36,
    LiveCommentFeedArea = 37,
    LiveCheapCard = 38,
    LiveAudienceLimitTimeTaskCard = 39,
    LiveAudienceLimitTimeTaskButton = 40,
    LiveHourlyPopularityRankList = 41,
    LiveTakeAShotPopopSendAuthor = 42,
    LivePkInformationCard = 43,
    LiveMakeKwaiCoin = 44,
    NebulaH5PageTaskCenter = 45,
    SendGiftCardGiftButton = 46,
    LiveArrowConditiconRedPackResultPanel = 47,
    AudiencePanelLiveMemberBottomBar = 48,
    LiveCommentNotice = 49,
    AudienceRankPanelListEffect = 50,
    MoreCommentCheapGiftButton = 51,
    ConvergencePkRankHelpButton = 52,
    MultiPkHelp = 53,
    MultiLineWishGift = 54,
    LiveLiteGiftButton = 55,
    LiteSendGiftCardGiftButton = 56,
    LiteCheapGift = 57,
    LiveGzoneKingRune = 58,
    LiveBottomPendantSendGiftButton = 59,
    LiteAudiencePanelLiveMemberBottomBar = 60,
    LiteHighGuideGift = 61,
    LiteQuickActivityGift = 62,
    LiveGiftAchievementSeizeTitleButton = 63,
    LiveGiftAchievementContinueSendButton = 64,
    LiveGiftAchievementStrongNoticeButton = 65,
    LiveShareRedPackResultPanel = 66,
    LiveFansGroupRedPackResultPanel = 67,
    LiveH5PageCommon = 68,
    LiveDateGuideSendPopupChat = 69,
    LiveDateGuideSendPopupThankAnthor = 70,
    LiveCommentSectionSendGift = 71,
    LiteCommentSectionSendGift = 72,
    LiteCheapGiftS = 73,
    LiteFansGiftS = 74,
    LiveCoinTask = 75,
    LiteQuickGiftWatchOrLike = 76,
    LiteQuickGiftPk = 77,
    LiveTaskRedPacket = 78,
    LiveTaskRedPacketTaskPage = 79,
    LiveInteractiveGameplayQuickSend = 80,
    HeatProgrammeWant = 81,
    LiveCoinTaskAdd = 82,
    LiveBottomSendTogetherButton = 83,
    VoicePartyContributioinTeampkList = 84,
    LivePopulayTicketPopupSendPaid = 85,
    VoicePartyContributioinGuestpkList = 86,
    LiveInstantDeathGiftRedPacket = 87,
    LiveInstantDeathKwaiCoinRedPacket = 88,
    LiveDateAutoSendPopupThankAnthor = 89,
    LiveGiftAchievementOwnIamgePage = 90,
    LivePayUserTaskH5 = 91,
    LiveGiftNewActivitySendAll = 92,
    R4orainQuickSend = 93,
    LiveCouponTaskCard = 94,
    WalletPageKwbiCoinTicket = 95,
    WishSend = 96,
    JinbiTaskButton = 97,
    JinbiTaskPopup = 98,
    BattlePayTask = 99,
    BattleUserPageButton = 100,
    PkTaskSystem = 101,
    LivePopularRankBottomButton = 102,
    ShowPartyDoubleBottom = 103,
    ShowPartyPkItem = 104,
    ShowPartyRank = 105,
    ShowPartyRankQuick = 106,
    ShowPartyGiftCount = 107,
    LiveFirstSendPopularTicketPendant = 108,
    LivePayBottom = 109,
    ShowPartyContributeListSendGift = 110,
    LivePkRedPacketSendGift = 111,
    ShowPartyGroupSend = 112,
    LiveGiftPanelGiftDetailH5 = 113,
    LiveRechargePaySendGift = 114,
    LiveWzGameCard = 115,
    LivePopulayRankHoner = 116,
    ShowPartyContributeListSolopkSendGift = 117,
    ShowPartyContributeListBrawlpkSendGift = 118,
    LiveDapingNotice = 119,
    ShowPartyContributeListRankSendGift = 120,
    ShowPartyContributeListSolopkQuick = 121,
    ShowPartyContributeListBrawlpkQuick = 122,
    LiveCommentRepressPayPopup = 123,
    LiveCommentButtonPayPopup = 124,
    LiveGonggeRank = 125,
    LiveTuanboRank = 126,
    ShowPartyContributeListLimitTaskSendGift = 127,
    LiveSuperSendGiftNotice = 128,
    GridProgramListOrder = 129,
    LivePkJianfenGift = 130,
    LivePayGroupSendCard = 131,
    LiveSpringActivcityMudanH5 = 132,
    LiveTeamMemberPanelGiftButton = 133,
    LivePopularVoteHelp = 134,
    LiveActivityGiftH5YuliuYi = 135,
    LiveActivityGiftH5YuliuEr = 136,
    LiveJinbiTaskYiqiChangqianTask = 137,
    LiveJinbiTaskErqiJianneiTask = 138,
    LiveJinbiTaskRewardPopup = 139,
    LiveGiftNewPage = 140,
    LiveJiliTaskExchangeKwaiCoin = 141,
    LiveLianpingHeyanGongxianrankSend = 142,
    LiveLianpingHeyanItemSend = 143,
}
impl GiftBoxSourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => "GiftBoxSourceType_LiveEntranceType_UNKNOWN",
            Self::DistrictRank => "GiftBoxSourceType_DISTRICT_RANK",
            Self::Nomal => "NOMAL",
            Self::VoicePartyPersonalCard => "VOICE_PARTY_PERSONAL_CARD",
            Self::VoicePartyMic => "VOICE_PARTY_MIC",
            Self::VoicePartyExclusiveGift => "VOICE_PARTY_EXCLUSIVE_GIFT",
            Self::VoicePartyContributioinList => "VOICE_PARTY_CONTRIBUTIOIN_LIST",
            Self::TopUserListSendGiftHint => "TOP_USER_LIST_SEND_GIFT_HINT",
            Self::PkFirstBlood => "PK_FIRST_BLOOD",
            Self::ToLightUpButton => "TO_LIGHT_UP_BUTTON",
            Self::UserPanelBottomBar => "USER_PANEL_BOTTOM_BAR",
            Self::TopPrivilegePanelBottomBar => "TOP_PRIVILEGE_PANEL_BOTTOM_BAR",
            Self::UserPanelWeekBottomBar => "USER_PANEL_WEEK_BOTTOM_BAR",
            Self::TopPrivilegePanelWeekBottomBar => "TOP_PRIVILEGE_PANEL_WEEK_BOTTOM_BAR",
            Self::PeakNightRankHelpButton => "PEAK_NIGHT_RANK_HELP_BUTTON",
            Self::PeakNightTopCard => "PEAK_NIGHT_TOP_CARD",
            Self::LiveAudienceQuestionEntrance => "LIVE_AUDIENCE_QUESTION_ENTRANCE",
            Self::LiveGiftRedPacketPanel => "LIVE_GIFT_RED_PACKET_PANEL",
            Self::LiveRedPacketRainGainSucceedCard => {
                "LIVE_RED_PACKET_RAIN_GAIN_SUCCEED_CARD"
            }
            Self::LivePkGiftsStartCard => "LIVE_PK_GIFTS_START_CARD",
            Self::LiveGameRankListWeek => "LIVE_GAME_RANK_LIST_WEEK",
            Self::LiveGameRankListFans => "LIVE_GAME_RANK_LIST_FANS",
            Self::LiveWishlist => "LIVE_WISHLIST",
            Self::LiveHourlyNationalRankList => "LIVE_HOURLY_NATIONAL_RANK_LIST",
            Self::LiveHourlyDistrictRankList => "LIVE_HOURLY_DISTRICT_RANK_LIST",
            Self::LiveFansGroupTaskCard => "LIVE_FANS_GROUP_TASK_CARD",
            Self::LiveAudienceChatProsonalCardSendGift => {
                "LIVE_AUDIENCE_CHAT_PROSONAL_CARD_SEND_GIFT"
            }
            Self::LiveAudienceChatAchievementRankSendGift => {
                "LIVE_AUDIENCE_CHAT_ACHIEVEMENT_RANK_SEND_GIFT"
            }
            Self::LiveDrawGiftsPanel => "LIVE_DRAW_GIFTS_PANEL",
            Self::LiveHourlyAppearanceRankList => "LIVE_HOURLY_APPEARANCE_RANK_LIST",
            Self::LiveHourlyTalentRankList => "LIVE_HOURLY_TALENT_RANK_LIST",
            Self::LiveElectricityTrustCardSendGiftTask => {
                "LIVE_ELECTRICITY_TRUST_CARD_SEND_GIFT_TASK"
            }
            Self::LiveCommonRedPackResultPane => "LIVE_COMMON_RED_PACK_RESULT_PANE",
            Self::LiveArrowRedPackResultPanel => "LIVE_ARROW_RED_PACK_RESULT_PANEL",
            Self::LiveHourlyGzoneRankList => "LIVE_HOURLY_GZONE_RANK_LIST",
            Self::LiveGzoneKshellRank => "LIVE_GZONE_KSHELL_RANK",
            Self::LiveCommentFeedArea => "LIVE_COMMENT_FEED_AREA",
            Self::LiveCheapCard => "LIVE_CHEAP_CARD",
            Self::LiveAudienceLimitTimeTaskCard => "LIVE_AUDIENCE_LIMIT_TIME_TASK_CARD",
            Self::LiveAudienceLimitTimeTaskButton => {
                "LIVE_AUDIENCE_LIMIT_TIME_TASK_BUTTON"
            }
            Self::LiveHourlyPopularityRankList => "LIVE_HOURLY_POPULARITY_RANK_LIST",
            Self::LiveTakeAShotPopopSendAuthor => "LIVE_TAKE_A_SHOT_POPOP_SEND_AUTHOR",
            Self::LivePkInformationCard => "LIVE_PK_INFORMATION_CARD",
            Self::LiveMakeKwaiCoin => "LIVE_MAKE_KWAI_COIN",
            Self::NebulaH5PageTaskCenter => "NEBULA_H5_PAGE_TASK_CENTER",
            Self::SendGiftCardGiftButton => "SEND_GIFT_CARD_GIFT_BUTTON",
            Self::LiveArrowConditiconRedPackResultPanel => {
                "LIVE_ARROW_CONDITICON_RED_PACK_RESULT_PANEL"
            }
            Self::AudiencePanelLiveMemberBottomBar => {
                "AUDIENCE_PANEL_LIVE_MEMBER_BOTTOM_BAR"
            }
            Self::LiveCommentNotice => "LIVE_COMMENT_NOTICE",
            Self::AudienceRankPanelListEffect => "AUDIENCE_RANK_PANEL_LIST_EFFECT",
            Self::MoreCommentCheapGiftButton => "MORE_COMMENT_CHEAP_GIFT_BUTTON",
            Self::ConvergencePkRankHelpButton => "CONVERGENCE_PK_RANK_HELP_BUTTON",
            Self::MultiPkHelp => "MULTI_PK_HELP",
            Self::MultiLineWishGift => "MULTI_LINE_WISH_GIFT",
            Self::LiveLiteGiftButton => "LIVE_LITE_GIFT_BUTTON",
            Self::LiteSendGiftCardGiftButton => "LITE_SEND_GIFT_CARD_GIFT_BUTTON",
            Self::LiteCheapGift => "LITE_CHEAP_GIFT",
            Self::LiveGzoneKingRune => "LIVE_GZONE_KING_RUNE",
            Self::LiveBottomPendantSendGiftButton => {
                "LIVE_BOTTOM_PENDANT_SEND_GIFT_BUTTON"
            }
            Self::LiteAudiencePanelLiveMemberBottomBar => {
                "LITE_AUDIENCE_PANEL_LIVE_MEMBER_BOTTOM_BAR"
            }
            Self::LiteHighGuideGift => "LITE_HIGH_GUIDE_GIFT",
            Self::LiteQuickActivityGift => "LITE_QUICK_ACTIVITY_GIFT",
            Self::LiveGiftAchievementSeizeTitleButton => {
                "LIVE_GIFT_ACHIEVEMENT_SEIZE_TITLE_BUTTON"
            }
            Self::LiveGiftAchievementContinueSendButton => {
                "LIVE_GIFT_ACHIEVEMENT_CONTINUE_SEND_BUTTON"
            }
            Self::LiveGiftAchievementStrongNoticeButton => {
                "LIVE_GIFT_ACHIEVEMENT_STRONG_NOTICE_BUTTON"
            }
            Self::LiveShareRedPackResultPanel => "LIVE_SHARE_RED_PACK_RESULT_PANEL",
            Self::LiveFansGroupRedPackResultPanel => {
                "LIVE_FANS_GROUP_RED_PACK_RESULT_PANEL"
            }
            Self::LiveH5PageCommon => "LIVE_H5_PAGE_COMMON",
            Self::LiveDateGuideSendPopupChat => "LIVE_DATE_GUIDE_SEND_POPUP_CHAT",
            Self::LiveDateGuideSendPopupThankAnthor => {
                "LIVE_DATE_GUIDE_SEND_POPUP_THANK_ANTHOR"
            }
            Self::LiveCommentSectionSendGift => "LIVE_COMMENT_SECTION_SEND_GIFT",
            Self::LiteCommentSectionSendGift => "LITE_COMMENT_SECTION_SEND_GIFT",
            Self::LiteCheapGiftS => "LITE_CHEAP_GIFT_S",
            Self::LiteFansGiftS => "LITE_FANS_GIFT_S",
            Self::LiveCoinTask => "LIVE_COIN_TASK",
            Self::LiteQuickGiftWatchOrLike => "LITE_QUICK_GIFT_WATCH_OR_LIKE",
            Self::LiteQuickGiftPk => "LITE_QUICK_GIFT_PK",
            Self::LiveTaskRedPacket => "LIVE_TASK_RED_PACKET",
            Self::LiveTaskRedPacketTaskPage => "LIVE_TASK_RED_PACKET_TASK_PAGE",
            Self::LiveInteractiveGameplayQuickSend => {
                "LIVE_INTERACTIVE_GAMEPLAY_QUICK_SEND"
            }
            Self::HeatProgrammeWant => "HEAT_PROGRAMME_WANT",
            Self::LiveCoinTaskAdd => "LIVE_COIN_TASK_ADD",
            Self::LiveBottomSendTogetherButton => "LIVE_BOTTOM_SEND_TOGETHER_BUTTON",
            Self::VoicePartyContributioinTeampkList => {
                "VOICE_PARTY_CONTRIBUTIOIN_TEAMPK_LIST"
            }
            Self::LivePopulayTicketPopupSendPaid => "LIVE_POPULAY_TICKET_POPUP_SEND_PAID",
            Self::VoicePartyContributioinGuestpkList => {
                "VOICE_PARTY_CONTRIBUTIOIN_GUESTPK_LIST"
            }
            Self::LiveInstantDeathGiftRedPacket => "LIVE_INSTANT_DEATH_GIFT_RED_PACKET",
            Self::LiveInstantDeathKwaiCoinRedPacket => {
                "LIVE_INSTANT_DEATH_KWAI_COIN_RED_PACKET"
            }
            Self::LiveDateAutoSendPopupThankAnthor => {
                "LIVE_DATE_AUTO_SEND_POPUP_THANK_ANTHOR"
            }
            Self::LiveGiftAchievementOwnIamgePage => {
                "LIVE_GIFT_ACHIEVEMENT_OWN_IAMGE_PAGE"
            }
            Self::LivePayUserTaskH5 => "LIVE_PAY_USER_TASK_H5",
            Self::LiveGiftNewActivitySendAll => "LIVE_GIFT_NEW_ACTIVITY_SEND_ALL",
            Self::R4orainQuickSend => "R4ORAIN_QUICK_SEND",
            Self::LiveCouponTaskCard => "LIVE_COUPON_TASK_CARD",
            Self::WalletPageKwbiCoinTicket => "WALLET_PAGE_KWBI_COIN_TICKET",
            Self::WishSend => "WISH_SEND",
            Self::JinbiTaskButton => "JINBI_TASK_BUTTON",
            Self::JinbiTaskPopup => "JINBI_TASK_POPUP",
            Self::BattlePayTask => "BATTLE_PAY_TASK",
            Self::BattleUserPageButton => "BATTLE_USER_PAGE_BUTTON",
            Self::PkTaskSystem => "PK_TASK_SYSTEM",
            Self::LivePopularRankBottomButton => "LIVE_POPULAR_RANK_BOTTOM_BUTTON",
            Self::ShowPartyDoubleBottom => "SHOW_PARTY_DOUBLE_BOTTOM",
            Self::ShowPartyPkItem => "SHOW_PARTY_PK_ITEM",
            Self::ShowPartyRank => "SHOW_PARTY_RANK",
            Self::ShowPartyRankQuick => "SHOW_PARTY_RANK_QUICK",
            Self::ShowPartyGiftCount => "SHOW_PARTY_GIFT_COUNT",
            Self::LiveFirstSendPopularTicketPendant => {
                "LIVE_FIRST_SEND_POPULAR_TICKET_PENDANT"
            }
            Self::LivePayBottom => "LIVE_PAY_BOTTOM",
            Self::ShowPartyContributeListSendGift => {
                "SHOW_PARTY_CONTRIBUTE_LIST_SEND_GIFT"
            }
            Self::LivePkRedPacketSendGift => "LIVE_PK_RED_PACKET_SEND_GIFT",
            Self::ShowPartyGroupSend => "SHOW_PARTY_GROUP_SEND",
            Self::LiveGiftPanelGiftDetailH5 => "LIVE_GIFT_PANEL_GIFT_DETAIL_H5",
            Self::LiveRechargePaySendGift => "LIVE_RECHARGE_PAY_SEND_GIFT",
            Self::LiveWzGameCard => "LIVE_WZ_GAME_CARD",
            Self::LivePopulayRankHoner => "LIVE_POPULAY_RANK_HONER",
            Self::ShowPartyContributeListSolopkSendGift => {
                "SHOW_PARTY_CONTRIBUTE_LIST_SOLOPK_SEND_GIFT"
            }
            Self::ShowPartyContributeListBrawlpkSendGift => {
                "SHOW_PARTY_CONTRIBUTE_LIST_BRAWLPK_SEND_GIFT"
            }
            Self::LiveDapingNotice => "LIVE_DAPING_NOTICE",
            Self::ShowPartyContributeListRankSendGift => {
                "SHOW_PARTY_CONTRIBUTE_LIST_RANK_SEND_GIFT"
            }
            Self::ShowPartyContributeListSolopkQuick => {
                "SHOW_PARTY_CONTRIBUTE_LIST_SOLOPK_QUICK"
            }
            Self::ShowPartyContributeListBrawlpkQuick => {
                "SHOW_PARTY_CONTRIBUTE_LIST_BRAWLPK_QUICK"
            }
            Self::LiveCommentRepressPayPopup => "LIVE_COMMENT_REPRESS_PAY_POPUP",
            Self::LiveCommentButtonPayPopup => "LIVE_COMMENT_BUTTON_PAY_POPUP",
            Self::LiveGonggeRank => "LIVE_GONGGE_RANK",
            Self::LiveTuanboRank => "LIVE_TUANBO_RANK",
            Self::ShowPartyContributeListLimitTaskSendGift => {
                "SHOW_PARTY_CONTRIBUTE_LIST_LIMIT_TASK_SEND_GIFT"
            }
            Self::LiveSuperSendGiftNotice => "LIVE_SUPER_SEND_GIFT_NOTICE",
            Self::GridProgramListOrder => "GRID_PROGRAM_LIST_ORDER",
            Self::LivePkJianfenGift => "LIVE_PK_JIANFEN_GIFT",
            Self::LivePayGroupSendCard => "LIVE_PAY_GROUP_SEND_CARD",
            Self::LiveSpringActivcityMudanH5 => "LIVE_SPRING_ACTIVCITY_MUDAN_H5",
            Self::LiveTeamMemberPanelGiftButton => "LIVE_TEAM_MEMBER_PANEL_GIFT_BUTTON",
            Self::LivePopularVoteHelp => "LIVE_POPULAR_VOTE_HELP",
            Self::LiveActivityGiftH5YuliuYi => "LIVE_ACTIVITY_GIFT_H5_YULIU_yi",
            Self::LiveActivityGiftH5YuliuEr => "LIVE_ACTIVITY_GIFT_H5_YULIU_er",
            Self::LiveJinbiTaskYiqiChangqianTask => "LIVE_JINBI_TASK_YIQI_CHANGQIAN_TASK",
            Self::LiveJinbiTaskErqiJianneiTask => "LIVE_JINBI_TASK_ERQI_JIANNEI_TASK",
            Self::LiveJinbiTaskRewardPopup => "LIVE_JINBI_TASK_REWARD_POPUP",
            Self::LiveGiftNewPage => "LIVE_GIFT_NEW_PAGE",
            Self::LiveJiliTaskExchangeKwaiCoin => "LIVE_JILI_TASK_EXCHANGE_KWAI_COIN",
            Self::LiveLianpingHeyanGongxianrankSend => {
                "LIVE_LIANPING_HEYAN_GONGXIANRANK_SEND"
            }
            Self::LiveLianpingHeyanItemSend => "LIVE_LIANPING_HEYAN_ITEM_SEND",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GiftBoxSourceType_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "GiftBoxSourceType_DISTRICT_RANK" => Some(Self::DistrictRank),
            "NOMAL" => Some(Self::Nomal),
            "VOICE_PARTY_PERSONAL_CARD" => Some(Self::VoicePartyPersonalCard),
            "VOICE_PARTY_MIC" => Some(Self::VoicePartyMic),
            "VOICE_PARTY_EXCLUSIVE_GIFT" => Some(Self::VoicePartyExclusiveGift),
            "VOICE_PARTY_CONTRIBUTIOIN_LIST" => Some(Self::VoicePartyContributioinList),
            "TOP_USER_LIST_SEND_GIFT_HINT" => Some(Self::TopUserListSendGiftHint),
            "PK_FIRST_BLOOD" => Some(Self::PkFirstBlood),
            "TO_LIGHT_UP_BUTTON" => Some(Self::ToLightUpButton),
            "USER_PANEL_BOTTOM_BAR" => Some(Self::UserPanelBottomBar),
            "TOP_PRIVILEGE_PANEL_BOTTOM_BAR" => Some(Self::TopPrivilegePanelBottomBar),
            "USER_PANEL_WEEK_BOTTOM_BAR" => Some(Self::UserPanelWeekBottomBar),
            "TOP_PRIVILEGE_PANEL_WEEK_BOTTOM_BAR" => {
                Some(Self::TopPrivilegePanelWeekBottomBar)
            }
            "PEAK_NIGHT_RANK_HELP_BUTTON" => Some(Self::PeakNightRankHelpButton),
            "PEAK_NIGHT_TOP_CARD" => Some(Self::PeakNightTopCard),
            "LIVE_AUDIENCE_QUESTION_ENTRANCE" => Some(Self::LiveAudienceQuestionEntrance),
            "LIVE_GIFT_RED_PACKET_PANEL" => Some(Self::LiveGiftRedPacketPanel),
            "LIVE_RED_PACKET_RAIN_GAIN_SUCCEED_CARD" => {
                Some(Self::LiveRedPacketRainGainSucceedCard)
            }
            "LIVE_PK_GIFTS_START_CARD" => Some(Self::LivePkGiftsStartCard),
            "LIVE_GAME_RANK_LIST_WEEK" => Some(Self::LiveGameRankListWeek),
            "LIVE_GAME_RANK_LIST_FANS" => Some(Self::LiveGameRankListFans),
            "LIVE_WISHLIST" => Some(Self::LiveWishlist),
            "LIVE_HOURLY_NATIONAL_RANK_LIST" => Some(Self::LiveHourlyNationalRankList),
            "LIVE_HOURLY_DISTRICT_RANK_LIST" => Some(Self::LiveHourlyDistrictRankList),
            "LIVE_FANS_GROUP_TASK_CARD" => Some(Self::LiveFansGroupTaskCard),
            "LIVE_AUDIENCE_CHAT_PROSONAL_CARD_SEND_GIFT" => {
                Some(Self::LiveAudienceChatProsonalCardSendGift)
            }
            "LIVE_AUDIENCE_CHAT_ACHIEVEMENT_RANK_SEND_GIFT" => {
                Some(Self::LiveAudienceChatAchievementRankSendGift)
            }
            "LIVE_DRAW_GIFTS_PANEL" => Some(Self::LiveDrawGiftsPanel),
            "LIVE_HOURLY_APPEARANCE_RANK_LIST" => {
                Some(Self::LiveHourlyAppearanceRankList)
            }
            "LIVE_HOURLY_TALENT_RANK_LIST" => Some(Self::LiveHourlyTalentRankList),
            "LIVE_ELECTRICITY_TRUST_CARD_SEND_GIFT_TASK" => {
                Some(Self::LiveElectricityTrustCardSendGiftTask)
            }
            "LIVE_COMMON_RED_PACK_RESULT_PANE" => Some(Self::LiveCommonRedPackResultPane),
            "LIVE_ARROW_RED_PACK_RESULT_PANEL" => Some(Self::LiveArrowRedPackResultPanel),
            "LIVE_HOURLY_GZONE_RANK_LIST" => Some(Self::LiveHourlyGzoneRankList),
            "LIVE_GZONE_KSHELL_RANK" => Some(Self::LiveGzoneKshellRank),
            "LIVE_COMMENT_FEED_AREA" => Some(Self::LiveCommentFeedArea),
            "LIVE_CHEAP_CARD" => Some(Self::LiveCheapCard),
            "LIVE_AUDIENCE_LIMIT_TIME_TASK_CARD" => {
                Some(Self::LiveAudienceLimitTimeTaskCard)
            }
            "LIVE_AUDIENCE_LIMIT_TIME_TASK_BUTTON" => {
                Some(Self::LiveAudienceLimitTimeTaskButton)
            }
            "LIVE_HOURLY_POPULARITY_RANK_LIST" => {
                Some(Self::LiveHourlyPopularityRankList)
            }
            "LIVE_TAKE_A_SHOT_POPOP_SEND_AUTHOR" => {
                Some(Self::LiveTakeAShotPopopSendAuthor)
            }
            "LIVE_PK_INFORMATION_CARD" => Some(Self::LivePkInformationCard),
            "LIVE_MAKE_KWAI_COIN" => Some(Self::LiveMakeKwaiCoin),
            "NEBULA_H5_PAGE_TASK_CENTER" => Some(Self::NebulaH5PageTaskCenter),
            "SEND_GIFT_CARD_GIFT_BUTTON" => Some(Self::SendGiftCardGiftButton),
            "LIVE_ARROW_CONDITICON_RED_PACK_RESULT_PANEL" => {
                Some(Self::LiveArrowConditiconRedPackResultPanel)
            }
            "AUDIENCE_PANEL_LIVE_MEMBER_BOTTOM_BAR" => {
                Some(Self::AudiencePanelLiveMemberBottomBar)
            }
            "LIVE_COMMENT_NOTICE" => Some(Self::LiveCommentNotice),
            "AUDIENCE_RANK_PANEL_LIST_EFFECT" => Some(Self::AudienceRankPanelListEffect),
            "MORE_COMMENT_CHEAP_GIFT_BUTTON" => Some(Self::MoreCommentCheapGiftButton),
            "CONVERGENCE_PK_RANK_HELP_BUTTON" => Some(Self::ConvergencePkRankHelpButton),
            "MULTI_PK_HELP" => Some(Self::MultiPkHelp),
            "MULTI_LINE_WISH_GIFT" => Some(Self::MultiLineWishGift),
            "LIVE_LITE_GIFT_BUTTON" => Some(Self::LiveLiteGiftButton),
            "LITE_SEND_GIFT_CARD_GIFT_BUTTON" => Some(Self::LiteSendGiftCardGiftButton),
            "LITE_CHEAP_GIFT" => Some(Self::LiteCheapGift),
            "LIVE_GZONE_KING_RUNE" => Some(Self::LiveGzoneKingRune),
            "LIVE_BOTTOM_PENDANT_SEND_GIFT_BUTTON" => {
                Some(Self::LiveBottomPendantSendGiftButton)
            }
            "LITE_AUDIENCE_PANEL_LIVE_MEMBER_BOTTOM_BAR" => {
                Some(Self::LiteAudiencePanelLiveMemberBottomBar)
            }
            "LITE_HIGH_GUIDE_GIFT" => Some(Self::LiteHighGuideGift),
            "LITE_QUICK_ACTIVITY_GIFT" => Some(Self::LiteQuickActivityGift),
            "LIVE_GIFT_ACHIEVEMENT_SEIZE_TITLE_BUTTON" => {
                Some(Self::LiveGiftAchievementSeizeTitleButton)
            }
            "LIVE_GIFT_ACHIEVEMENT_CONTINUE_SEND_BUTTON" => {
                Some(Self::LiveGiftAchievementContinueSendButton)
            }
            "LIVE_GIFT_ACHIEVEMENT_STRONG_NOTICE_BUTTON" => {
                Some(Self::LiveGiftAchievementStrongNoticeButton)
            }
            "LIVE_SHARE_RED_PACK_RESULT_PANEL" => Some(Self::LiveShareRedPackResultPanel),
            "LIVE_FANS_GROUP_RED_PACK_RESULT_PANEL" => {
                Some(Self::LiveFansGroupRedPackResultPanel)
            }
            "LIVE_H5_PAGE_COMMON" => Some(Self::LiveH5PageCommon),
            "LIVE_DATE_GUIDE_SEND_POPUP_CHAT" => Some(Self::LiveDateGuideSendPopupChat),
            "LIVE_DATE_GUIDE_SEND_POPUP_THANK_ANTHOR" => {
                Some(Self::LiveDateGuideSendPopupThankAnthor)
            }
            "LIVE_COMMENT_SECTION_SEND_GIFT" => Some(Self::LiveCommentSectionSendGift),
            "LITE_COMMENT_SECTION_SEND_GIFT" => Some(Self::LiteCommentSectionSendGift),
            "LITE_CHEAP_GIFT_S" => Some(Self::LiteCheapGiftS),
            "LITE_FANS_GIFT_S" => Some(Self::LiteFansGiftS),
            "LIVE_COIN_TASK" => Some(Self::LiveCoinTask),
            "LITE_QUICK_GIFT_WATCH_OR_LIKE" => Some(Self::LiteQuickGiftWatchOrLike),
            "LITE_QUICK_GIFT_PK" => Some(Self::LiteQuickGiftPk),
            "LIVE_TASK_RED_PACKET" => Some(Self::LiveTaskRedPacket),
            "LIVE_TASK_RED_PACKET_TASK_PAGE" => Some(Self::LiveTaskRedPacketTaskPage),
            "LIVE_INTERACTIVE_GAMEPLAY_QUICK_SEND" => {
                Some(Self::LiveInteractiveGameplayQuickSend)
            }
            "HEAT_PROGRAMME_WANT" => Some(Self::HeatProgrammeWant),
            "LIVE_COIN_TASK_ADD" => Some(Self::LiveCoinTaskAdd),
            "LIVE_BOTTOM_SEND_TOGETHER_BUTTON" => {
                Some(Self::LiveBottomSendTogetherButton)
            }
            "VOICE_PARTY_CONTRIBUTIOIN_TEAMPK_LIST" => {
                Some(Self::VoicePartyContributioinTeampkList)
            }
            "LIVE_POPULAY_TICKET_POPUP_SEND_PAID" => {
                Some(Self::LivePopulayTicketPopupSendPaid)
            }
            "VOICE_PARTY_CONTRIBUTIOIN_GUESTPK_LIST" => {
                Some(Self::VoicePartyContributioinGuestpkList)
            }
            "LIVE_INSTANT_DEATH_GIFT_RED_PACKET" => {
                Some(Self::LiveInstantDeathGiftRedPacket)
            }
            "LIVE_INSTANT_DEATH_KWAI_COIN_RED_PACKET" => {
                Some(Self::LiveInstantDeathKwaiCoinRedPacket)
            }
            "LIVE_DATE_AUTO_SEND_POPUP_THANK_ANTHOR" => {
                Some(Self::LiveDateAutoSendPopupThankAnthor)
            }
            "LIVE_GIFT_ACHIEVEMENT_OWN_IAMGE_PAGE" => {
                Some(Self::LiveGiftAchievementOwnIamgePage)
            }
            "LIVE_PAY_USER_TASK_H5" => Some(Self::LivePayUserTaskH5),
            "LIVE_GIFT_NEW_ACTIVITY_SEND_ALL" => Some(Self::LiveGiftNewActivitySendAll),
            "R4ORAIN_QUICK_SEND" => Some(Self::R4orainQuickSend),
            "LIVE_COUPON_TASK_CARD" => Some(Self::LiveCouponTaskCard),
            "WALLET_PAGE_KWBI_COIN_TICKET" => Some(Self::WalletPageKwbiCoinTicket),
            "WISH_SEND" => Some(Self::WishSend),
            "JINBI_TASK_BUTTON" => Some(Self::JinbiTaskButton),
            "JINBI_TASK_POPUP" => Some(Self::JinbiTaskPopup),
            "BATTLE_PAY_TASK" => Some(Self::BattlePayTask),
            "BATTLE_USER_PAGE_BUTTON" => Some(Self::BattleUserPageButton),
            "PK_TASK_SYSTEM" => Some(Self::PkTaskSystem),
            "LIVE_POPULAR_RANK_BOTTOM_BUTTON" => Some(Self::LivePopularRankBottomButton),
            "SHOW_PARTY_DOUBLE_BOTTOM" => Some(Self::ShowPartyDoubleBottom),
            "SHOW_PARTY_PK_ITEM" => Some(Self::ShowPartyPkItem),
            "SHOW_PARTY_RANK" => Some(Self::ShowPartyRank),
            "SHOW_PARTY_RANK_QUICK" => Some(Self::ShowPartyRankQuick),
            "SHOW_PARTY_GIFT_COUNT" => Some(Self::ShowPartyGiftCount),
            "LIVE_FIRST_SEND_POPULAR_TICKET_PENDANT" => {
                Some(Self::LiveFirstSendPopularTicketPendant)
            }
            "LIVE_PAY_BOTTOM" => Some(Self::LivePayBottom),
            "SHOW_PARTY_CONTRIBUTE_LIST_SEND_GIFT" => {
                Some(Self::ShowPartyContributeListSendGift)
            }
            "LIVE_PK_RED_PACKET_SEND_GIFT" => Some(Self::LivePkRedPacketSendGift),
            "SHOW_PARTY_GROUP_SEND" => Some(Self::ShowPartyGroupSend),
            "LIVE_GIFT_PANEL_GIFT_DETAIL_H5" => Some(Self::LiveGiftPanelGiftDetailH5),
            "LIVE_RECHARGE_PAY_SEND_GIFT" => Some(Self::LiveRechargePaySendGift),
            "LIVE_WZ_GAME_CARD" => Some(Self::LiveWzGameCard),
            "LIVE_POPULAY_RANK_HONER" => Some(Self::LivePopulayRankHoner),
            "SHOW_PARTY_CONTRIBUTE_LIST_SOLOPK_SEND_GIFT" => {
                Some(Self::ShowPartyContributeListSolopkSendGift)
            }
            "SHOW_PARTY_CONTRIBUTE_LIST_BRAWLPK_SEND_GIFT" => {
                Some(Self::ShowPartyContributeListBrawlpkSendGift)
            }
            "LIVE_DAPING_NOTICE" => Some(Self::LiveDapingNotice),
            "SHOW_PARTY_CONTRIBUTE_LIST_RANK_SEND_GIFT" => {
                Some(Self::ShowPartyContributeListRankSendGift)
            }
            "SHOW_PARTY_CONTRIBUTE_LIST_SOLOPK_QUICK" => {
                Some(Self::ShowPartyContributeListSolopkQuick)
            }
            "SHOW_PARTY_CONTRIBUTE_LIST_BRAWLPK_QUICK" => {
                Some(Self::ShowPartyContributeListBrawlpkQuick)
            }
            "LIVE_COMMENT_REPRESS_PAY_POPUP" => Some(Self::LiveCommentRepressPayPopup),
            "LIVE_COMMENT_BUTTON_PAY_POPUP" => Some(Self::LiveCommentButtonPayPopup),
            "LIVE_GONGGE_RANK" => Some(Self::LiveGonggeRank),
            "LIVE_TUANBO_RANK" => Some(Self::LiveTuanboRank),
            "SHOW_PARTY_CONTRIBUTE_LIST_LIMIT_TASK_SEND_GIFT" => {
                Some(Self::ShowPartyContributeListLimitTaskSendGift)
            }
            "LIVE_SUPER_SEND_GIFT_NOTICE" => Some(Self::LiveSuperSendGiftNotice),
            "GRID_PROGRAM_LIST_ORDER" => Some(Self::GridProgramListOrder),
            "LIVE_PK_JIANFEN_GIFT" => Some(Self::LivePkJianfenGift),
            "LIVE_PAY_GROUP_SEND_CARD" => Some(Self::LivePayGroupSendCard),
            "LIVE_SPRING_ACTIVCITY_MUDAN_H5" => Some(Self::LiveSpringActivcityMudanH5),
            "LIVE_TEAM_MEMBER_PANEL_GIFT_BUTTON" => {
                Some(Self::LiveTeamMemberPanelGiftButton)
            }
            "LIVE_POPULAR_VOTE_HELP" => Some(Self::LivePopularVoteHelp),
            "LIVE_ACTIVITY_GIFT_H5_YULIU_yi" => Some(Self::LiveActivityGiftH5YuliuYi),
            "LIVE_ACTIVITY_GIFT_H5_YULIU_er" => Some(Self::LiveActivityGiftH5YuliuEr),
            "LIVE_JINBI_TASK_YIQI_CHANGQIAN_TASK" => {
                Some(Self::LiveJinbiTaskYiqiChangqianTask)
            }
            "LIVE_JINBI_TASK_ERQI_JIANNEI_TASK" => {
                Some(Self::LiveJinbiTaskErqiJianneiTask)
            }
            "LIVE_JINBI_TASK_REWARD_POPUP" => Some(Self::LiveJinbiTaskRewardPopup),
            "LIVE_GIFT_NEW_PAGE" => Some(Self::LiveGiftNewPage),
            "LIVE_JILI_TASK_EXCHANGE_KWAI_COIN" => {
                Some(Self::LiveJiliTaskExchangeKwaiCoin)
            }
            "LIVE_LIANPING_HEYAN_GONGXIANRANK_SEND" => {
                Some(Self::LiveLianpingHeyanGongxianrankSend)
            }
            "LIVE_LIANPING_HEYAN_ITEM_SEND" => Some(Self::LiveLianpingHeyanItemSend),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GiftEntryType {
    LiveEntranceTypeUnknown2 = 0,
    DirectSendGrass = 1,
    SendGrassAndLottery = 2,
    RelightFansGroupGift = 3,
    PanelSendGift = 4,
    SendCheapGiftDialog = 5,
    CheapGiftButton = 6,
    SandeapyGiftButton = 7,
    WishlistGiftButton = 8,
    WallThumpCommentNotice = 9,
    FansGroupPanelSendGift = 10,
    JoinFansGroupDialog = 11,
    GzoneInteractionSendGiftCommentNotice = 12,
    GuardianGiftPanelNotice = 13,
    LiveCommentNoticeSendGiftButton = 14,
    LiveHourlyRankList = 15,
    LivePopularityBoostCard = 16,
    LiveCritTimeHigh = 17,
    LiveCritTimeLow = 18,
    LiveStealTowerTimeHigh = 19,
    LiveStealTowerTimeLow = 20,
    LiveContimuousSendGiftButton = 21,
    LiveCnyComment = 22,
    LiveRedPacketPanel = 23,
    LiveMoreCommentCheapGiftButton = 24,
    LiveConvergencePkRankHelpButton = 25,
    LiveGzoneBlindBoxCommentNoticeButton = 26,
    LiveLiteCheapGift = 27,
    LiveBottomPendantSendGift = 28,
    LiveLiteHighGuideGift = 29,
    LiveLiteQuickActivityGift = 30,
    LiveDiyGift = 31,
    LiveDateGuideSendPopup = 32,
    LiveDingzhiGiftBuy = 33,
    LiveLiteCheapGiftS = 34,
    LiveLiteFansGiftS = 35,
    LiveLiteQuickGiftWatchOrLike = 36,
    LiveLiteQuickGiftPk = 37,
    LiveInteractiveGameplayQuickSendGift = 38,
    LiveBottomSendTogether = 39,
    LivePopulayTicketSendPopup = 40,
    LiveMainFanSignalDevice = 41,
    LiveR4orainQuickSend = 42,
    LivePaiPopup = 43,
    LiveWishSend = 44,
    LiveJinbiTask = 45,
    DanmuFreeGiftButton = 46,
    LiveStrengthenNotice = 47,
    LiveShowPartyDoubleBottom = 48,
    LiveShowPartyRankQuick = 49,
    LiveShowPartyGiftCount = 50,
    LivePkTaskBottomButton = 51,
    LivePayVoteGift = 52,
    LiveGameplaySendGiftPopup = 53,
    LiveGameSendArea = 54,
    LiveOpenTreasureBoxPopUp = 55,
    LiveGridProgramListOrder = 56,
    LiveGiftStickers = 57,
}
impl GiftEntryType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "GiftEntryType_LiveEntranceType_UNKNOWN2",
            Self::DirectSendGrass => "DIRECT_SEND_GRASS",
            Self::SendGrassAndLottery => "SEND_GRASS_AND_LOTTERY",
            Self::RelightFansGroupGift => "RELIGHT_FANS_GROUP_GIFT",
            Self::PanelSendGift => "PANEL_SEND_GIFT",
            Self::SendCheapGiftDialog => "SEND_CHEAP_GIFT_DIALOG",
            Self::CheapGiftButton => "CHEAP_GIFT_BUTTON",
            Self::SandeapyGiftButton => "SANDEAPY_GIFT_BUTTON",
            Self::WishlistGiftButton => "WISHLIST_GIFT_BUTTON",
            Self::WallThumpCommentNotice => "WALL_THUMP_COMMENT_NOTICE",
            Self::FansGroupPanelSendGift => "FANS_GROUP_PANEL_SEND_GIFT",
            Self::JoinFansGroupDialog => "JOIN_FANS_GROUP_DIALOG",
            Self::GzoneInteractionSendGiftCommentNotice => {
                "GZONE_INTERACTION_SEND_GIFT_COMMENT_NOTICE"
            }
            Self::GuardianGiftPanelNotice => "GUARDIAN_GIFT_PANEL_NOTICE",
            Self::LiveCommentNoticeSendGiftButton => {
                "LIVE_COMMENT_NOTICE_SEND_GIFT_BUTTON"
            }
            Self::LiveHourlyRankList => "LIVE_HOURLY_RANK_LIST",
            Self::LivePopularityBoostCard => "LIVE_POPULARITY_BOOST_CARD",
            Self::LiveCritTimeHigh => "LIVE_CRIT_TIME_HIGH",
            Self::LiveCritTimeLow => "LIVE_CRIT_TIME_LOW",
            Self::LiveStealTowerTimeHigh => "LIVE_STEAL_TOWER_TIME_HIGH",
            Self::LiveStealTowerTimeLow => "LIVE_STEAL_TOWER_TIME_LOW",
            Self::LiveContimuousSendGiftButton => "LIVE_CONTIMUOUS_SEND_GIFT_BUTTON",
            Self::LiveCnyComment => "LIVE_CNY_COMMENT",
            Self::LiveRedPacketPanel => "LIVE_RED_PACKET_PANEL",
            Self::LiveMoreCommentCheapGiftButton => "LIVE_MORE_COMMENT_CHEAP_GIFT_BUTTON",
            Self::LiveConvergencePkRankHelpButton => {
                "LIVE_CONVERGENCE_PK_RANK_HELP_BUTTON"
            }
            Self::LiveGzoneBlindBoxCommentNoticeButton => {
                "LIVE_GZONE_BLIND_BOX_COMMENT_NOTICE_BUTTON"
            }
            Self::LiveLiteCheapGift => "LIVE_LITE_CHEAP_GIFT",
            Self::LiveBottomPendantSendGift => "LIVE_BOTTOM_PENDANT_SEND_GIFT",
            Self::LiveLiteHighGuideGift => "LIVE_LITE_HIGH_GUIDE_GIFT",
            Self::LiveLiteQuickActivityGift => "LIVE_LITE_QUICK_ACTIVITY_GIFT",
            Self::LiveDiyGift => "LIVE_DIY_GIFT",
            Self::LiveDateGuideSendPopup => "LIVE_DATE_GUIDE_SEND_POPUP",
            Self::LiveDingzhiGiftBuy => "LIVE_DINGZHI_GIFT_BUY",
            Self::LiveLiteCheapGiftS => "LIVE_LITE_CHEAP_GIFT_S",
            Self::LiveLiteFansGiftS => "LIVE_LITE_FANS_GIFT_S",
            Self::LiveLiteQuickGiftWatchOrLike => "LIVE_LITE_QUICK_GIFT_WATCH_OR_LIKE",
            Self::LiveLiteQuickGiftPk => "LIVE_LITE_QUICK_GIFT_PK",
            Self::LiveInteractiveGameplayQuickSendGift => {
                "LIVE_INTERACTIVE_GAMEPLAY_QUICK_SEND_GIFT"
            }
            Self::LiveBottomSendTogether => "LIVE_BOTTOM_SEND_TOGETHER",
            Self::LivePopulayTicketSendPopup => "LIVE_POPULAY_TICKET_SEND_POPUP",
            Self::LiveMainFanSignalDevice => "LIVE_MAIN_FAN_SIGNAL_DEVICE",
            Self::LiveR4orainQuickSend => "LIVE_R4ORAIN_QUICK_SEND",
            Self::LivePaiPopup => "LIVE_PAI_POPUP",
            Self::LiveWishSend => "LIVE_WISH_SEND",
            Self::LiveJinbiTask => "LIVE_JINBI_TASK",
            Self::DanmuFreeGiftButton => "DANMU_FREE_GIFT_BUTTON",
            Self::LiveStrengthenNotice => "LIVE_STRENGTHEN_NOTICE",
            Self::LiveShowPartyDoubleBottom => "LIVE_SHOW_PARTY_DOUBLE_BOTTOM",
            Self::LiveShowPartyRankQuick => "LIVE_SHOW_PARTY_RANK_QUICK",
            Self::LiveShowPartyGiftCount => "LIVE_SHOW_PARTY_GIFT_COUNT",
            Self::LivePkTaskBottomButton => "LIVE_PK_TASK_BOTTOM_BUTTON",
            Self::LivePayVoteGift => "LIVE_PAY_VOTE_GIFT",
            Self::LiveGameplaySendGiftPopup => "LIVE_GAMEPLAY_SEND_GIFT_POPUP",
            Self::LiveGameSendArea => "LIVE_GAME_SEND_AREA",
            Self::LiveOpenTreasureBoxPopUp => "LIVE_OPEN_TREASURE_BOX_POP_UP",
            Self::LiveGridProgramListOrder => "LIVE_GRID_PROGRAM_LIST_ORDER",
            Self::LiveGiftStickers => "LIVE_GIFT_STICKERS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GiftEntryType_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "DIRECT_SEND_GRASS" => Some(Self::DirectSendGrass),
            "SEND_GRASS_AND_LOTTERY" => Some(Self::SendGrassAndLottery),
            "RELIGHT_FANS_GROUP_GIFT" => Some(Self::RelightFansGroupGift),
            "PANEL_SEND_GIFT" => Some(Self::PanelSendGift),
            "SEND_CHEAP_GIFT_DIALOG" => Some(Self::SendCheapGiftDialog),
            "CHEAP_GIFT_BUTTON" => Some(Self::CheapGiftButton),
            "SANDEAPY_GIFT_BUTTON" => Some(Self::SandeapyGiftButton),
            "WISHLIST_GIFT_BUTTON" => Some(Self::WishlistGiftButton),
            "WALL_THUMP_COMMENT_NOTICE" => Some(Self::WallThumpCommentNotice),
            "FANS_GROUP_PANEL_SEND_GIFT" => Some(Self::FansGroupPanelSendGift),
            "JOIN_FANS_GROUP_DIALOG" => Some(Self::JoinFansGroupDialog),
            "GZONE_INTERACTION_SEND_GIFT_COMMENT_NOTICE" => {
                Some(Self::GzoneInteractionSendGiftCommentNotice)
            }
            "GUARDIAN_GIFT_PANEL_NOTICE" => Some(Self::GuardianGiftPanelNotice),
            "LIVE_COMMENT_NOTICE_SEND_GIFT_BUTTON" => {
                Some(Self::LiveCommentNoticeSendGiftButton)
            }
            "LIVE_HOURLY_RANK_LIST" => Some(Self::LiveHourlyRankList),
            "LIVE_POPULARITY_BOOST_CARD" => Some(Self::LivePopularityBoostCard),
            "LIVE_CRIT_TIME_HIGH" => Some(Self::LiveCritTimeHigh),
            "LIVE_CRIT_TIME_LOW" => Some(Self::LiveCritTimeLow),
            "LIVE_STEAL_TOWER_TIME_HIGH" => Some(Self::LiveStealTowerTimeHigh),
            "LIVE_STEAL_TOWER_TIME_LOW" => Some(Self::LiveStealTowerTimeLow),
            "LIVE_CONTIMUOUS_SEND_GIFT_BUTTON" => {
                Some(Self::LiveContimuousSendGiftButton)
            }
            "LIVE_CNY_COMMENT" => Some(Self::LiveCnyComment),
            "LIVE_RED_PACKET_PANEL" => Some(Self::LiveRedPacketPanel),
            "LIVE_MORE_COMMENT_CHEAP_GIFT_BUTTON" => {
                Some(Self::LiveMoreCommentCheapGiftButton)
            }
            "LIVE_CONVERGENCE_PK_RANK_HELP_BUTTON" => {
                Some(Self::LiveConvergencePkRankHelpButton)
            }
            "LIVE_GZONE_BLIND_BOX_COMMENT_NOTICE_BUTTON" => {
                Some(Self::LiveGzoneBlindBoxCommentNoticeButton)
            }
            "LIVE_LITE_CHEAP_GIFT" => Some(Self::LiveLiteCheapGift),
            "LIVE_BOTTOM_PENDANT_SEND_GIFT" => Some(Self::LiveBottomPendantSendGift),
            "LIVE_LITE_HIGH_GUIDE_GIFT" => Some(Self::LiveLiteHighGuideGift),
            "LIVE_LITE_QUICK_ACTIVITY_GIFT" => Some(Self::LiveLiteQuickActivityGift),
            "LIVE_DIY_GIFT" => Some(Self::LiveDiyGift),
            "LIVE_DATE_GUIDE_SEND_POPUP" => Some(Self::LiveDateGuideSendPopup),
            "LIVE_DINGZHI_GIFT_BUY" => Some(Self::LiveDingzhiGiftBuy),
            "LIVE_LITE_CHEAP_GIFT_S" => Some(Self::LiveLiteCheapGiftS),
            "LIVE_LITE_FANS_GIFT_S" => Some(Self::LiveLiteFansGiftS),
            "LIVE_LITE_QUICK_GIFT_WATCH_OR_LIKE" => {
                Some(Self::LiveLiteQuickGiftWatchOrLike)
            }
            "LIVE_LITE_QUICK_GIFT_PK" => Some(Self::LiveLiteQuickGiftPk),
            "LIVE_INTERACTIVE_GAMEPLAY_QUICK_SEND_GIFT" => {
                Some(Self::LiveInteractiveGameplayQuickSendGift)
            }
            "LIVE_BOTTOM_SEND_TOGETHER" => Some(Self::LiveBottomSendTogether),
            "LIVE_POPULAY_TICKET_SEND_POPUP" => Some(Self::LivePopulayTicketSendPopup),
            "LIVE_MAIN_FAN_SIGNAL_DEVICE" => Some(Self::LiveMainFanSignalDevice),
            "LIVE_R4ORAIN_QUICK_SEND" => Some(Self::LiveR4orainQuickSend),
            "LIVE_PAI_POPUP" => Some(Self::LivePaiPopup),
            "LIVE_WISH_SEND" => Some(Self::LiveWishSend),
            "LIVE_JINBI_TASK" => Some(Self::LiveJinbiTask),
            "DANMU_FREE_GIFT_BUTTON" => Some(Self::DanmuFreeGiftButton),
            "LIVE_STRENGTHEN_NOTICE" => Some(Self::LiveStrengthenNotice),
            "LIVE_SHOW_PARTY_DOUBLE_BOTTOM" => Some(Self::LiveShowPartyDoubleBottom),
            "LIVE_SHOW_PARTY_RANK_QUICK" => Some(Self::LiveShowPartyRankQuick),
            "LIVE_SHOW_PARTY_GIFT_COUNT" => Some(Self::LiveShowPartyGiftCount),
            "LIVE_PK_TASK_BOTTOM_BUTTON" => Some(Self::LivePkTaskBottomButton),
            "LIVE_PAY_VOTE_GIFT" => Some(Self::LivePayVoteGift),
            "LIVE_GAMEPLAY_SEND_GIFT_POPUP" => Some(Self::LiveGameplaySendGiftPopup),
            "LIVE_GAME_SEND_AREA" => Some(Self::LiveGameSendArea),
            "LIVE_OPEN_TREASURE_BOX_POP_UP" => Some(Self::LiveOpenTreasureBoxPopUp),
            "LIVE_GRID_PROGRAM_LIST_ORDER" => Some(Self::LiveGridProgramListOrder),
            "LIVE_GIFT_STICKERS" => Some(Self::LiveGiftStickers),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BizType {
    BizUnknown = 0,
    BizBasic = 1,
    ThirdParty = 2,
    Ugc = 3,
    ScriptDice = 4,
    OutGif = 6,
}
impl BizType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::BizUnknown => "BIZ_UNKNOWN",
            Self::BizBasic => "BIZ_BASIC",
            Self::ThirdParty => "THIRD_PARTY",
            Self::Ugc => "UGC",
            Self::ScriptDice => "SCRIPT_DICE",
            Self::OutGif => "OUT_GIF",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BIZ_UNKNOWN" => Some(Self::BizUnknown),
            "BIZ_BASIC" => Some(Self::BizBasic),
            "THIRD_PARTY" => Some(Self::ThirdParty),
            "UGC" => Some(Self::Ugc),
            "SCRIPT_DICE" => Some(Self::ScriptDice),
            "OUT_GIF" => Some(Self::OutGif),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Style {
    Unknown1 = 0,
    Grid = 1,
    Vertical = 2,
}
impl Style {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "Style_UNKNOWN1",
            Self::Grid => "GRID",
            Self::Vertical => "Style_VERTICAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Style_UNKNOWN1" => Some(Self::Unknown1),
            "GRID" => Some(Self::Grid),
            "Style_VERTICAL" => Some(Self::Vertical),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SourceType {
    Unknown = 0,
    Feed = 1,
    Push = 2,
    LiveSubscription = 3,
    Follow = 4,
    Hot = 5,
    Nearby = 6,
    NearbyRoaming = 7,
    Share = 8,
    LivePk = 9,
    Web = 10,
    SmallProgram = 11,
    FansTop = 12,
    PrivateMessage = 13,
    BroadcastGift = 14,
    BroadcastGiftRedPackage = 15,
    Profile = 16,
    LiveProfileCard = 17,
    LiveClosePage = 18,
}
impl SourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "SourceType_UNKNOWN",
            Self::Feed => "FEED",
            Self::Push => "PUSH",
            Self::LiveSubscription => "LIVE_SUBSCRIPTION",
            Self::Follow => "SourceType_FOLLOW",
            Self::Hot => "HOT",
            Self::Nearby => "NEARBY",
            Self::NearbyRoaming => "NEARBY_ROAMING",
            Self::Share => "SHARE",
            Self::LivePk => "LIVE_PK",
            Self::Web => "WEB",
            Self::SmallProgram => "SMALL_PROGRAM",
            Self::FansTop => "FANS_TOP",
            Self::PrivateMessage => "PRIVATE_MESSAGE",
            Self::BroadcastGift => "BROADCAST_GIFT",
            Self::BroadcastGiftRedPackage => "BROADCAST_GIFT_RED_PACKAGE",
            Self::Profile => "PROFILE",
            Self::LiveProfileCard => "LIVE_PROFILE_CARD",
            Self::LiveClosePage => "LIVE_CLOSE_PAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SourceType_UNKNOWN" => Some(Self::Unknown),
            "FEED" => Some(Self::Feed),
            "PUSH" => Some(Self::Push),
            "LIVE_SUBSCRIPTION" => Some(Self::LiveSubscription),
            "SourceType_FOLLOW" => Some(Self::Follow),
            "HOT" => Some(Self::Hot),
            "NEARBY" => Some(Self::Nearby),
            "NEARBY_ROAMING" => Some(Self::NearbyRoaming),
            "SHARE" => Some(Self::Share),
            "LIVE_PK" => Some(Self::LivePk),
            "WEB" => Some(Self::Web),
            "SMALL_PROGRAM" => Some(Self::SmallProgram),
            "FANS_TOP" => Some(Self::FansTop),
            "PRIVATE_MESSAGE" => Some(Self::PrivateMessage),
            "BROADCAST_GIFT" => Some(Self::BroadcastGift),
            "BROADCAST_GIFT_RED_PACKAGE" => Some(Self::BroadcastGiftRedPackage),
            "PROFILE" => Some(Self::Profile),
            "LIVE_PROFILE_CARD" => Some(Self::LiveProfileCard),
            "LIVE_CLOSE_PAGE" => Some(Self::LiveClosePage),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MessageType {
    Text = 0,
    HtmlText = 1,
    Image = 2,
    Profile = 3,
    Photo = 4,
    OfficialFeedback = 6,
    UserFeedback = 7,
    Emotion = 8,
    Link = 9,
    MultiImageLink = 10,
    TypeRichText = 11,
    Voice = 12,
    Recalled = 13,
    CustomEmotion = 14,
    LocalNews = 15,
    Poke = 16,
    Video = 17,
    Dialing = 18,
    Whatsup = 19,
    PhotoTimeNow = 20,
    Tietie = 21,
    GroupWhatsup = 22,
    GroupPhotoTimeNow = 23,
    PaiYiPai = 24,
    TakePat = 25,
    PlaceHolder = 100,
    Replace = 101,
    Notice = 200,
    InvitationNotice = 201,
    CustomerEvaluationCard = 501,
    CsPickQuestion = 502,
    CsUserReply = 503,
    ReturnCharge = 504,
    RichText = 1017,
    Gmsk = 1018,
    InfomationCard = 1019,
    CommonTools = 1020,
    ReplyEvaluation = 1021,
    BeginBroadcastCard = 1022,
    DiscountCoupon = 1023,
    CiteMessage = 1024,
    WelcomeCard = 1025,
    BlindBox = 1026,
    RequestFollow = 1032,
    MultiEmotionNotice = 1202,
    ServiceCommodityCard = 2000,
    PreCommodity = 2001,
    ServiceOrderCard = 2002,
    PreOrder = 2003,
    PreQuestion = 2004,
    CommodityRecommendCard = 2009,
    CheckOrder = 3000,
}
impl MessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Text => "TEXT",
            Self::HtmlText => "HTML_TEXT",
            Self::Image => "IMAGE",
            Self::Profile => "MessageType_PROFILE",
            Self::Photo => "MessageType_PHOTO",
            Self::OfficialFeedback => "OFFICIAL_FEEDBACK",
            Self::UserFeedback => "USER_FEEDBACK",
            Self::Emotion => "EMOTION",
            Self::Link => "LINK",
            Self::MultiImageLink => "MULTI_IMAGE_LINK",
            Self::TypeRichText => "TYPE_RICH_TEXT",
            Self::Voice => "VOICE",
            Self::Recalled => "RECALLED",
            Self::CustomEmotion => "CUSTOM_EMOTION",
            Self::LocalNews => "LOCAL_NEWS",
            Self::Poke => "POKE",
            Self::Video => "VIDEO",
            Self::Dialing => "DIALING",
            Self::Whatsup => "WHATSUP",
            Self::PhotoTimeNow => "PHOTO_TIME_NOW",
            Self::Tietie => "TIETIE",
            Self::GroupWhatsup => "GROUP_WHATSUP",
            Self::GroupPhotoTimeNow => "GROUP_PHOTO_TIME_NOW",
            Self::PaiYiPai => "PAI_YI_PAI",
            Self::TakePat => "TAKE_PAT",
            Self::PlaceHolder => "PLACE_HOLDER",
            Self::Replace => "REPLACE",
            Self::Notice => "NOTICE",
            Self::InvitationNotice => "INVITATION_NOTICE",
            Self::CustomerEvaluationCard => "CUSTOMER_EVALUATION_CARD",
            Self::CsPickQuestion => "CS_PICK_QUESTION",
            Self::CsUserReply => "CS_USER_REPLY",
            Self::ReturnCharge => "RETURN_CHARGE",
            Self::RichText => "RICH_TEXT",
            Self::Gmsk => "GMSK",
            Self::InfomationCard => "INFOMATION_CARD",
            Self::CommonTools => "COMMON_TOOLS",
            Self::ReplyEvaluation => "REPLY_EVALUATION",
            Self::BeginBroadcastCard => "BEGIN_BROADCAST_CARD",
            Self::DiscountCoupon => "DISCOUNT_COUPON",
            Self::CiteMessage => "CITE_MESSAGE",
            Self::WelcomeCard => "WELCOME_CARD",
            Self::BlindBox => "BLIND_BOX",
            Self::RequestFollow => "REQUEST_FOLLOW",
            Self::MultiEmotionNotice => "MULTI_EMOTION_NOTICE",
            Self::ServiceCommodityCard => "SERVICE_COMMODITY_CARD",
            Self::PreCommodity => "PRE_COMMODITY",
            Self::ServiceOrderCard => "SERVICE_ORDER_CARD",
            Self::PreOrder => "PRE_ORDER",
            Self::PreQuestion => "PRE_QUESTION",
            Self::CommodityRecommendCard => "COMMODITY_RECOMMEND_CARD",
            Self::CheckOrder => "CHECK_ORDER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TEXT" => Some(Self::Text),
            "HTML_TEXT" => Some(Self::HtmlText),
            "IMAGE" => Some(Self::Image),
            "MessageType_PROFILE" => Some(Self::Profile),
            "MessageType_PHOTO" => Some(Self::Photo),
            "OFFICIAL_FEEDBACK" => Some(Self::OfficialFeedback),
            "USER_FEEDBACK" => Some(Self::UserFeedback),
            "EMOTION" => Some(Self::Emotion),
            "LINK" => Some(Self::Link),
            "MULTI_IMAGE_LINK" => Some(Self::MultiImageLink),
            "TYPE_RICH_TEXT" => Some(Self::TypeRichText),
            "VOICE" => Some(Self::Voice),
            "RECALLED" => Some(Self::Recalled),
            "CUSTOM_EMOTION" => Some(Self::CustomEmotion),
            "LOCAL_NEWS" => Some(Self::LocalNews),
            "POKE" => Some(Self::Poke),
            "VIDEO" => Some(Self::Video),
            "DIALING" => Some(Self::Dialing),
            "WHATSUP" => Some(Self::Whatsup),
            "PHOTO_TIME_NOW" => Some(Self::PhotoTimeNow),
            "TIETIE" => Some(Self::Tietie),
            "GROUP_WHATSUP" => Some(Self::GroupWhatsup),
            "GROUP_PHOTO_TIME_NOW" => Some(Self::GroupPhotoTimeNow),
            "PAI_YI_PAI" => Some(Self::PaiYiPai),
            "TAKE_PAT" => Some(Self::TakePat),
            "PLACE_HOLDER" => Some(Self::PlaceHolder),
            "REPLACE" => Some(Self::Replace),
            "NOTICE" => Some(Self::Notice),
            "INVITATION_NOTICE" => Some(Self::InvitationNotice),
            "CUSTOMER_EVALUATION_CARD" => Some(Self::CustomerEvaluationCard),
            "CS_PICK_QUESTION" => Some(Self::CsPickQuestion),
            "CS_USER_REPLY" => Some(Self::CsUserReply),
            "RETURN_CHARGE" => Some(Self::ReturnCharge),
            "RICH_TEXT" => Some(Self::RichText),
            "GMSK" => Some(Self::Gmsk),
            "INFOMATION_CARD" => Some(Self::InfomationCard),
            "COMMON_TOOLS" => Some(Self::CommonTools),
            "REPLY_EVALUATION" => Some(Self::ReplyEvaluation),
            "BEGIN_BROADCAST_CARD" => Some(Self::BeginBroadcastCard),
            "DISCOUNT_COUPON" => Some(Self::DiscountCoupon),
            "CITE_MESSAGE" => Some(Self::CiteMessage),
            "WELCOME_CARD" => Some(Self::WelcomeCard),
            "BLIND_BOX" => Some(Self::BlindBox),
            "REQUEST_FOLLOW" => Some(Self::RequestFollow),
            "MULTI_EMOTION_NOTICE" => Some(Self::MultiEmotionNotice),
            "SERVICE_COMMODITY_CARD" => Some(Self::ServiceCommodityCard),
            "PRE_COMMODITY" => Some(Self::PreCommodity),
            "SERVICE_ORDER_CARD" => Some(Self::ServiceOrderCard),
            "PRE_ORDER" => Some(Self::PreOrder),
            "PRE_QUESTION" => Some(Self::PreQuestion),
            "COMMODITY_RECOMMEND_CARD" => Some(Self::CommodityRecommendCard),
            "CHECK_ORDER" => Some(Self::CheckOrder),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RelationshipType {
    Unknown1 = 0,
    Friend = 1,
    Followed = 2,
    Following = 3,
    Myself = 4,
    Stranger = 5,
    Pyml = 6,
}
impl RelationshipType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "RelationshipType_UNKNOWN1",
            Self::Friend => "RelationshipType_FRIEND",
            Self::Followed => "FOLLOWED",
            Self::Following => "RelationshipType_FOLLOWING",
            Self::Myself => "MYSELF",
            Self::Stranger => "STRANGER",
            Self::Pyml => "PYML",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RelationshipType_UNKNOWN1" => Some(Self::Unknown1),
            "RelationshipType_FRIEND" => Some(Self::Friend),
            "FOLLOWED" => Some(Self::Followed),
            "RelationshipType_FOLLOWING" => Some(Self::Following),
            "MYSELF" => Some(Self::Myself),
            "STRANGER" => Some(Self::Stranger),
            "PYML" => Some(Self::Pyml),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum NetworkStatus {
    Unkonwn1 = 0,
    WifiConnected = 1,
    WifiNoConnection = 2,
}
impl NetworkStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unkonwn1 => "NetworkStatus_UNKONWN1",
            Self::WifiConnected => "WIFI_CONNECTED",
            Self::WifiNoConnection => "WIFI_NO_CONNECTION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NetworkStatus_UNKONWN1" => Some(Self::Unkonwn1),
            "WIFI_CONNECTED" => Some(Self::WifiConnected),
            "WIFI_NO_CONNECTION" => Some(Self::WifiNoConnection),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum UploadStatus {
    Unkonwn2 = 0,
    Uploading = 1,
    BeforeUploading = 2,
    UploadCompleted = 3,
}
impl UploadStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unkonwn2 => "UploadStatus_UNKONWN2",
            Self::Uploading => "UPLOADING",
            Self::BeforeUploading => "BEFORE_UPLOADING",
            Self::UploadCompleted => "UPLOAD_COMPLETED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UploadStatus_UNKONWN2" => Some(Self::Unkonwn2),
            "UPLOADING" => Some(Self::Uploading),
            "BEFORE_UPLOADING" => Some(Self::BeforeUploading),
            "UPLOAD_COMPLETED" => Some(Self::UploadCompleted),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Model {
    LiveEntranceTypeUnkonwn2 = 0,
    WholeSong = 1,
    HotClip = 2,
    FreeChoice = 3,
    Duet = 4,
}
impl Model {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnkonwn2 => "LiveEntranceType_UNKONWN2",
            Self::WholeSong => "WHOLE_SONG",
            Self::HotClip => "Model_HOT_CLIP",
            Self::FreeChoice => "FREE_CHOICE",
            Self::Duet => "DUET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LiveEntranceType_UNKONWN2" => Some(Self::LiveEntranceTypeUnkonwn2),
            "WHOLE_SONG" => Some(Self::WholeSong),
            "Model_HOT_CLIP" => Some(Self::HotClip),
            "FREE_CHOICE" => Some(Self::FreeChoice),
            "DUET" => Some(Self::Duet),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OperateOrRecordType {
    Unknown0 = 0,
    SetSensitiveWord = 1,
    SetAdmin = 2,
    AdminOperateRecord = 3,
    BlacklistRecord = 4,
    NoSpeakingRecord = 5,
    KickUserRecord = 6,
    SensitiveWordRecord = 7,
}
impl OperateOrRecordType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown0 => "OperateOrRecordType_UNKNOWN0",
            Self::SetSensitiveWord => "SET_SENSITIVE_WORD",
            Self::SetAdmin => "SET_ADMIN",
            Self::AdminOperateRecord => "ADMIN_OPERATE_RECORD",
            Self::BlacklistRecord => "BLACKLIST_RECORD",
            Self::NoSpeakingRecord => "NO_SPEAKING_RECORD",
            Self::KickUserRecord => "KICK_USER_RECORD",
            Self::SensitiveWordRecord => "SENSITIVE_WORD_RECORD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OperateOrRecordType_UNKNOWN0" => Some(Self::Unknown0),
            "SET_SENSITIVE_WORD" => Some(Self::SetSensitiveWord),
            "SET_ADMIN" => Some(Self::SetAdmin),
            "ADMIN_OPERATE_RECORD" => Some(Self::AdminOperateRecord),
            "BLACKLIST_RECORD" => Some(Self::BlacklistRecord),
            "NO_SPEAKING_RECORD" => Some(Self::NoSpeakingRecord),
            "KICK_USER_RECORD" => Some(Self::KickUserRecord),
            "SENSITIVE_WORD_RECORD" => Some(Self::SensitiveWordRecord),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PageSourceType {
    Unknown2 = 0,
    LivePush = 1,
    LiveAdminOperateRecordPage = 2,
}
impl PageSourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown2 => "PageSourceType_UNKNOWN2",
            Self::LivePush => "PageSourceType_LIVE_PUSH",
            Self::LiveAdminOperateRecordPage => "LIVE_ADMIN_OPERATE_RECORD_PAGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PageSourceType_UNKNOWN2" => Some(Self::Unknown2),
            "PageSourceType_LIVE_PUSH" => Some(Self::LivePush),
            "LIVE_ADMIN_OPERATE_RECORD_PAGE" => Some(Self::LiveAdminOperateRecordPage),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SwitchTabType {
    Unknown1 = 0,
    Click = 1,
    Slide = 2,
}
impl SwitchTabType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown1 => "SwitchTabType_UNKNOWN1",
            Self::Click => "CLICK",
            Self::Slide => "SLIDE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SwitchTabType_UNKNOWN1" => Some(Self::Unknown1),
            "CLICK" => Some(Self::Click),
            "SLIDE" => Some(Self::Slide),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BarragePosType {
    LiveEntranceTypeUnknown = 0,
    Close = 1,
    Top = 2,
    HalfScreen = 3,
    FullScreen = 4,
}
impl BarragePosType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => "BarragePosType_LiveEntranceType_UNKNOWN",
            Self::Close => "CLOSE",
            Self::Top => "TOP",
            Self::HalfScreen => "HALF_SCREEN",
            Self::FullScreen => "FULL_SCREEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BarragePosType_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "CLOSE" => Some(Self::Close),
            "TOP" => Some(Self::Top),
            "HALF_SCREEN" => Some(Self::HalfScreen),
            "FULL_SCREEN" => Some(Self::FullScreen),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BarrageTextSize {
    LiveEntranceTypeUnknown1 = 0,
    Smallest = 1,
    Small = 2,
    Standard = 3,
    Larger = 4,
    Largest = 5,
}
impl BarrageTextSize {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "BarrageTextSize_LiveEntranceType_UNKNOWN1",
            Self::Smallest => "SMALLEST",
            Self::Small => "SMALL",
            Self::Standard => "STANDARD",
            Self::Larger => "LARGER",
            Self::Largest => "LARGEST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BarrageTextSize_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "SMALLEST" => Some(Self::Smallest),
            "SMALL" => Some(Self::Small),
            "STANDARD" => Some(Self::Standard),
            "LARGER" => Some(Self::Larger),
            "LARGEST" => Some(Self::Largest),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FansStatus {
    NotInGroup = 0,
    Active = 1,
    Inactive = 2,
}
impl FansStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NotInGroup => "NOT_IN_GROUP",
            Self::Active => "ACTIVE",
            Self::Inactive => "INACTIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NOT_IN_GROUP" => Some(Self::NotInGroup),
            "ACTIVE" => Some(Self::Active),
            "INACTIVE" => Some(Self::Inactive),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FansStatusV2 {
    StatusUnknown = 0,
    StatusActive = 1,
    StatusInactive = 2,
    StatusUnfollowed = 3,
}
impl FansStatusV2 {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StatusUnknown => "STATUS_UNKNOWN",
            Self::StatusActive => "STATUS_ACTIVE",
            Self::StatusInactive => "STATUS_INACTIVE",
            Self::StatusUnfollowed => "STATUS_UNFOLLOWED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STATUS_UNKNOWN" => Some(Self::StatusUnknown),
            "STATUS_ACTIVE" => Some(Self::StatusActive),
            "STATUS_INACTIVE" => Some(Self::StatusInactive),
            "STATUS_UNFOLLOWED" => Some(Self::StatusUnfollowed),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AudienceWatchEndReason {
    LiveEntranceTypeUnknown = 0,
    AudienceExitLive = 1,
    LivePkEnd = 2,
    LiveEnd = 3,
    AuthorStartRoundPk = 4,
    WaitEndSignalTimeout = 5,
}
impl AudienceWatchEndReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => {
                "AudienceWatchEndReason_LiveEntranceType_UNKNOWN"
            }
            Self::AudienceExitLive => "AudienceWatchEndReason_AUDIENCE_EXIT_LIVE",
            Self::LivePkEnd => "LIVE_PK_END",
            Self::LiveEnd => "LIVE_END",
            Self::AuthorStartRoundPk => "AUTHOR_START_ROUND_PK",
            Self::WaitEndSignalTimeout => "WAIT_END_SIGNAL_TIMEOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AudienceWatchEndReason_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "AudienceWatchEndReason_AUDIENCE_EXIT_LIVE" => Some(Self::AudienceExitLive),
            "LIVE_PK_END" => Some(Self::LivePkEnd),
            "LIVE_END" => Some(Self::LiveEnd),
            "AUTHOR_START_ROUND_PK" => Some(Self::AuthorStartRoundPk),
            "WAIT_END_SIGNAL_TIMEOUT" => Some(Self::WaitEndSignalTimeout),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EndReason {
    UnknownReason = 0,
    StreamEnd = 1,
    EndPlayInAdvance = 2,
    EndPunishInAdvance = 3,
    HeartbeatTimeOut = 4,
    PkClose = 5,
    AryaStop = 6,
    EndSingalTimeOut = 7,
    NormalEnd = 8,
    OpponentHeartbeatTimeOut = 9,
    ConnectCancel = 10,
    StartRoundPk = 11,
}
impl EndReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownReason => "UNKNOWN_REASON",
            Self::StreamEnd => "STREAM_END",
            Self::EndPlayInAdvance => "END_PLAY_IN_ADVANCE",
            Self::EndPunishInAdvance => "END_PUNISH_IN_ADVANCE",
            Self::HeartbeatTimeOut => "HEARTBEAT_TIME_OUT",
            Self::PkClose => "PK_CLOSE",
            Self::AryaStop => "ARYA_STOP",
            Self::EndSingalTimeOut => "END_SINGAL_TIME_OUT",
            Self::NormalEnd => "NORMAL_END",
            Self::OpponentHeartbeatTimeOut => "OPPONENT_HEARTBEAT_TIME_OUT",
            Self::ConnectCancel => "CONNECT_CANCEL",
            Self::StartRoundPk => "START_ROUND_PK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_REASON" => Some(Self::UnknownReason),
            "STREAM_END" => Some(Self::StreamEnd),
            "END_PLAY_IN_ADVANCE" => Some(Self::EndPlayInAdvance),
            "END_PUNISH_IN_ADVANCE" => Some(Self::EndPunishInAdvance),
            "HEARTBEAT_TIME_OUT" => Some(Self::HeartbeatTimeOut),
            "PK_CLOSE" => Some(Self::PkClose),
            "ARYA_STOP" => Some(Self::AryaStop),
            "END_SINGAL_TIME_OUT" => Some(Self::EndSingalTimeOut),
            "NORMAL_END" => Some(Self::NormalEnd),
            "OPPONENT_HEARTBEAT_TIME_OUT" => Some(Self::OpponentHeartbeatTimeOut),
            "CONNECT_CANCEL" => Some(Self::ConnectCancel),
            "START_ROUND_PK" => Some(Self::StartRoundPk),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EntranceType {
    UnkonwnEntrance = 0,
    SendInvitation = 1,
    AcceptInvitation = 2,
    RandomMatch = 3,
    PlayAgain = 4,
    CitywideMatch = 5,
    AcqierementMatch = 6,
    GameMatch = 7,
}
impl EntranceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnkonwnEntrance => "UNKONWN_ENTRANCE",
            Self::SendInvitation => "SEND_INVITATION",
            Self::AcceptInvitation => "ACCEPT_INVITATION",
            Self::RandomMatch => "RANDOM_MATCH",
            Self::PlayAgain => "PLAY_AGAIN",
            Self::CitywideMatch => "CITYWIDE_MATCH",
            Self::AcqierementMatch => "ACQIEREMENT_MATCH",
            Self::GameMatch => "GAME_MATCH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKONWN_ENTRANCE" => Some(Self::UnkonwnEntrance),
            "SEND_INVITATION" => Some(Self::SendInvitation),
            "ACCEPT_INVITATION" => Some(Self::AcceptInvitation),
            "RANDOM_MATCH" => Some(Self::RandomMatch),
            "PLAY_AGAIN" => Some(Self::PlayAgain),
            "CITYWIDE_MATCH" => Some(Self::CitywideMatch),
            "ACQIEREMENT_MATCH" => Some(Self::AcqierementMatch),
            "GAME_MATCH" => Some(Self::GameMatch),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum OpponentType {
    UnkonwnOpponent = 0,
    Friend = 1,
    RandomOpponent = 2,
}
impl OpponentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnkonwnOpponent => "UNKONWN_OPPONENT",
            Self::Friend => "OpponentType_FRIEND",
            Self::RandomOpponent => "RANDOM_OPPONENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKONWN_OPPONENT" => Some(Self::UnkonwnOpponent),
            "OpponentType_FRIEND" => Some(Self::Friend),
            "RANDOM_OPPONENT" => Some(Self::RandomOpponent),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EarnTaskStatus {
    Unknown6 = 0,
    Complete = 1,
    Incomplete = 2,
}
impl EarnTaskStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown6 => "EarnTaskStatus_UNKNOWN6",
            Self::Complete => "COMPLETE",
            Self::Incomplete => "INCOMPLETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EarnTaskStatus_UNKNOWN6" => Some(Self::Unknown6),
            "COMPLETE" => Some(Self::Complete),
            "INCOMPLETE" => Some(Self::Incomplete),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MotorSkillStatus {
    Unknown4 = 0,
    SkillUnlock = 1,
    SkillLock = 2,
}
impl MotorSkillStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "MotorSkillStatus_UNKNOWN4",
            Self::SkillUnlock => "SKILL_UNLOCK",
            Self::SkillLock => "SKILL_LOCK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MotorSkillStatus_UNKNOWN4" => Some(Self::Unknown4),
            "SKILL_UNLOCK" => Some(Self::SkillUnlock),
            "SKILL_LOCK" => Some(Self::SkillLock),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PetSex {
    LiveEntranceTypeUnknown0 = 0,
    F = 1,
    M = 2,
}
impl PetSex {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown0 => "PetSex_LiveEntranceType_UNKNOWN0",
            Self::F => "F",
            Self::M => "M",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PetSex_LiveEntranceType_UNKNOWN0" => Some(Self::LiveEntranceTypeUnknown0),
            "F" => Some(Self::F),
            "M" => Some(Self::M),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RobotStatus {
    LiveEntranceTypeUnknown2 = 0,
    UpgradeIncomplete = 1,
    UpgradeComplete = 2,
    Open = 3,
}
impl RobotStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "RobotStatus_LiveEntranceType_UNKNOWN2",
            Self::UpgradeIncomplete => "UPGRADE_INCOMPLETE",
            Self::UpgradeComplete => "UPGRADE_COMPLETE",
            Self::Open => "OPEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RobotStatus_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "UPGRADE_INCOMPLETE" => Some(Self::UpgradeIncomplete),
            "UPGRADE_COMPLETE" => Some(Self::UpgradeComplete),
            "OPEN" => Some(Self::Open),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RobotType {
    LiveEntranceTypeUnknown1 = 0,
    VoiceRobot = 1,
    PetRobot = 2,
}
impl RobotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "RobotType_LiveEntranceType_UNKNOWN1",
            Self::VoiceRobot => "VOICE_ROBOT",
            Self::PetRobot => "PET_ROBOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RobotType_LiveEntranceType_UNKNOWN1" => Some(Self::LiveEntranceTypeUnknown1),
            "VOICE_ROBOT" => Some(Self::VoiceRobot),
            "PET_ROBOT" => Some(Self::PetRobot),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RecognitionResult {
    LiveEntranceTypeUnknown = 0,
    WakeupFalse = 1,
    NotClear = 2,
    Finish = 3,
    NotUnderstand = 4,
    NoResource = 5,
    NoSupport = 6,
    LocalWakeupTimeout = 7,
    ServerWakeupTimeout = 8,
    WaitingForCommandTimeout = 9,
}
impl RecognitionResult {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => "RecognitionResult_LiveEntranceType_UNKNOWN",
            Self::WakeupFalse => "WAKEUP_FALSE",
            Self::NotClear => "NOT_CLEAR",
            Self::Finish => "FINISH",
            Self::NotUnderstand => "NOT_UNDERSTAND",
            Self::NoResource => "NO_RESOURCE",
            Self::NoSupport => "NO_SUPPORT",
            Self::LocalWakeupTimeout => "LOCAL_WAKEUP_TIMEOUT",
            Self::ServerWakeupTimeout => "SERVER_WAKEUP_TIMEOUT",
            Self::WaitingForCommandTimeout => "WAITING_FOR_COMMAND_TIMEOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RecognitionResult_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "WAKEUP_FALSE" => Some(Self::WakeupFalse),
            "NOT_CLEAR" => Some(Self::NotClear),
            "FINISH" => Some(Self::Finish),
            "NOT_UNDERSTAND" => Some(Self::NotUnderstand),
            "NO_RESOURCE" => Some(Self::NoResource),
            "NO_SUPPORT" => Some(Self::NoSupport),
            "LOCAL_WAKEUP_TIMEOUT" => Some(Self::LocalWakeupTimeout),
            "SERVER_WAKEUP_TIMEOUT" => Some(Self::ServerWakeupTimeout),
            "WAITING_FOR_COMMAND_TIMEOUT" => Some(Self::WaitingForCommandTimeout),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SpeechRobotActionType {
    ActionUnknown = 0,
    ActionMusicPlaySong = 1001,
    ActionMusicPlaySinger = 1002,
    ActionMusicPlayStyle = 1003,
    ActionMusicPlaySingerSong = 1004,
    ActionMusicPlay = 1005,
    ActionMusicLike = 1008,
    ActionMusicUnlike = 1009,
    ActionMusicLastSong = 1013,
    ActionMusicNextSong = 1014,
    ActionMusicChangeSong = 1015,
    ActionPkCasualPk = 2001,
    ActionPkCityPk = 2002,
    ActionPkFriendPk = 2003,
    ActionPkTalentPk = 2004,
    ActionJokeJokePlay = 3001,
    ActionStoryStoryLay = 4001,
    ActionPacketPacketOpen = 5001,
    ActionMagicMagicOpen = 6001,
    ActionMagicMagicClose = 6002,
    ActionMagicMagicChange = 6003,
    ActionFunctionFunctionOpen = 7001,
    ActionFunctionFunctionClose = 7002,
    ActionFunctionPlayStop = 7003,
    ActionFunctionPlayOn = 7004,
    ActionFunctionVolumeUp = 7005,
    ActionFunctionVolumeDown = 7006,
    ActionFunctionExitPlay = 7007,
    ActionChatChatPlay = 8001,
    ActionThumpUp = 11001,
    ActionFollow = 12001,
    ActionForegroundBack = 13001,
    ActionGrabPacket = 14001,
    ActionComment = 15001,
    ActionCommentFull = 15002,
    ActionCommentVoice = 15003,
    ActionReward = 16001,
    ActionRewardName = 16002,
    ActionRewardCount = 16003,
    ActionRewardFull = 16004,
    ActionRewardConfirm = 16005,
    ActionRewardCancel = 16006,
    ActionRewardAgain = 16007,
    ActionRewardOther = 16008,
    ActionRewardNotFound = 16009,
    ActionRewardSilent = 16010,
}
impl SpeechRobotActionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ActionUnknown => "ACTION_UNKNOWN",
            Self::ActionMusicPlaySong => "ACTION_MUSIC_PLAY_SONG",
            Self::ActionMusicPlaySinger => "ACTION_MUSIC_PLAY_SINGER",
            Self::ActionMusicPlayStyle => "ACTION_MUSIC_PLAY_STYLE",
            Self::ActionMusicPlaySingerSong => "ACTION_MUSIC_PLAY_SINGER_SONG",
            Self::ActionMusicPlay => "ACTION_MUSIC_PLAY",
            Self::ActionMusicLike => "ACTION_MUSIC_LIKE",
            Self::ActionMusicUnlike => "ACTION_MUSIC_UNLIKE",
            Self::ActionMusicLastSong => "ACTION_MUSIC_LAST_SONG",
            Self::ActionMusicNextSong => "ACTION_MUSIC_NEXT_SONG",
            Self::ActionMusicChangeSong => "ACTION_MUSIC_CHANGE_SONG",
            Self::ActionPkCasualPk => "ACTION_PK_CASUAL_PK",
            Self::ActionPkCityPk => "ACTION_PK_CITY_PK",
            Self::ActionPkFriendPk => "ACTION_PK_FRIEND_PK",
            Self::ActionPkTalentPk => "ACTION_PK_TALENT_PK",
            Self::ActionJokeJokePlay => "ACTION_JOKE_JOKE_PLAY",
            Self::ActionStoryStoryLay => "ACTION_STORY_STORY_LAY",
            Self::ActionPacketPacketOpen => "ACTION_PACKET_PACKET_OPEN",
            Self::ActionMagicMagicOpen => "ACTION_MAGIC_MAGIC_OPEN",
            Self::ActionMagicMagicClose => "ACTION_MAGIC_MAGIC_CLOSE",
            Self::ActionMagicMagicChange => "ACTION_MAGIC_MAGIC_CHANGE",
            Self::ActionFunctionFunctionOpen => "ACTION_FUNCTION_FUNCTION_OPEN",
            Self::ActionFunctionFunctionClose => "ACTION_FUNCTION_FUNCTION_CLOSE",
            Self::ActionFunctionPlayStop => "ACTION_FUNCTION_PLAY_STOP",
            Self::ActionFunctionPlayOn => "ACTION_FUNCTION_PLAY_ON",
            Self::ActionFunctionVolumeUp => "ACTION_FUNCTION_VOLUME_UP",
            Self::ActionFunctionVolumeDown => "ACTION_FUNCTION_VOLUME_DOWN",
            Self::ActionFunctionExitPlay => "ACTION_FUNCTION_EXIT_PLAY",
            Self::ActionChatChatPlay => "ACTION_CHAT_CHAT_PLAY",
            Self::ActionThumpUp => "ACTION_THUMP_UP",
            Self::ActionFollow => "ACTION_FOLLOW",
            Self::ActionForegroundBack => "ACTION_FOREGROUND_BACK",
            Self::ActionGrabPacket => "ACTION_GRAB_PACKET",
            Self::ActionComment => "ACTION_COMMENT",
            Self::ActionCommentFull => "ACTION_COMMENT_FULL",
            Self::ActionCommentVoice => "ACTION_COMMENT_VOICE",
            Self::ActionReward => "ACTION_REWARD",
            Self::ActionRewardName => "ACTION_REWARD_NAME",
            Self::ActionRewardCount => "ACTION_REWARD_COUNT",
            Self::ActionRewardFull => "ACTION_REWARD_FULL",
            Self::ActionRewardConfirm => "ACTION_REWARD_CONFIRM",
            Self::ActionRewardCancel => "ACTION_REWARD_CANCEL",
            Self::ActionRewardAgain => "ACTION_REWARD_AGAIN",
            Self::ActionRewardOther => "ACTION_REWARD_OTHER",
            Self::ActionRewardNotFound => "ACTION_REWARD_NOT_FOUND",
            Self::ActionRewardSilent => "ACTION_REWARD_SILENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ACTION_UNKNOWN" => Some(Self::ActionUnknown),
            "ACTION_MUSIC_PLAY_SONG" => Some(Self::ActionMusicPlaySong),
            "ACTION_MUSIC_PLAY_SINGER" => Some(Self::ActionMusicPlaySinger),
            "ACTION_MUSIC_PLAY_STYLE" => Some(Self::ActionMusicPlayStyle),
            "ACTION_MUSIC_PLAY_SINGER_SONG" => Some(Self::ActionMusicPlaySingerSong),
            "ACTION_MUSIC_PLAY" => Some(Self::ActionMusicPlay),
            "ACTION_MUSIC_LIKE" => Some(Self::ActionMusicLike),
            "ACTION_MUSIC_UNLIKE" => Some(Self::ActionMusicUnlike),
            "ACTION_MUSIC_LAST_SONG" => Some(Self::ActionMusicLastSong),
            "ACTION_MUSIC_NEXT_SONG" => Some(Self::ActionMusicNextSong),
            "ACTION_MUSIC_CHANGE_SONG" => Some(Self::ActionMusicChangeSong),
            "ACTION_PK_CASUAL_PK" => Some(Self::ActionPkCasualPk),
            "ACTION_PK_CITY_PK" => Some(Self::ActionPkCityPk),
            "ACTION_PK_FRIEND_PK" => Some(Self::ActionPkFriendPk),
            "ACTION_PK_TALENT_PK" => Some(Self::ActionPkTalentPk),
            "ACTION_JOKE_JOKE_PLAY" => Some(Self::ActionJokeJokePlay),
            "ACTION_STORY_STORY_LAY" => Some(Self::ActionStoryStoryLay),
            "ACTION_PACKET_PACKET_OPEN" => Some(Self::ActionPacketPacketOpen),
            "ACTION_MAGIC_MAGIC_OPEN" => Some(Self::ActionMagicMagicOpen),
            "ACTION_MAGIC_MAGIC_CLOSE" => Some(Self::ActionMagicMagicClose),
            "ACTION_MAGIC_MAGIC_CHANGE" => Some(Self::ActionMagicMagicChange),
            "ACTION_FUNCTION_FUNCTION_OPEN" => Some(Self::ActionFunctionFunctionOpen),
            "ACTION_FUNCTION_FUNCTION_CLOSE" => Some(Self::ActionFunctionFunctionClose),
            "ACTION_FUNCTION_PLAY_STOP" => Some(Self::ActionFunctionPlayStop),
            "ACTION_FUNCTION_PLAY_ON" => Some(Self::ActionFunctionPlayOn),
            "ACTION_FUNCTION_VOLUME_UP" => Some(Self::ActionFunctionVolumeUp),
            "ACTION_FUNCTION_VOLUME_DOWN" => Some(Self::ActionFunctionVolumeDown),
            "ACTION_FUNCTION_EXIT_PLAY" => Some(Self::ActionFunctionExitPlay),
            "ACTION_CHAT_CHAT_PLAY" => Some(Self::ActionChatChatPlay),
            "ACTION_THUMP_UP" => Some(Self::ActionThumpUp),
            "ACTION_FOLLOW" => Some(Self::ActionFollow),
            "ACTION_FOREGROUND_BACK" => Some(Self::ActionForegroundBack),
            "ACTION_GRAB_PACKET" => Some(Self::ActionGrabPacket),
            "ACTION_COMMENT" => Some(Self::ActionComment),
            "ACTION_COMMENT_FULL" => Some(Self::ActionCommentFull),
            "ACTION_COMMENT_VOICE" => Some(Self::ActionCommentVoice),
            "ACTION_REWARD" => Some(Self::ActionReward),
            "ACTION_REWARD_NAME" => Some(Self::ActionRewardName),
            "ACTION_REWARD_COUNT" => Some(Self::ActionRewardCount),
            "ACTION_REWARD_FULL" => Some(Self::ActionRewardFull),
            "ACTION_REWARD_CONFIRM" => Some(Self::ActionRewardConfirm),
            "ACTION_REWARD_CANCEL" => Some(Self::ActionRewardCancel),
            "ACTION_REWARD_AGAIN" => Some(Self::ActionRewardAgain),
            "ACTION_REWARD_OTHER" => Some(Self::ActionRewardOther),
            "ACTION_REWARD_NOT_FOUND" => Some(Self::ActionRewardNotFound),
            "ACTION_REWARD_SILENT" => Some(Self::ActionRewardSilent),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SpeechRobotSkillType {
    SkillUnknown = 0,
    SkillMusic = 1,
    SkillPk = 2,
    SkillJoke = 3,
    SkillStory = 4,
    SkillPacket = 5,
    SkillMagic = 6,
    SkillFunction = 7,
    SkillChat = 8,
    SkillThumpUp = 11,
    SkillFollow = 12,
    SkillForeground = 13,
    SkillGrabPacker = 14,
    SkillComment = 15,
    SkillReward = 16,
}
impl SpeechRobotSkillType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SkillUnknown => "SKILL_UNKNOWN",
            Self::SkillMusic => "SKILL_MUSIC",
            Self::SkillPk => "SKILL_PK",
            Self::SkillJoke => "SKILL_JOKE",
            Self::SkillStory => "SKILL_STORY",
            Self::SkillPacket => "SKILL_PACKET",
            Self::SkillMagic => "SKILL_MAGIC",
            Self::SkillFunction => "SKILL_FUNCTION",
            Self::SkillChat => "SKILL_CHAT",
            Self::SkillThumpUp => "SKILL_THUMP_UP",
            Self::SkillFollow => "SKILL_FOLLOW",
            Self::SkillForeground => "SKILL_FOREGROUND",
            Self::SkillGrabPacker => "SKILL_GRAB_PACKER",
            Self::SkillComment => "SKILL_COMMENT",
            Self::SkillReward => "SKILL_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SKILL_UNKNOWN" => Some(Self::SkillUnknown),
            "SKILL_MUSIC" => Some(Self::SkillMusic),
            "SKILL_PK" => Some(Self::SkillPk),
            "SKILL_JOKE" => Some(Self::SkillJoke),
            "SKILL_STORY" => Some(Self::SkillStory),
            "SKILL_PACKET" => Some(Self::SkillPacket),
            "SKILL_MAGIC" => Some(Self::SkillMagic),
            "SKILL_FUNCTION" => Some(Self::SkillFunction),
            "SKILL_CHAT" => Some(Self::SkillChat),
            "SKILL_THUMP_UP" => Some(Self::SkillThumpUp),
            "SKILL_FOLLOW" => Some(Self::SkillFollow),
            "SKILL_FOREGROUND" => Some(Self::SkillForeground),
            "SKILL_GRAB_PACKER" => Some(Self::SkillGrabPacker),
            "SKILL_COMMENT" => Some(Self::SkillComment),
            "SKILL_REWARD" => Some(Self::SkillReward),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AudioStreamPlayStatus {
    LiveEntranceTypeUnknown = 0,
    Finished = 1,
    Canceled = 2,
    Failed = 3,
}
impl AudioStreamPlayStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => {
                "AudioStreamPlayStatus_LiveEntranceType_UNKNOWN"
            }
            Self::Finished => "FINISHED",
            Self::Canceled => "CANCELED",
            Self::Failed => "FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AudioStreamPlayStatus_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "FINISHED" => Some(Self::Finished),
            "CANCELED" => Some(Self::Canceled),
            "FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GuideTriggerRule {
    LiveEntranceTypeUnknown1 = 0,
    PlayLiveSatisfied = 1,
    SendGift = 2,
    ShareCountSatisfied = 3,
}
impl GuideTriggerRule {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => {
                "GuideTriggerRule_LiveEntranceType_UNKNOWN1"
            }
            Self::PlayLiveSatisfied => "PLAY_LIVE_SATISFIED",
            Self::SendGift => "SEND_GIFT",
            Self::ShareCountSatisfied => "SHARE_COUNT_SATISFIED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GuideTriggerRule_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "PLAY_LIVE_SATISFIED" => Some(Self::PlayLiveSatisfied),
            "SEND_GIFT" => Some(Self::SendGift),
            "SHARE_COUNT_SATISFIED" => Some(Self::ShareCountSatisfied),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShareBoxSourceType {
    LiveEntranceTypeUnknown2 = 0,
    DefaultShare = 1,
    ShareRedPack = 2,
    RedPackRain = 3,
    ThanksRedPack = 4,
    MillionRedPack = 5,
    RedPackRainBefore = 6,
    RedPackRainAfter = 7,
    QuizDialog = 8,
    QuizReviveCardPanel = 9,
}
impl ShareBoxSourceType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => {
                "ShareBoxSourceType_LiveEntranceType_UNKNOWN2"
            }
            Self::DefaultShare => "DEFAULT_SHARE",
            Self::ShareRedPack => "ShareBoxSourceType_SHARE_RED_PACK",
            Self::RedPackRain => "RED_PACK_RAIN",
            Self::ThanksRedPack => "ShareBoxSourceType_THANKS_RED_PACK",
            Self::MillionRedPack => "ShareBoxSourceType_MILLION_RED_PACK",
            Self::RedPackRainBefore => "RED_PACK_RAIN_BEFORE",
            Self::RedPackRainAfter => "RED_PACK_RAIN_AFTER",
            Self::QuizDialog => "QUIZ_DIALOG",
            Self::QuizReviveCardPanel => "QUIZ_REVIVE_CARD_PANEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ShareBoxSourceType_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "DEFAULT_SHARE" => Some(Self::DefaultShare),
            "ShareBoxSourceType_SHARE_RED_PACK" => Some(Self::ShareRedPack),
            "RED_PACK_RAIN" => Some(Self::RedPackRain),
            "ShareBoxSourceType_THANKS_RED_PACK" => Some(Self::ThanksRedPack),
            "ShareBoxSourceType_MILLION_RED_PACK" => Some(Self::MillionRedPack),
            "RED_PACK_RAIN_BEFORE" => Some(Self::RedPackRainBefore),
            "RED_PACK_RAIN_AFTER" => Some(Self::RedPackRainAfter),
            "QUIZ_DIALOG" => Some(Self::QuizDialog),
            "QUIZ_REVIVE_CARD_PANEL" => Some(Self::QuizReviveCardPanel),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShareChannel {
    LiveEntranceTypeUnknown0 = 0,
    Wechat = 1,
    WechatTimeline = 2,
    Qq = 3,
    QqZone = 4,
    SinaWeibo = 5,
}
impl ShareChannel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown0 => "ShareChannel_LiveEntranceType_UNKNOWN0",
            Self::Wechat => "ShareChannel_WECHAT",
            Self::WechatTimeline => "WECHAT_TIMELINE",
            Self::Qq => "ShareChannel_QQ",
            Self::QqZone => "QQ_ZONE",
            Self::SinaWeibo => "SINA_WEIBO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ShareChannel_LiveEntranceType_UNKNOWN0" => {
                Some(Self::LiveEntranceTypeUnknown0)
            }
            "ShareChannel_WECHAT" => Some(Self::Wechat),
            "WECHAT_TIMELINE" => Some(Self::WechatTimeline),
            "ShareChannel_QQ" => Some(Self::Qq),
            "QQ_ZONE" => Some(Self::QqZone),
            "SINA_WEIBO" => Some(Self::SinaWeibo),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ExternalIcon {
    LiveEntranceTypeUnknown1 = 0,
    NomalLive = 1,
    RedPacket = 2,
    ShopCar = 3,
    Ktv = 4,
    VoiceParty = 5,
    Fanstop = 6,
    Pk = 7,
    LastViewed = 8,
    Game = 9,
    DistrictRank = 10,
    HotLive = 11,
    PaidLive = 12,
    Course = 13,
    Theater = 14,
    TeamPk = 15,
    Booked = 16,
}
impl ExternalIcon {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "ExternalIcon_LiveEntranceType_UNKNOWN1",
            Self::NomalLive => "NOMAL_LIVE",
            Self::RedPacket => "RED_PACKET",
            Self::ShopCar => "SHOP_CAR",
            Self::Ktv => "ExternalIcon_KTV",
            Self::VoiceParty => "VOICE_PARTY",
            Self::Fanstop => "FANSTOP",
            Self::Pk => "PK",
            Self::LastViewed => "LAST_VIEWED",
            Self::Game => "GAME",
            Self::DistrictRank => "ExternalIcon_DISTRICT_RANK",
            Self::HotLive => "HOT_LIVE",
            Self::PaidLive => "PAID_LIVE",
            Self::Course => "COURSE",
            Self::Theater => "THEATER",
            Self::TeamPk => "TEAM_PK",
            Self::Booked => "BOOKED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ExternalIcon_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "NOMAL_LIVE" => Some(Self::NomalLive),
            "RED_PACKET" => Some(Self::RedPacket),
            "SHOP_CAR" => Some(Self::ShopCar),
            "ExternalIcon_KTV" => Some(Self::Ktv),
            "VOICE_PARTY" => Some(Self::VoiceParty),
            "FANSTOP" => Some(Self::Fanstop),
            "PK" => Some(Self::Pk),
            "LAST_VIEWED" => Some(Self::LastViewed),
            "GAME" => Some(Self::Game),
            "ExternalIcon_DISTRICT_RANK" => Some(Self::DistrictRank),
            "HOT_LIVE" => Some(Self::HotLive),
            "PAID_LIVE" => Some(Self::PaidLive),
            "COURSE" => Some(Self::Course),
            "THEATER" => Some(Self::Theater),
            "TEAM_PK" => Some(Self::TeamPk),
            "BOOKED" => Some(Self::Booked),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveFormat {
    LiveEntranceTypeUnknown2 = 0,
    Nomal = 1,
    VoiceParty = 2,
    Ktv = 3,
}
impl LiveFormat {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "LiveFormat_LiveEntranceType_UNKNOWN2",
            Self::Nomal => "LIVE_FORMAT_NOMAL",
            Self::VoiceParty => "LIVE_FORMAT_VOICE_PARTY",
            Self::Ktv => "LIVE_FORMAT_KTV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LiveFormat_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "LIVE_FORMAT_NOMAL" => Some(Self::Nomal),
            "LIVE_FORMAT_VOICE_PARTY" => Some(Self::VoiceParty),
            "LIVE_FORMAT_KTV" => Some(Self::Ktv),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveStreamMainType {
    UnknownLiveMainType = 0,
    LiveShow = 1,
    LiveGame = 2,
    LiveShop = 3,
    LiveLocalLife = 4,
    LiveSellHouse = 5,
    LiveRecruit = 6,
    BusinessChannel = 7,
}
impl LiveStreamMainType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownLiveMainType => "UNKNOWN_LIVE_MAIN_TYPE",
            Self::LiveShow => "LIVE_SHOW",
            Self::LiveGame => "LIVE_GAME",
            Self::LiveShop => "LIVE_SHOP",
            Self::LiveLocalLife => "LIVE_LOCAL_LIFE",
            Self::LiveSellHouse => "LIVE_SELL_HOUSE",
            Self::LiveRecruit => "LIVE_RECRUIT",
            Self::BusinessChannel => "BUSINESS_CHANNEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_LIVE_MAIN_TYPE" => Some(Self::UnknownLiveMainType),
            "LIVE_SHOW" => Some(Self::LiveShow),
            "LIVE_GAME" => Some(Self::LiveGame),
            "LIVE_SHOP" => Some(Self::LiveShop),
            "LIVE_LOCAL_LIFE" => Some(Self::LiveLocalLife),
            "LIVE_SELL_HOUSE" => Some(Self::LiveSellHouse),
            "LIVE_RECRUIT" => Some(Self::LiveRecruit),
            "BUSINESS_CHANNEL" => Some(Self::BusinessChannel),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveStreamSubType {
    UnknownLiveSubType = 0,
    LiveShopCart = 1,
    LiveLocalLifePure = 2,
    LiveSellHousePure = 3,
    LiveRecruitPure = 4,
    LiveBlindDate = 5,
    LiveGrAccount = 6,
    LivePrAccount = 7,
    LiveBulletScreenPlay = 8,
    LiveSport = 9,
    LiveHealth = 10,
    LivePaid = 11,
    LiveCourse = 12,
    LiveShowPure = 13,
    LiveGameCompetition = 14,
    BusinessAdBell = 15,
    BusinessAdEco = 16,
    LiveGameNormal = 17,
    LiveVoicePartySubType = 18,
}
impl LiveStreamSubType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::UnknownLiveSubType => "UNKNOWN_LIVE_SUB_TYPE",
            Self::LiveShopCart => "LIVE_SHOP_CART",
            Self::LiveLocalLifePure => "LIVE_LOCAL_LIFE_PURE",
            Self::LiveSellHousePure => "LIVE_SELL_HOUSE_PURE",
            Self::LiveRecruitPure => "LIVE_RECRUIT_PURE",
            Self::LiveBlindDate => "LIVE_BLIND_DATE",
            Self::LiveGrAccount => "LIVE_GR_ACCOUNT",
            Self::LivePrAccount => "LIVE_PR_ACCOUNT",
            Self::LiveBulletScreenPlay => "LIVE_BULLET_SCREEN_PLAY",
            Self::LiveSport => "LIVE_SPORT",
            Self::LiveHealth => "LIVE_HEALTH",
            Self::LivePaid => "LIVE_PAID",
            Self::LiveCourse => "LIVE_COURSE",
            Self::LiveShowPure => "LIVE_SHOW_PURE",
            Self::LiveGameCompetition => "LIVE_GAME_COMPETITION",
            Self::BusinessAdBell => "BUSINESS_AD_BELL",
            Self::BusinessAdEco => "BUSINESS_AD_ECO",
            Self::LiveGameNormal => "LIVE_GAME_NORMAL",
            Self::LiveVoicePartySubType => "LIVE_VOICE_PARTY_SUB_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN_LIVE_SUB_TYPE" => Some(Self::UnknownLiveSubType),
            "LIVE_SHOP_CART" => Some(Self::LiveShopCart),
            "LIVE_LOCAL_LIFE_PURE" => Some(Self::LiveLocalLifePure),
            "LIVE_SELL_HOUSE_PURE" => Some(Self::LiveSellHousePure),
            "LIVE_RECRUIT_PURE" => Some(Self::LiveRecruitPure),
            "LIVE_BLIND_DATE" => Some(Self::LiveBlindDate),
            "LIVE_GR_ACCOUNT" => Some(Self::LiveGrAccount),
            "LIVE_PR_ACCOUNT" => Some(Self::LivePrAccount),
            "LIVE_BULLET_SCREEN_PLAY" => Some(Self::LiveBulletScreenPlay),
            "LIVE_SPORT" => Some(Self::LiveSport),
            "LIVE_HEALTH" => Some(Self::LiveHealth),
            "LIVE_PAID" => Some(Self::LivePaid),
            "LIVE_COURSE" => Some(Self::LiveCourse),
            "LIVE_SHOW_PURE" => Some(Self::LiveShowPure),
            "LIVE_GAME_COMPETITION" => Some(Self::LiveGameCompetition),
            "BUSINESS_AD_BELL" => Some(Self::BusinessAdBell),
            "BUSINESS_AD_ECO" => Some(Self::BusinessAdEco),
            "LIVE_GAME_NORMAL" => Some(Self::LiveGameNormal),
            "LIVE_VOICE_PARTY_SUB_TYPE" => Some(Self::LiveVoicePartySubType),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveStyle {
    StyleUnknown = 0,
    Simple = 1,
    Normal = 2,
    Lite = 3,
    FourthTab = 4,
    FloatingWindow = 5,
}
impl LiveStyle {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::StyleUnknown => "STYLE_UNKNOWN",
            Self::Simple => "SIMPLE",
            Self::Normal => "LiveStyle_NORMAL",
            Self::Lite => "LITE",
            Self::FourthTab => "FOURTH_TAB",
            Self::FloatingWindow => "FLOATING_WINDOW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STYLE_UNKNOWN" => Some(Self::StyleUnknown),
            "SIMPLE" => Some(Self::Simple),
            "LiveStyle_NORMAL" => Some(Self::Normal),
            "LITE" => Some(Self::Lite),
            "FOURTH_TAB" => Some(Self::FourthTab),
            "FLOATING_WINDOW" => Some(Self::FloatingWindow),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LiveSubStyle {
    SubtypeUnknown = 0,
    SimpleOnline = 1,
    SimpleV2 = 2,
}
impl LiveSubStyle {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::SubtypeUnknown => "SUBTYPE_UNKNOWN",
            Self::SimpleOnline => "SIMPLE_ONLINE",
            Self::SimpleV2 => "SIMPLE_V2",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUBTYPE_UNKNOWN" => Some(Self::SubtypeUnknown),
            "SIMPLE_ONLINE" => Some(Self::SimpleOnline),
            "SIMPLE_V2" => Some(Self::SimpleV2),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnterMicSeatReason {
    Unknown5 = 0,
    GuestApplyManualAccept = 1,
    GuestApplyAutoAccept = 2,
    AnchorManualInvite = 3,
    AnchorAutoInvite = 4,
    KtvStage = 5,
    ManualMic = 6,
    AutoMic = 7,
    ClickEmptyMic = 8,
    ManualInvite = 9,
    JoinPkTeam = 10,
    AnchorPkTeamInvite = 11,
    AudienceJoinPkTeam = 12,
    CloseFromAnchorLiveEnterOtherLive = 13,
}
impl EnterMicSeatReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown5 => "UNKNOWN5",
            Self::GuestApplyManualAccept => "GUEST_APPLY_MANUAL_ACCEPT",
            Self::GuestApplyAutoAccept => "GUEST_APPLY_AUTO_ACCEPT",
            Self::AnchorManualInvite => "ANCHOR_MANUAL_INVITE",
            Self::AnchorAutoInvite => "ANCHOR_AUTO_INVITE",
            Self::KtvStage => "KTV_STAGE",
            Self::ManualMic => "MANUAL_MIC",
            Self::AutoMic => "AUTO_MIC",
            Self::ClickEmptyMic => "CLICK_EMPTY_MIC",
            Self::ManualInvite => "MANUAL_INVITE",
            Self::JoinPkTeam => "JOIN_PK_TEAM",
            Self::AnchorPkTeamInvite => "ANCHOR_PK_TEAM_INVITE",
            Self::AudienceJoinPkTeam => "AUDIENCE_JOIN_PK_TEAM",
            Self::CloseFromAnchorLiveEnterOtherLive => {
                "CLOSE_FROM_ANCHOR_LIVE_ENTER_OTHER_LIVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN5" => Some(Self::Unknown5),
            "GUEST_APPLY_MANUAL_ACCEPT" => Some(Self::GuestApplyManualAccept),
            "GUEST_APPLY_AUTO_ACCEPT" => Some(Self::GuestApplyAutoAccept),
            "ANCHOR_MANUAL_INVITE" => Some(Self::AnchorManualInvite),
            "ANCHOR_AUTO_INVITE" => Some(Self::AnchorAutoInvite),
            "KTV_STAGE" => Some(Self::KtvStage),
            "MANUAL_MIC" => Some(Self::ManualMic),
            "AUTO_MIC" => Some(Self::AutoMic),
            "CLICK_EMPTY_MIC" => Some(Self::ClickEmptyMic),
            "MANUAL_INVITE" => Some(Self::ManualInvite),
            "JOIN_PK_TEAM" => Some(Self::JoinPkTeam),
            "ANCHOR_PK_TEAM_INVITE" => Some(Self::AnchorPkTeamInvite),
            "AUDIENCE_JOIN_PK_TEAM" => Some(Self::AudienceJoinPkTeam),
            "CLOSE_FROM_ANCHOR_LIVE_ENTER_OTHER_LIVE" => {
                Some(Self::CloseFromAnchorLiveEnterOtherLive)
            }
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EntryPage {
    LivePush = 0,
    LiveCover = 1,
}
impl EntryPage {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LivePush => "EntryPage_LIVE_PUSH",
            Self::LiveCover => "LIVE_COVER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EntryPage_LIVE_PUSH" => Some(Self::LivePush),
            "LIVE_COVER" => Some(Self::LiveCover),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum InviteMicChannel {
    Unknown7 = 0,
    OnlineAudienceList = 1,
    Search = 2,
    PersonalCard = 3,
}
impl InviteMicChannel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown7 => "UNKNOWN7",
            Self::OnlineAudienceList => "ONLINE_AUDIENCE_LIST",
            Self::Search => "InviteMicChannel_SEARCH",
            Self::PersonalCard => "PERSONAL_CARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN7" => Some(Self::Unknown7),
            "ONLINE_AUDIENCE_LIST" => Some(Self::OnlineAudienceList),
            "InviteMicChannel_SEARCH" => Some(Self::Search),
            "PERSONAL_CARD" => Some(Self::PersonalCard),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeaveKtvReason {
    Unknown4 = 0,
    VoicePartyEnd2 = 1,
    LeaveKtv = 2,
    LeaveLive3 = 3,
}
impl LeaveKtvReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "LeaveKTVReason_UNKNOWN4",
            Self::VoicePartyEnd2 => "VOICE_PARTY_END2",
            Self::LeaveKtv => "LEAVE_KTV",
            Self::LeaveLive3 => "LEAVE_LIVE3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LeaveKTVReason_UNKNOWN4" => Some(Self::Unknown4),
            "VOICE_PARTY_END2" => Some(Self::VoicePartyEnd2),
            "LEAVE_KTV" => Some(Self::LeaveKtv),
            "LEAVE_LIVE3" => Some(Self::LeaveLive3),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeaveKtvStageReason {
    LiveEntranceTypeUnknown3 = 0,
    BgmEnd = 1,
    PlayNext = 2,
    NoHeartbeat = 3,
    LeaveLive2 = 4,
    LeaveKtv1 = 5,
    VoicePartyEnd3 = 6,
    PlayOtherPlayer1 = 7,
}
impl LeaveKtvStageReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown3 => {
                "LeaveKTVStageReason_LiveEntranceType_UNKNOWN3"
            }
            Self::BgmEnd => "BGM_END",
            Self::PlayNext => "PLAY_NEXT",
            Self::NoHeartbeat => "NO_HEARTBEAT",
            Self::LeaveLive2 => "LEAVE_LIVE2",
            Self::LeaveKtv1 => "LEAVE_KTV1",
            Self::VoicePartyEnd3 => "VOICE_PARTY_END3",
            Self::PlayOtherPlayer1 => "PLAY_OTHER_PLAYER1",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LeaveKTVStageReason_LiveEntranceType_UNKNOWN3" => {
                Some(Self::LiveEntranceTypeUnknown3)
            }
            "BGM_END" => Some(Self::BgmEnd),
            "PLAY_NEXT" => Some(Self::PlayNext),
            "NO_HEARTBEAT" => Some(Self::NoHeartbeat),
            "LEAVE_LIVE2" => Some(Self::LeaveLive2),
            "LEAVE_KTV1" => Some(Self::LeaveKtv1),
            "VOICE_PARTY_END3" => Some(Self::VoicePartyEnd3),
            "PLAY_OTHER_PLAYER1" => Some(Self::PlayOtherPlayer1),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeaveMicSeatReason {
    LiveEntranceTypeUnknown1 = 0,
    VoicePartyEnd = 1,
    LeaveMicSeat = 2,
    ForceLeaveMicSeat = 3,
    KickOut = 4,
    LeaveLive = 5,
    PlayOtherPlayer = 6,
    AudienceLeaveKtvStage = 7,
    AuthorLockMic = 8,
    LookOnly = 9,
    DiscardJoinPkTeam = 10,
    SwitchVoicePartyType = 11,
}
impl LeaveMicSeatReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => {
                "LeaveMicSeatReason_LiveEntranceType_UNKNOWN1"
            }
            Self::VoicePartyEnd => "VOICE_PARTY_END",
            Self::LeaveMicSeat => "LEAVE_MIC_SEAT",
            Self::ForceLeaveMicSeat => "FORCE_LEAVE_MIC_SEAT",
            Self::KickOut => "KICK_OUT",
            Self::LeaveLive => "LEAVE_LIVE",
            Self::PlayOtherPlayer => "PLAY_OTHER_PLAYER",
            Self::AudienceLeaveKtvStage => "AUDIENCE_LEAVE_KTV_STAGE",
            Self::AuthorLockMic => "AUTHOR_LOCK_MIC",
            Self::LookOnly => "LOOK_ONLY",
            Self::DiscardJoinPkTeam => "DISCARD_JOIN_PK_TEAM",
            Self::SwitchVoicePartyType => "SWITCH_VOICE_PARTY_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LeaveMicSeatReason_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "VOICE_PARTY_END" => Some(Self::VoicePartyEnd),
            "LEAVE_MIC_SEAT" => Some(Self::LeaveMicSeat),
            "FORCE_LEAVE_MIC_SEAT" => Some(Self::ForceLeaveMicSeat),
            "KICK_OUT" => Some(Self::KickOut),
            "LEAVE_LIVE" => Some(Self::LeaveLive),
            "PLAY_OTHER_PLAYER" => Some(Self::PlayOtherPlayer),
            "AUDIENCE_LEAVE_KTV_STAGE" => Some(Self::AudienceLeaveKtvStage),
            "AUTHOR_LOCK_MIC" => Some(Self::AuthorLockMic),
            "LOOK_ONLY" => Some(Self::LookOnly),
            "DISCARD_JOIN_PK_TEAM" => Some(Self::DiscardJoinPkTeam),
            "SWITCH_VOICE_PARTY_TYPE" => Some(Self::SwitchVoicePartyType),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeaveVoicePartyReason {
    LiveEntranceTypeUnknown2 = 0,
    VoicePartyEnd1 = 1,
    LeaveLive1 = 2,
}
impl LeaveVoicePartyReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => {
                "LeaveVoicePartyReason_LiveEntranceType_UNKNOWN2"
            }
            Self::VoicePartyEnd1 => "VOICE_PARTY_END1",
            Self::LeaveLive1 => "LEAVE_LIVE1",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LeaveVoicePartyReason_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "VOICE_PARTY_END1" => Some(Self::VoicePartyEnd1),
            "LEAVE_LIVE1" => Some(Self::LeaveLive1),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MicStatus {
    Unknown6 = 0,
    CloseMic = 1,
    LockMic = 2,
    InviteMic = 3,
}
impl MicStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown6 => "MicStatus_UNKNOWN6",
            Self::CloseMic => "CLOSE_MIC",
            Self::LockMic => "LOCK_MIC",
            Self::InviteMic => "INVITE_MIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MicStatus_UNKNOWN6" => Some(Self::Unknown6),
            "CLOSE_MIC" => Some(Self::CloseMic),
            "LOCK_MIC" => Some(Self::LockMic),
            "INVITE_MIC" => Some(Self::InviteMic),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MicType {
    None = 0,
    Name = 1,
    Vip = 2,
}
impl MicType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "MicType_NONE",
            Self::Name => "NAME",
            Self::Vip => "VIP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MicType_NONE" => Some(Self::None),
            "NAME" => Some(Self::Name),
            "VIP" => Some(Self::Vip),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mode {
    Chat = 0,
    Ktv = 1,
}
impl Mode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Chat => "CHAT",
            Self::Ktv => "Mode_KTV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT" => Some(Self::Chat),
            "Mode_KTV" => Some(Self::Ktv),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Role {
    LiveEntranceTypeUnknown = 0,
    Anchor = 1,
    Audience = 2,
    Guest = 3,
    Singer = 4,
}
impl Role {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => "Role_LiveEntranceType_UNKNOWN",
            Self::Anchor => "ANCHOR",
            Self::Audience => "Role_AUDIENCE",
            Self::Guest => "GUEST",
            Self::Singer => "SINGER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Role_LiveEntranceType_UNKNOWN" => Some(Self::LiveEntranceTypeUnknown),
            "ANCHOR" => Some(Self::Anchor),
            "Role_AUDIENCE" => Some(Self::Audience),
            "GUEST" => Some(Self::Guest),
            "SINGER" => Some(Self::Singer),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SingerPlayBgmTrigger {
    AryaBroadcast = 0,
    PersistentConnection = 1,
}
impl SingerPlayBgmTrigger {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::AryaBroadcast => "ARYA_BROADCAST",
            Self::PersistentConnection => "PERSISTENT_CONNECTION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ARYA_BROADCAST" => Some(Self::AryaBroadcast),
            "PERSISTENT_CONNECTION" => Some(Self::PersistentConnection),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PkStatus {
    LiveEntranceTypeUnknown3 = 0,
    Initial = 1,
    Medium = 2,
    Punish = 3,
    End = 4,
}
impl PkStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown3 => "PkStatus_LiveEntranceType_UNKNOWN3",
            Self::Initial => "INITIAL",
            Self::Medium => "MEDIUM",
            Self::Punish => "PUNISH",
            Self::End => "END",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PkStatus_LiveEntranceType_UNKNOWN3" => Some(Self::LiveEntranceTypeUnknown3),
            "INITIAL" => Some(Self::Initial),
            "MEDIUM" => Some(Self::Medium),
            "PUNISH" => Some(Self::Punish),
            "END" => Some(Self::End),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayTeamPkEndReason {
    LiveEntranceTypeUnknown = 0,
    ExitLive = 1,
    CloseTeampk = 2,
    CloseVoiceParty = 3,
    CloseLive = 4,
}
impl PlayTeamPkEndReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => {
                "PlayTeamPkEndReason_LiveEntranceType_UNKNOWN"
            }
            Self::ExitLive => "EXIT_LIVE",
            Self::CloseTeampk => "CLOSE_TEAMPK",
            Self::CloseVoiceParty => "PlayTeamPkEndReason_CLOSE_VOICE_PARTY",
            Self::CloseLive => "PlayTeamPkEndReason_CLOSE_LIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PlayTeamPkEndReason_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "EXIT_LIVE" => Some(Self::ExitLive),
            "CLOSE_TEAMPK" => Some(Self::CloseTeampk),
            "PlayTeamPkEndReason_CLOSE_VOICE_PARTY" => Some(Self::CloseVoiceParty),
            "PlayTeamPkEndReason_CLOSE_LIVE" => Some(Self::CloseLive),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TeamHolder {
    LiveEntranceTypeUnknown2 = 0,
    Yello = 1,
    Bule = 2,
}
impl TeamHolder {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "TeamHolder_LiveEntranceType_UNKNOWN2",
            Self::Yello => "YELLO",
            Self::Bule => "BULE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TeamHolder_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "YELLO" => Some(Self::Yello),
            "BULE" => Some(Self::Bule),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AudienceLeavetheaterSeriesReason {
    LiveEntranceTypeUnknown2 = 0,
    AuthorOperate = 1,
    Exit = 2,
}
impl AudienceLeavetheaterSeriesReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => {
                "AudienceLeavetheaterSeriesReason_LiveEntranceType_UNKNOWN2"
            }
            Self::AuthorOperate => "AUTHOR_OPERATE",
            Self::Exit => "EXIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AudienceLeavetheaterSeriesReason_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "AUTHOR_OPERATE" => Some(Self::AuthorOperate),
            "EXIT" => Some(Self::Exit),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthorLeavetheaterSeriesReason {
    LiveEntranceTypeUnknown1 = 0,
    SeriesEnd = 1,
    Change = 2,
    CloseTheater = 3,
    CloseVoiceParty = 4,
    CloseLive = 5,
}
impl AuthorLeavetheaterSeriesReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => {
                "AuthorLeavetheaterSeriesReason_LiveEntranceType_UNKNOWN1"
            }
            Self::SeriesEnd => "SERIES_END",
            Self::Change => "CHANGE",
            Self::CloseTheater => "CLOSE_THEATER",
            Self::CloseVoiceParty => "AuthorLeavetheaterSeriesReason_CLOSE_VOICE_PARTY",
            Self::CloseLive => "AuthorLeavetheaterSeriesReason_CLOSE_LIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AuthorLeavetheaterSeriesReason_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "SERIES_END" => Some(Self::SeriesEnd),
            "CHANGE" => Some(Self::Change),
            "CLOSE_THEATER" => Some(Self::CloseTheater),
            "AuthorLeavetheaterSeriesReason_CLOSE_VOICE_PARTY" => {
                Some(Self::CloseVoiceParty)
            }
            "AuthorLeavetheaterSeriesReason_CLOSE_LIVE" => Some(Self::CloseLive),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DramaType {
    LiveEntranceTypeUnknown3 = 0,
    Tube = 1,
    Acfun = 2,
    Film = 3,
    Live = 4,
}
impl DramaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown3 => "DramaType_LiveEntranceType_UNKNOWN3",
            Self::Tube => "TUBE",
            Self::Acfun => "DramaType_ACFUN",
            Self::Film => "FILM",
            Self::Live => "LIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DramaType_LiveEntranceType_UNKNOWN3" => Some(Self::LiveEntranceTypeUnknown3),
            "TUBE" => Some(Self::Tube),
            "DramaType_ACFUN" => Some(Self::Acfun),
            "FILM" => Some(Self::Film),
            "LIVE" => Some(Self::Live),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LeaveTheaterReason {
    LiveEntranceTypeUnknown = 0,
    AudienceExitLive = 1,
    AuthorCloseTheater = 2,
    AuthorCloseVoiceParty = 3,
    AuthorCloseLive = 4,
}
impl LeaveTheaterReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => {
                "LeaveTheaterReason_LiveEntranceType_UNKNOWN"
            }
            Self::AudienceExitLive => "LeaveTheaterReason_AUDIENCE_EXIT_LIVE",
            Self::AuthorCloseTheater => "AUTHOR_CLOSE_THEATER",
            Self::AuthorCloseVoiceParty => "AUTHOR_CLOSE_VOICE_PARTY",
            Self::AuthorCloseLive => "AUTHOR_CLOSE_LIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LeaveTheaterReason_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "LeaveTheaterReason_AUDIENCE_EXIT_LIVE" => Some(Self::AudienceExitLive),
            "AUTHOR_CLOSE_THEATER" => Some(Self::AuthorCloseTheater),
            "AUTHOR_CLOSE_VOICE_PARTY" => Some(Self::AuthorCloseVoiceParty),
            "AUTHOR_CLOSE_LIVE" => Some(Self::AuthorCloseLive),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ActionType {
    LiveEntranceTypeUnknown1 = 0,
    Login = 1,
    Signup = 2,
}
impl ActionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "ActionType_LiveEntranceType_UNKNOWN1",
            Self::Login => "LOGIN",
            Self::Signup => "SIGNUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ActionType_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "LOGIN" => Some(Self::Login),
            "SIGNUP" => Some(Self::Signup),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Source {
    LiveEntranceTypeUnknown1 = 0,
    Contacts = 1,
    Facebook = 2,
    Twitter = 3,
    Qq = 4,
    Weibo = 5,
    Vk = 6,
}
impl Source {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "Source_LiveEntranceType_UNKNOWN1",
            Self::Contacts => "CONTACTS",
            Self::Facebook => "FACEBOOK",
            Self::Twitter => "TWITTER",
            Self::Qq => "Source_QQ",
            Self::Weibo => "WEIBO",
            Self::Vk => "VK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Source_LiveEntranceType_UNKNOWN1" => Some(Self::LiveEntranceTypeUnknown1),
            "CONTACTS" => Some(Self::Contacts),
            "FACEBOOK" => Some(Self::Facebook),
            "TWITTER" => Some(Self::Twitter),
            "Source_QQ" => Some(Self::Qq),
            "WEIBO" => Some(Self::Weibo),
            "VK" => Some(Self::Vk),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AggregationType {
    LiveEntranceTypeUnknown2 = 0,
    Reward = 1,
    Comment = 2,
    At = 3,
    Join = 4,
    CommentLike = 5,
    Like = 6,
    Follow = 7,
    UseMusic = 8,
    Inform = 9,
    Token = 10,
}
impl AggregationType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "AggregationType_LiveEntranceType_UNKNOWN2",
            Self::Reward => "REWARD",
            Self::Comment => "AggregationType_COMMENT",
            Self::At => "AggregationType_AT",
            Self::Join => "JOIN",
            Self::CommentLike => "COMMENT_LIKE",
            Self::Like => "AggregationType_LIKE",
            Self::Follow => "AggregationType_FOLLOW",
            Self::UseMusic => "USE_MUSIC",
            Self::Inform => "INFORM",
            Self::Token => "TOKEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AggregationType_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "REWARD" => Some(Self::Reward),
            "AggregationType_COMMENT" => Some(Self::Comment),
            "AggregationType_AT" => Some(Self::At),
            "JOIN" => Some(Self::Join),
            "COMMENT_LIKE" => Some(Self::CommentLike),
            "AggregationType_LIKE" => Some(Self::Like),
            "AggregationType_FOLLOW" => Some(Self::Follow),
            "USE_MUSIC" => Some(Self::UseMusic),
            "INFORM" => Some(Self::Inform),
            "TOKEN" => Some(Self::Token),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    LiveEntranceTypeUnknown3 = 0,
    Latest = 1,
    Read = 2,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown3 => "Status_LiveEntranceType_UNKNOWN3",
            Self::Latest => "LATEST",
            Self::Read => "READ",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Status_LiveEntranceType_UNKNOWN3" => Some(Self::LiveEntranceTypeUnknown3),
            "LATEST" => Some(Self::Latest),
            "READ" => Some(Self::Read),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentSource {
    LiveEntranceTypeUnknown1 = 0,
    Follow = 1,
    Reco = 2,
}
impl ContentSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "ContentSource_LiveEntranceType_UNKNOWN1",
            Self::Follow => "ContentSource_FOLLOW",
            Self::Reco => "RECO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ContentSource_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "ContentSource_FOLLOW" => Some(Self::Follow),
            "RECO" => Some(Self::Reco),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ContentType {
    LiveEntranceTypeUnkonwn1 = 0,
    User = 1,
    MusicTag = 2,
    TopicTag = 3,
    PoiTag = 4,
    MagicFaceTag = 5,
    Music = 6,
    Photo = 7,
    LiveStream = 8,
    GifSticker = 9,
    Creativity = 10,
    Moment = 11,
    PersonalChat = 12,
    GroupChat = 13,
    PublicGroupChat = 14,
}
impl ContentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnkonwn1 => "ContentType_LiveEntranceType_UNKONWN1",
            Self::User => "USER",
            Self::MusicTag => "MUSIC_TAG",
            Self::TopicTag => "TOPIC_TAG",
            Self::PoiTag => "POI_TAG",
            Self::MagicFaceTag => "MAGIC_FACE_TAG",
            Self::Music => "ContentType_MUSIC",
            Self::Photo => "ContentType_PHOTO",
            Self::LiveStream => "LIVE_STREAM",
            Self::GifSticker => "GIF_STICKER",
            Self::Creativity => "CREATIVITY",
            Self::Moment => "ContentType_MOMENT",
            Self::PersonalChat => "PERSONAL_CHAT",
            Self::GroupChat => "GROUP_CHAT",
            Self::PublicGroupChat => "PUBLIC_GROUP_CHAT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ContentType_LiveEntranceType_UNKONWN1" => {
                Some(Self::LiveEntranceTypeUnkonwn1)
            }
            "USER" => Some(Self::User),
            "MUSIC_TAG" => Some(Self::MusicTag),
            "TOPIC_TAG" => Some(Self::TopicTag),
            "POI_TAG" => Some(Self::PoiTag),
            "MAGIC_FACE_TAG" => Some(Self::MagicFaceTag),
            "ContentType_MUSIC" => Some(Self::Music),
            "ContentType_PHOTO" => Some(Self::Photo),
            "LIVE_STREAM" => Some(Self::LiveStream),
            "GIF_STICKER" => Some(Self::GifSticker),
            "CREATIVITY" => Some(Self::Creativity),
            "ContentType_MOMENT" => Some(Self::Moment),
            "PERSONAL_CHAT" => Some(Self::PersonalChat),
            "GROUP_CHAT" => Some(Self::GroupChat),
            "PUBLIC_GROUP_CHAT" => Some(Self::PublicGroupChat),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MorelistType {
    LiveEntranceTypeUnknown = 0,
    MusicStation = 1,
    RecoLive = 2,
    FollowLive = 3,
    FollowLiveRevision = 4,
    FeaturedFeed = 5,
    ProfileFeed = 6,
    CameraChainLive = 7,
    LiveMoreSquare = 8,
    ReturnFirst = 9,
}
impl MorelistType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => "MorelistType_LiveEntranceType_UNKNOWN",
            Self::MusicStation => "MUSIC_STATION",
            Self::RecoLive => "RECO_LIVE",
            Self::FollowLive => "FOLLOW_LIVE",
            Self::FollowLiveRevision => "FOLLOW_LIVE_REVISION",
            Self::FeaturedFeed => "FEATURED_FEED",
            Self::ProfileFeed => "PROFILE_FEED",
            Self::CameraChainLive => "CAMERA_CHAIN_LIVE",
            Self::LiveMoreSquare => "LIVE_MORE_SQUARE",
            Self::ReturnFirst => "RETURN_FIRST",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MorelistType_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "MUSIC_STATION" => Some(Self::MusicStation),
            "RECO_LIVE" => Some(Self::RecoLive),
            "FOLLOW_LIVE" => Some(Self::FollowLive),
            "FOLLOW_LIVE_REVISION" => Some(Self::FollowLiveRevision),
            "FEATURED_FEED" => Some(Self::FeaturedFeed),
            "PROFILE_FEED" => Some(Self::ProfileFeed),
            "CAMERA_CHAIN_LIVE" => Some(Self::CameraChainLive),
            "LIVE_MORE_SQUARE" => Some(Self::LiveMoreSquare),
            "RETURN_FIRST" => Some(Self::ReturnFirst),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FileType {
    LiveEntranceTypeUnknown1 = 0,
    Whole = 1,
    Snippet = 2,
}
impl FileType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "FileType_LiveEntranceType_UNKNOWN1",
            Self::Whole => "FileType_WHOLE",
            Self::Snippet => "SNIPPET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FileType_LiveEntranceType_UNKNOWN1" => Some(Self::LiveEntranceTypeUnknown1),
            "FileType_WHOLE" => Some(Self::Whole),
            "SNIPPET" => Some(Self::Snippet),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MusicPlayMode {
    LiveEntranceTypeUnknown = 0,
    Whole = 1,
    HotClip = 2,
}
impl MusicPlayMode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => "MusicPlayMode_LiveEntranceType_UNKNOWN",
            Self::Whole => "MusicPlayMode_WHOLE",
            Self::HotClip => "MusicPlayMode_HOT_CLIP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MusicPlayMode_LiveEntranceType_UNKNOWN" => {
                Some(Self::LiveEntranceTypeUnknown)
            }
            "MusicPlayMode_WHOLE" => Some(Self::Whole),
            "MusicPlayMode_HOT_CLIP" => Some(Self::HotClip),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Provider {
    LiveEntranceTypeUnknown1 = 0,
    Baidu = 1,
    Wechat = 2,
    Alipay = 3,
    Iap = 4,
}
impl Provider {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "Provider_LiveEntranceType_UNKNOWN1",
            Self::Baidu => "BAIDU",
            Self::Wechat => "Provider_WECHAT",
            Self::Alipay => "ALIPAY",
            Self::Iap => "IAP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Provider_LiveEntranceType_UNKNOWN1" => Some(Self::LiveEntranceTypeUnknown1),
            "BAIDU" => Some(Self::Baidu),
            "Provider_WECHAT" => Some(Self::Wechat),
            "ALIPAY" => Some(Self::Alipay),
            "IAP" => Some(Self::Iap),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AtlasType {
    LiveEntranceTypeUnknown = 0,
    Horizontal = 1,
    Vertical = 2,
    Single = 3,
}
impl AtlasType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => "AtlasType_LiveEntranceType_UNKNOWN",
            Self::Horizontal => "HORIZONTAL",
            Self::Vertical => "AtlasType_VERTICAL",
            Self::Single => "SINGLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AtlasType_LiveEntranceType_UNKNOWN" => Some(Self::LiveEntranceTypeUnknown),
            "HORIZONTAL" => Some(Self::Horizontal),
            "AtlasType_VERTICAL" => Some(Self::Vertical),
            "SINGLE" => Some(Self::Single),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PhotoType {
    LiveEntranceTypeUnknown3 = 0,
    Common = 1,
    PanoramicPhoto = 2,
}
impl PhotoType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown3 => "PhotoType_LiveEntranceType_UNKNOWN3",
            Self::Common => "COMMON",
            Self::PanoramicPhoto => "PANORAMIC_PHOTO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PhotoType_LiveEntranceType_UNKNOWN3" => Some(Self::LiveEntranceTypeUnknown3),
            "COMMON" => Some(Self::Common),
            "PANORAMIC_PHOTO" => Some(Self::PanoramicPhoto),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SubType {
    LiveEntranceTypeUnknown2 = 0,
    LongArticle = 1,
}
impl SubType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "SubType_LiveEntranceType_UNKNOWN2",
            Self::LongArticle => "LONG_ARTICLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SubType_LiveEntranceType_UNKNOWN2" => Some(Self::LiveEntranceTypeUnknown2),
            "LONG_ARTICLE" => Some(Self::LongArticle),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VideoPlayStatus {
    Unknown4 = 0,
    UserPlay = 1,
    UserPause = 2,
}
impl VideoPlayStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown4 => "VideoPlayStatus_UNKNOWN4",
            Self::UserPlay => "USER_PLAY",
            Self::UserPause => "USER_PAUSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VideoPlayStatus_UNKNOWN4" => Some(Self::Unknown4),
            "USER_PLAY" => Some(Self::UserPlay),
            "USER_PAUSE" => Some(Self::UserPause),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Tab {
    LiveEntranceTypeUnknown2 = 0,
    Photo = 1,
    Privacy = 2,
    Like = 3,
    Music = 4,
    Moment = 5,
    Collect = 6,
    At = 7,
    Article = 8,
    AdBusinessCustom = 9,
    Pymk = 10,
    Shop = 11,
    LivePlayBack = 12,
    MagicFace = 13,
    Acfun = 14,
    Album = 15,
    Commodity = 16,
    LongVideo = 17,
    News = 18,
    AtMe = 19,
    Creation = 20,
    BambooNote = 21,
    FlowPlaylet = 22,
    Recommend = 23,
    Comment = 24,
    House = 25,
    Recruit = 26,
}
impl Tab {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "Tab_LiveEntranceType_UNKNOWN2",
            Self::Photo => "Tab_PHOTO",
            Self::Privacy => "PRIVACY",
            Self::Like => "Tab_LIKE",
            Self::Music => "Tab_MUSIC",
            Self::Moment => "Tab_MOMENT",
            Self::Collect => "COLLECT",
            Self::At => "Tab_AT",
            Self::Article => "ARTICLE",
            Self::AdBusinessCustom => "AD_BUSINESS_CUSTOM",
            Self::Pymk => "PYMK",
            Self::Shop => "SHOP",
            Self::LivePlayBack => "LIVE_PLAY_BACK",
            Self::MagicFace => "MAGIC_FACE",
            Self::Acfun => "Tab_ACFUN",
            Self::Album => "ALBUM",
            Self::Commodity => "COMMODITY",
            Self::LongVideo => "LONG_VIDEO",
            Self::News => "NEWS",
            Self::AtMe => "AT_ME",
            Self::Creation => "CREATION",
            Self::BambooNote => "BAMBOO_NOTE",
            Self::FlowPlaylet => "FLOW_PLAYLET",
            Self::Recommend => "RECOMMEND",
            Self::Comment => "Tab_COMMENT",
            Self::House => "HOUSE",
            Self::Recruit => "Tab_RECRUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Tab_LiveEntranceType_UNKNOWN2" => Some(Self::LiveEntranceTypeUnknown2),
            "Tab_PHOTO" => Some(Self::Photo),
            "PRIVACY" => Some(Self::Privacy),
            "Tab_LIKE" => Some(Self::Like),
            "Tab_MUSIC" => Some(Self::Music),
            "Tab_MOMENT" => Some(Self::Moment),
            "COLLECT" => Some(Self::Collect),
            "Tab_AT" => Some(Self::At),
            "ARTICLE" => Some(Self::Article),
            "AD_BUSINESS_CUSTOM" => Some(Self::AdBusinessCustom),
            "PYMK" => Some(Self::Pymk),
            "SHOP" => Some(Self::Shop),
            "LIVE_PLAY_BACK" => Some(Self::LivePlayBack),
            "MAGIC_FACE" => Some(Self::MagicFace),
            "Tab_ACFUN" => Some(Self::Acfun),
            "ALBUM" => Some(Self::Album),
            "COMMODITY" => Some(Self::Commodity),
            "LONG_VIDEO" => Some(Self::LongVideo),
            "NEWS" => Some(Self::News),
            "AT_ME" => Some(Self::AtMe),
            "CREATION" => Some(Self::Creation),
            "BAMBOO_NOTE" => Some(Self::BambooNote),
            "FLOW_PLAYLET" => Some(Self::FlowPlaylet),
            "RECOMMEND" => Some(Self::Recommend),
            "Tab_COMMENT" => Some(Self::Comment),
            "HOUSE" => Some(Self::House),
            "Tab_RECRUIT" => Some(Self::Recruit),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CameraType {
    LiveEntranceTypeUnknown2 = 0,
    Front = 1,
    Background = 2,
}
impl CameraType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "CameraType_LiveEntranceType_UNKNOWN2",
            Self::Front => "FRONT",
            Self::Background => "BACKGROUND",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CameraType_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "FRONT" => Some(Self::Front),
            "BACKGROUND" => Some(Self::Background),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EncodeType {
    LiveEntranceTypeUnknown1 = 0,
    MediaMuxer = 1,
    Ffmpeg = 2,
}
impl EncodeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "EncodeType_LiveEntranceType_UNKNOWN1",
            Self::MediaMuxer => "MEDIA_MUXER",
            Self::Ffmpeg => "FFMPEG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EncodeType_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "MEDIA_MUXER" => Some(Self::MediaMuxer),
            "FFMPEG" => Some(Self::Ffmpeg),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Action {
    LiveEntranceTypeUnknown1 = 0,
    StopRecord = 1,
    FinishRecord = 2,
    CancelRecord = 3,
    StartRecord = 4,
    PauseRecord = 5,
    OpenCamera = 6,
    Recording = 7,
    FrameProcess = 8,
}
impl Action {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "Action_LiveEntranceType_UNKNOWN1",
            Self::StopRecord => "STOP_RECORD",
            Self::FinishRecord => "FINISH_RECORD",
            Self::CancelRecord => "CANCEL_RECORD",
            Self::StartRecord => "START_RECORD",
            Self::PauseRecord => "PAUSE_RECORD",
            Self::OpenCamera => "OPEN_CAMERA",
            Self::Recording => "RECORDING",
            Self::FrameProcess => "FRAME_PROCESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Action_LiveEntranceType_UNKNOWN1" => Some(Self::LiveEntranceTypeUnknown1),
            "STOP_RECORD" => Some(Self::StopRecord),
            "FINISH_RECORD" => Some(Self::FinishRecord),
            "CANCEL_RECORD" => Some(Self::CancelRecord),
            "START_RECORD" => Some(Self::StartRecord),
            "PAUSE_RECORD" => Some(Self::PauseRecord),
            "OPEN_CAMERA" => Some(Self::OpenCamera),
            "RECORDING" => Some(Self::Recording),
            "FRAME_PROCESS" => Some(Self::FrameProcess),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DrawPrizePage {
    LiveEntranceTypeUnknown0 = 0,
    DrawPrizeRollPage = 1,
    DrawPrizeResultPage = 2,
    DrawPrizeBeforePage = 3,
    DrawViewAllListPage = 4,
    DrawPrizeBeforeButton = 5,
}
impl DrawPrizePage {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown0 => "DrawPrizePage_LiveEntranceType_UNKNOWN0",
            Self::DrawPrizeRollPage => "DRAW_PRIZE_ROLL_PAGE",
            Self::DrawPrizeResultPage => "DRAW_PRIZE_RESULT_PAGE",
            Self::DrawPrizeBeforePage => "DRAW_PRIZE_BEFORE_PAGE",
            Self::DrawViewAllListPage => "DRAW_VIEW_ALL_LIST_PAGE",
            Self::DrawPrizeBeforeButton => "DRAW_PRIZE_BEFORE_BUTTON",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DrawPrizePage_LiveEntranceType_UNKNOWN0" => {
                Some(Self::LiveEntranceTypeUnknown0)
            }
            "DRAW_PRIZE_ROLL_PAGE" => Some(Self::DrawPrizeRollPage),
            "DRAW_PRIZE_RESULT_PAGE" => Some(Self::DrawPrizeResultPage),
            "DRAW_PRIZE_BEFORE_PAGE" => Some(Self::DrawPrizeBeforePage),
            "DRAW_VIEW_ALL_LIST_PAGE" => Some(Self::DrawViewAllListPage),
            "DRAW_PRIZE_BEFORE_BUTTON" => Some(Self::DrawPrizeBeforeButton),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RedPackType {
    LiveEntranceTypeUnknown1 = 0,
    CommonRedPack = 1,
    ShareRedPack = 2,
    FollowRedPack = 3,
    TokenRedPack = 4,
    ArrowRedPack = 5,
    ThanksRedPack = 6,
    MillionRedPack = 7,
    AudienceRedPacket = 8,
    FansGroupRedPacket = 9,
    GiftRedPacket = 10,
    SurpriseRedPack = 11,
    CollectCardsRedPack = 12,
    FuqiRedPack = 13,
    LiveActivityCommonRedPack = 14,
    LivePortalRedPack = 15,
    LiveCommonConditiconRedpack = 16,
    FansIncreaseRedPack = 17,
    ArrowConditiconRedPack = 18,
    PasswordRedPacket = 19,
    LiveTaskLeee = 20,
    BulletPlayLeee = 21,
    LiveFansGroupSuper = 22,
    LiveFansGroupJinfen = 23,
    LiveFansGroupZuanfen = 24,
    LiveAudienceConditiconKwaiCoin = 25,
}
impl RedPackType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "RedPackType_LiveEntranceType_UNKNOWN1",
            Self::CommonRedPack => "COMMON_RED_PACK",
            Self::ShareRedPack => "RedPackType_SHARE_RED_PACK",
            Self::FollowRedPack => "FOLLOW_RED_PACK",
            Self::TokenRedPack => "TOKEN_RED_PACK",
            Self::ArrowRedPack => "ARROW_RED_PACK",
            Self::ThanksRedPack => "RedPackType_THANKS_RED_PACK",
            Self::MillionRedPack => "RedPackType_MILLION_RED_PACK",
            Self::AudienceRedPacket => "AUDIENCE_RED_PACKET",
            Self::FansGroupRedPacket => "FANS_GROUP_RED_PACKET",
            Self::GiftRedPacket => "GIFT_RED_PACKET",
            Self::SurpriseRedPack => "SURPRISE_RED_PACK",
            Self::CollectCardsRedPack => "COLLECT_CARDS_RED_PACK",
            Self::FuqiRedPack => "FUQI_RED_PACK",
            Self::LiveActivityCommonRedPack => "LIVE_ACTIVITY_COMMON_RED_PACK",
            Self::LivePortalRedPack => "LIVE_PORTAL_RED_PACK",
            Self::LiveCommonConditiconRedpack => "LIVE_COMMON_CONDITICON_REDPACK",
            Self::FansIncreaseRedPack => "FANS_INCREASE_RED_PACK",
            Self::ArrowConditiconRedPack => "ARROW_CONDITICON_RED_PACK",
            Self::PasswordRedPacket => "PASSWORD_RED_PACKET",
            Self::LiveTaskLeee => "LIVE_TASK_LEEE",
            Self::BulletPlayLeee => "BULLET_PLAY_LEEE",
            Self::LiveFansGroupSuper => "LIVE_FANS_GROUP_SUPER",
            Self::LiveFansGroupJinfen => "LIVE_FANS_GROUP_JINFEN",
            Self::LiveFansGroupZuanfen => "LIVE_FANS_GROUP_ZUANFEN",
            Self::LiveAudienceConditiconKwaiCoin => "LIVE_AUDIENCE_CONDITICON_KWAI_COIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RedPackType_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "COMMON_RED_PACK" => Some(Self::CommonRedPack),
            "RedPackType_SHARE_RED_PACK" => Some(Self::ShareRedPack),
            "FOLLOW_RED_PACK" => Some(Self::FollowRedPack),
            "TOKEN_RED_PACK" => Some(Self::TokenRedPack),
            "ARROW_RED_PACK" => Some(Self::ArrowRedPack),
            "RedPackType_THANKS_RED_PACK" => Some(Self::ThanksRedPack),
            "RedPackType_MILLION_RED_PACK" => Some(Self::MillionRedPack),
            "AUDIENCE_RED_PACKET" => Some(Self::AudienceRedPacket),
            "FANS_GROUP_RED_PACKET" => Some(Self::FansGroupRedPacket),
            "GIFT_RED_PACKET" => Some(Self::GiftRedPacket),
            "SURPRISE_RED_PACK" => Some(Self::SurpriseRedPack),
            "COLLECT_CARDS_RED_PACK" => Some(Self::CollectCardsRedPack),
            "FUQI_RED_PACK" => Some(Self::FuqiRedPack),
            "LIVE_ACTIVITY_COMMON_RED_PACK" => Some(Self::LiveActivityCommonRedPack),
            "LIVE_PORTAL_RED_PACK" => Some(Self::LivePortalRedPack),
            "LIVE_COMMON_CONDITICON_REDPACK" => Some(Self::LiveCommonConditiconRedpack),
            "FANS_INCREASE_RED_PACK" => Some(Self::FansIncreaseRedPack),
            "ARROW_CONDITICON_RED_PACK" => Some(Self::ArrowConditiconRedPack),
            "PASSWORD_RED_PACKET" => Some(Self::PasswordRedPacket),
            "LIVE_TASK_LEEE" => Some(Self::LiveTaskLeee),
            "BULLET_PLAY_LEEE" => Some(Self::BulletPlayLeee),
            "LIVE_FANS_GROUP_SUPER" => Some(Self::LiveFansGroupSuper),
            "LIVE_FANS_GROUP_JINFEN" => Some(Self::LiveFansGroupJinfen),
            "LIVE_FANS_GROUP_ZUANFEN" => Some(Self::LiveFansGroupZuanfen),
            "LIVE_AUDIENCE_CONDITICON_KWAI_COIN" => {
                Some(Self::LiveAudienceConditiconKwaiCoin)
            }
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Orientation {
    LiveEntranceTypeUnknown1 = 0,
    Portrait = 1,
    Landscape = 2,
}
impl Orientation {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "Orientation_LiveEntranceType_UNKNOWN1",
            Self::Portrait => "PORTRAIT",
            Self::Landscape => "LANDSCAPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Orientation_LiveEntranceType_UNKNOWN1" => {
                Some(Self::LiveEntranceTypeUnknown1)
            }
            "PORTRAIT" => Some(Self::Portrait),
            "LANDSCAPE" => Some(Self::Landscape),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AccountType {
    LiveEntranceTypeUnknown = 0,
    Normal = 1,
    BusinessAccount = 2,
}
impl AccountType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown => "AccountType_LiveEntranceType_UNKNOWN",
            Self::Normal => "AccountType_NORMAL",
            Self::BusinessAccount => "BUSINESS_ACCOUNT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AccountType_LiveEntranceType_UNKNOWN" => Some(Self::LiveEntranceTypeUnknown),
            "AccountType_NORMAL" => Some(Self::Normal),
            "BUSINESS_ACCOUNT" => Some(Self::BusinessAccount),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Codec {
    LiveEntranceTypeUnknown1 = 0,
    Hevc = 1,
    H264 = 2,
}
impl Codec {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "Codec_LiveEntranceType_UNKNOWN1",
            Self::Hevc => "HEVC",
            Self::H264 => "H264",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Codec_LiveEntranceType_UNKNOWN1" => Some(Self::LiveEntranceTypeUnknown1),
            "HEVC" => Some(Self::Hevc),
            "H264" => Some(Self::H264),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayScene {
    LiveEntranceTypeUnknown1 = 0,
    AlbumPreview = 1,
    EditPreview = 2,
    PostPreview = 3,
}
impl PlayScene {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown1 => "PlayScene_LiveEntranceType_UNKNOWN1",
            Self::AlbumPreview => "ALBUM_PREVIEW",
            Self::EditPreview => "EDIT_PREVIEW",
            Self::PostPreview => "POST_PREVIEW",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PlayScene_LiveEntranceType_UNKNOWN1" => Some(Self::LiveEntranceTypeUnknown1),
            "ALBUM_PREVIEW" => Some(Self::AlbumPreview),
            "EDIT_PREVIEW" => Some(Self::EditPreview),
            "POST_PREVIEW" => Some(Self::PostPreview),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Player {
    LiveEntranceTypeUnknown2 = 0,
    Ijkplayer = 1,
    Avplayer = 2,
    Editorsdk = 3,
}
impl Player {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "Player_LiveEntranceType_UNKNOWN2",
            Self::Ijkplayer => "IJKPLAYER",
            Self::Avplayer => "AVPLAYER",
            Self::Editorsdk => "EDITORSDK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "Player_LiveEntranceType_UNKNOWN2" => Some(Self::LiveEntranceTypeUnknown2),
            "IJKPLAYER" => Some(Self::Ijkplayer),
            "AVPLAYER" => Some(Self::Avplayer),
            "EDITORSDK" => Some(Self::Editorsdk),
            _ => None,
        }
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DecodeType {
    LiveEntranceTypeUnknown2 = 0,
    HardwareDecoding = 1,
    SoftwareDecoding = 2,
}
impl DecodeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::LiveEntranceTypeUnknown2 => "DecodeType_LiveEntranceType_UNKNOWN2",
            Self::HardwareDecoding => "HARDWARE_DECODING",
            Self::SoftwareDecoding => "SOFTWARE_DECODING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DecodeType_LiveEntranceType_UNKNOWN2" => {
                Some(Self::LiveEntranceTypeUnknown2)
            }
            "HARDWARE_DECODING" => Some(Self::HardwareDecoding),
            "SOFTWARE_DECODING" => Some(Self::SoftwareDecoding),
            _ => None,
        }
    }
}
